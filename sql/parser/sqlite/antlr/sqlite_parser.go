// Code generated from SQLiteParser.g4 by ANTLR 4.13.1. DO NOT EDIT.

package antlr // SQLiteParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type SQLiteParser struct {
	*antlr.BaseParser
}

var SQLiteParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func sqliteparserParserInit() {
	staticData := &SQLiteParserParserStaticData
	staticData.LiteralNames = []string{
		"", "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'",
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'",
		"'>='", "'=='", "'!='", "'<>'", "'ABORT'", "'ACTION'", "'ADD'", "'AFTER'",
		"'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'ATTACH'",
		"'AUTOINCREMENT'", "'BINARY'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BY'",
		"'CASCADE'", "'CASE'", "'CAST'", "'CHECK'", "'COLLATE'", "'COLUMN'",
		"'COMMIT'", "'CONFLICT'", "'CONSTRAINT'", "'COPY'", "'CREATE'", "'CROSS'",
		"'CSV'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'",
		"'DATABASE'", "'DEFAULT'", "'DEFERRABLE'", "'DEFERRED'", "'DELETE'",
		"'DESC'", "'DETACH'", "'DISTINCT'", "'DROP'", "'EACH'", "'ELSE'", "'END'",
		"'ESCAPE'", "'EXCEPT'", "'EXCLUSIVE'", "'EXISTS'", "'EXPLAIN'", "'FAIL'",
		"'FOR'", "'FOREIGN'", "'FORMAT'", "'FROM'", "'FULL'", "'GLOB'", "'GROUP'",
		"'HAVING'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INDEX'", "'INDEXED'",
		"'INITIALLY'", "'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'",
		"'IS'", "'ISNULL'", "'JOIN'", "'KEY'", "'LEFT'", "'LIKE'", "'LIMIT'",
		"'MATCH'", "'NATURAL'", "'NO'", "'NOT'", "'NOTNULL'", "'NULL'", "'OF'",
		"'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", "'PLAN'", "'PRAGMA'",
		"'PRIMARY'", "'QUERY'", "'RAISE'", "'RECURSIVE'", "'REFERENCES'", "'REGEXP'",
		"'REINDEX'", "'RELEASE'", "'RENAME'", "'REPLACE'", "'RESTRICT'", "'RETURNING'",
		"'RIGHT'", "'ROLLBACK'", "'ROW'", "'ROWS'", "'SAVEPOINT'", "'SELECT'",
		"'SET'", "'TABLE'", "'TEMP'", "'TEMPORARY'", "'TEXT'", "'THEN'", "'TO'",
		"'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'UNION'", "'UNIQUE'", "'UPDATE'",
		"'USING'", "'VACUUM'", "'VALUES'", "'VIEW'", "'VIRTUAL'", "'WHEN'",
		"'WHERE'", "'WITH'", "'WITHOUT'", "'FIRST_VALUE'", "'OVER'", "'PARTITION'",
		"'RANGE'", "'PRECEDING'", "'UNBOUNDED'", "'CURRENT'", "'FOLLOWING'",
		"'CUME_DIST'", "'DENSE_RANK'", "'LAG'", "'LAST_VALUE'", "'LEAD'", "'NTH_VALUE'",
		"'NTILE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'GENERATED'",
		"'ALWAYS'", "'STORED'", "'TRUE'", "'FALSE'", "'WINDOW'", "'NULLS'",
		"'FIRST'", "'LAST'", "'FILTER'", "'GROUPS'", "'EXCLUDE'", "'TIES'",
		"'OTHERS'", "'DO'", "'NOTHING'",
	}
	staticData.SymbolicNames = []string{
		"", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR",
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP",
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "ABORT_",
		"ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", "ANALYZE_", "AND_", "AS_",
		"ASC_", "ATTACH_", "AUTOINCREMENT_", "BINARY_", "BEFORE_", "BEGIN_",
		"BETWEEN_", "BY_", "CASCADE_", "CASE_", "CAST_", "CHECK_", "COLLATE_",
		"COLUMN_", "COMMIT_", "CONFLICT_", "CONSTRAINT_", "COPY_", "CREATE_",
		"CROSS_", "CSV_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_",
		"DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", "DELETE_", "DESC_",
		"DETACH_", "DISTINCT_", "DROP_", "EACH_", "ELSE_", "END_", "ESCAPE_",
		"EXCEPT_", "EXCLUSIVE_", "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_",
		"FORMAT_", "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", "IGNORE_",
		"IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", "INITIALLY_", "INNER_", "INSERT_",
		"INSTEAD_", "INTERSECT_", "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_",
		"LEFT_", "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", "NOTNULL_",
		"NULL_", "OF_", "OFFSET_", "ON_", "OR_", "ORDER_", "OUTER_", "PLAN_",
		"PRAGMA_", "PRIMARY_", "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_",
		"REGEXP_", "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_",
		"RETURNING_", "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_",
		"SELECT_", "SET_", "TABLE_", "TEMP_", "TEMPORARY_", "TEXT_", "THEN_",
		"TO_", "TRANSACTION_", "TRIGGER_", "TRUNCATE_", "UNION_", "UNIQUE_",
		"UPDATE_", "USING_", "VACUUM_", "VALUES_", "VIEW_", "VIRTUAL_", "WHEN_",
		"WHERE_", "WITH_", "WITHOUT_", "FIRST_VALUE_", "OVER_", "PARTITION_",
		"RANGE_", "PRECEDING_", "UNBOUNDED_", "CURRENT_", "FOLLOWING_", "CUME_DIST_",
		"DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", "NTH_VALUE_", "NTILE_",
		"PERCENT_RANK_", "RANK_", "ROW_NUMBER_", "GENERATED_", "ALWAYS_", "STORED_",
		"TRUE_", "FALSE_", "WINDOW_", "NULLS_", "FIRST_", "LAST_", "FILTER_",
		"GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", "DO_", "NOTHING_", "IDENTIFIER",
		"NUMERIC_LITERAL", "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL",
		"SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR",
	}
	staticData.RuleNames = []string{
		"parse", "sql_stmt_list", "sql_stmt", "alter_database_stmt", "rename_database_to",
		"alter_table_stmt", "rename_table_to", "rename_table_colum", "add_table_column",
		"add_table_index", "drop_table_column", "analyze_stmt", "attach_stmt",
		"begin_stmt", "commit_stmt", "rollback_stmt", "savepoint_stmt", "release_stmt",
		"create_index_stmt", "indexed_column", "create_database_stmt", "if_not_exists",
		"create_table_stmt", "column_def", "with_param", "type_name", "column_constraint",
		"primary_key_constraint", "signed_number", "table_constraint", "primary_key_def",
		"unique_key_def", "foreign_key_clause", "conflict_clause", "create_trigger_stmt",
		"create_view_stmt", "create_virtual_table_stmt", "with_clause", "cte_table_name",
		"recursive_cte", "common_table_expression", "delete_stmt", "delete_stmt_limited",
		"detach_stmt", "drop_stmt", "drop_database_stmt", "drop_index_stmt",
		"drop_table_stmt", "drop_trigger_stmt", "drop_view_stmt", "if_exists",
		"copy_stmt", "copy_column_list", "copy_format", "source_name", "truncate_stmt",
		"expr", "function", "comparison_expr", "arithmetic_expr", "raise_function",
		"literal_value", "bind_param", "string_literal", "value_row", "values_clause",
		"insert_stmt", "returning_clause", "upsert_clause", "pragma_stmt", "pragma_value",
		"reindex_stmt", "select_stmt", "join_clause", "select_core", "factored_select_stmt",
		"simple_select_stmt", "compound_select_stmt", "from", "from_table",
		"from_function", "from_table_or_subquery", "from_select", "table_or_subquery",
		"result_column", "join_operator", "join_constraint", "compound_operator",
		"update_stmt", "update_column_set", "column_name_list", "update_stmt_limited",
		"qualified_table_name", "vacuum_stmt", "filter_clause", "window_defn",
		"over_clause", "frame_spec", "frame_clause", "simple_function_invocation",
		"aggregate_function_invocation", "window_function_invocation", "common_table_stmt",
		"order_by_stmt", "limit_stmt", "ordering_term", "asc_desc", "frame_left",
		"frame_right", "frame_single", "window_function", "offset", "default_value",
		"partition_by", "order_by_expr", "order_by_expr_asc_desc", "expr_asc_desc",
		"initial_select", "recursive_select", "unary_operator", "error_message",
		"module_argument", "column_alias", "keyword", "name", "database_name",
		"function_name", "schema_name", "table_name", "table_or_index_name",
		"column_name", "collation_name", "foreign_table", "index_name", "trigger_name",
		"view_name", "module_name", "pragma_name", "savepoint_name", "table_alias",
		"transaction_name", "window_name", "alias", "filename", "base_window_name",
		"simple_func", "aggregate_func", "table_function_name", "any_name",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 199, 2392, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2,
		122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7,
		126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2,
		131, 7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7,
		135, 2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2,
		140, 7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7,
		144, 2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 1,
		0, 5, 0, 300, 8, 0, 10, 0, 12, 0, 303, 9, 0, 1, 0, 1, 0, 1, 1, 5, 1, 308,
		8, 1, 10, 1, 12, 1, 311, 9, 1, 1, 1, 1, 1, 4, 1, 315, 8, 1, 11, 1, 12,
		1, 316, 1, 1, 5, 1, 320, 8, 1, 10, 1, 12, 1, 323, 9, 1, 1, 1, 5, 1, 326,
		8, 1, 10, 1, 12, 1, 329, 9, 1, 1, 2, 1, 2, 1, 2, 3, 2, 334, 8, 2, 3, 2,
		336, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
		1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 370,
		8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 377, 8, 3, 1, 3, 1, 3, 1, 3,
		1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 391, 8, 5,
		1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 399, 8, 5, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 7, 1, 7, 3, 7, 407, 8, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8,
		3, 8, 415, 8, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9,
		425, 8, 9, 10, 9, 12, 9, 428, 9, 9, 1, 9, 1, 9, 1, 10, 1, 10, 3, 10, 434,
		8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 443, 8,
		11, 1, 11, 3, 11, 446, 8, 11, 1, 12, 1, 12, 3, 12, 450, 8, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 13, 1, 13, 3, 13, 458, 8, 13, 1, 13, 3, 13, 461, 8,
		13, 1, 13, 3, 13, 464, 8, 13, 3, 13, 466, 8, 13, 1, 14, 1, 14, 3, 14, 470,
		8, 14, 1, 15, 1, 15, 3, 15, 474, 8, 15, 1, 15, 1, 15, 3, 15, 478, 8, 15,
		1, 15, 3, 15, 481, 8, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 3, 17, 488,
		8, 17, 1, 17, 1, 17, 1, 18, 1, 18, 3, 18, 494, 8, 18, 1, 18, 1, 18, 3,
		18, 498, 8, 18, 1, 18, 1, 18, 1, 18, 3, 18, 503, 8, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 5, 18, 512, 8, 18, 10, 18, 12, 18, 515,
		9, 18, 1, 18, 1, 18, 1, 18, 3, 18, 520, 8, 18, 1, 19, 1, 19, 3, 19, 524,
		8, 19, 1, 19, 1, 19, 3, 19, 528, 8, 19, 1, 19, 3, 19, 531, 8, 19, 1, 20,
		1, 20, 1, 20, 3, 20, 536, 8, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1,
		21, 1, 22, 1, 22, 3, 22, 546, 8, 22, 1, 22, 1, 22, 3, 22, 550, 8, 22, 1,
		22, 1, 22, 1, 22, 3, 22, 555, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22,
		5, 22, 562, 8, 22, 10, 22, 12, 22, 565, 9, 22, 1, 22, 1, 22, 5, 22, 569,
		8, 22, 10, 22, 12, 22, 572, 9, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1,
		22, 1, 22, 1, 22, 5, 22, 582, 8, 22, 10, 22, 12, 22, 585, 9, 22, 1, 22,
		1, 22, 3, 22, 589, 8, 22, 1, 22, 1, 22, 3, 22, 593, 8, 22, 1, 23, 1, 23,
		3, 23, 597, 8, 23, 1, 23, 5, 23, 600, 8, 23, 10, 23, 12, 23, 603, 9, 23,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 4, 25, 610, 8, 25, 11, 25, 12, 25, 611,
		1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3,
		25, 624, 8, 25, 1, 26, 1, 26, 3, 26, 628, 8, 26, 1, 26, 1, 26, 3, 26, 632,
		8, 26, 1, 26, 1, 26, 3, 26, 636, 8, 26, 1, 26, 3, 26, 639, 8, 26, 1, 26,
		1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1,
		26, 3, 26, 653, 8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 660, 8,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 667, 8, 26, 3, 26, 669, 8,
		26, 1, 27, 1, 27, 1, 27, 3, 27, 674, 8, 27, 1, 27, 3, 27, 677, 8, 27, 1,
		27, 3, 27, 680, 8, 27, 1, 28, 3, 28, 683, 8, 28, 1, 28, 1, 28, 1, 29, 1,
		29, 3, 29, 689, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 5, 29, 704, 8, 29, 10, 29, 12,
		29, 707, 9, 29, 1, 29, 1, 29, 1, 29, 3, 29, 712, 8, 29, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 30, 5, 30, 720, 8, 30, 10, 30, 12, 30, 723, 9, 30,
		1, 30, 1, 30, 3, 30, 727, 8, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 5,
		31, 734, 8, 31, 10, 31, 12, 31, 737, 9, 31, 1, 31, 1, 31, 3, 31, 741, 8,
		31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 5, 32, 749, 8, 32, 10, 32,
		12, 32, 752, 9, 32, 1, 32, 1, 32, 3, 32, 756, 8, 32, 1, 32, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 766, 8, 32, 1, 32, 1, 32, 5,
		32, 770, 8, 32, 10, 32, 12, 32, 773, 9, 32, 1, 32, 3, 32, 776, 8, 32, 1,
		32, 1, 32, 1, 32, 3, 32, 781, 8, 32, 3, 32, 783, 8, 32, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 34, 1, 34, 3, 34, 791, 8, 34, 1, 34, 1, 34, 3, 34, 795, 8,
		34, 1, 34, 1, 34, 1, 34, 3, 34, 800, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34,
		1, 34, 3, 34, 807, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1,
		34, 5, 34, 816, 8, 34, 10, 34, 12, 34, 819, 9, 34, 3, 34, 821, 8, 34, 3,
		34, 823, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 830, 8, 34, 1,
		34, 1, 34, 3, 34, 834, 8, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 3, 34,
		841, 8, 34, 1, 34, 1, 34, 4, 34, 845, 8, 34, 11, 34, 12, 34, 846, 1, 34,
		1, 34, 1, 35, 1, 35, 3, 35, 853, 8, 35, 1, 35, 1, 35, 3, 35, 857, 8, 35,
		1, 35, 1, 35, 1, 35, 3, 35, 862, 8, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1,
		35, 5, 35, 869, 8, 35, 10, 35, 12, 35, 872, 9, 35, 1, 35, 1, 35, 3, 35,
		876, 8, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 3, 36, 885,
		8, 36, 1, 36, 1, 36, 1, 36, 3, 36, 890, 8, 36, 1, 36, 1, 36, 1, 36, 1,
		36, 1, 36, 1, 36, 1, 36, 5, 36, 899, 8, 36, 10, 36, 12, 36, 902, 9, 36,
		1, 36, 1, 36, 3, 36, 906, 8, 36, 1, 37, 1, 37, 3, 37, 910, 8, 37, 1, 37,
		1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 5, 37, 924, 8, 37, 10, 37, 12, 37, 927, 9, 37, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 38, 5, 38, 934, 8, 38, 10, 38, 12, 38, 937, 9, 38, 1, 38, 1,
		38, 3, 38, 941, 8, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 3, 39,
		949, 8, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 5,
		40, 959, 8, 40, 10, 40, 12, 40, 962, 9, 40, 1, 40, 1, 40, 3, 40, 966, 8,
		40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 41, 3, 41, 974, 8, 41, 1, 41,
		1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 981, 8, 41, 1, 41, 3, 41, 984, 8, 41,
		1, 42, 3, 42, 987, 8, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 994,
		8, 42, 1, 42, 3, 42, 997, 8, 42, 1, 42, 3, 42, 1000, 8, 42, 1, 42, 3, 42,
		1003, 8, 42, 1, 43, 1, 43, 3, 43, 1007, 8, 43, 1, 43, 1, 43, 1, 44, 1,
		44, 1, 44, 3, 44, 1014, 8, 44, 1, 44, 1, 44, 1, 44, 3, 44, 1019, 8, 44,
		1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 3, 45, 1026, 8, 45, 1, 45, 1, 45, 1,
		46, 1, 46, 1, 46, 3, 46, 1033, 8, 46, 1, 46, 1, 46, 1, 46, 3, 46, 1038,
		8, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 3, 47, 1045, 8, 47, 1, 47, 1,
		47, 1, 47, 3, 47, 1050, 8, 47, 1, 47, 1, 47, 1, 47, 5, 47, 1055, 8, 47,
		10, 47, 12, 47, 1058, 9, 47, 1, 48, 1, 48, 1, 48, 3, 48, 1063, 8, 48, 1,
		48, 1, 48, 1, 48, 3, 48, 1068, 8, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49,
		3, 49, 1075, 8, 49, 1, 49, 1, 49, 1, 49, 3, 49, 1080, 8, 49, 1, 49, 1,
		49, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 3, 51, 1090, 8, 51, 1, 51,
		1, 51, 1, 51, 3, 51, 1095, 8, 51, 1, 51, 3, 51, 1098, 8, 51, 1, 52, 1,
		52, 1, 52, 1, 52, 5, 52, 1104, 8, 52, 10, 52, 12, 52, 1107, 9, 52, 1, 52,
		1, 52, 1, 53, 3, 53, 1112, 8, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 55, 1,
		55, 3, 55, 1120, 8, 55, 1, 55, 1, 55, 1, 55, 5, 55, 1125, 8, 55, 10, 55,
		12, 55, 1128, 9, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3,
		56, 1137, 8, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1142, 8, 56, 1, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 1154, 8,
		56, 10, 56, 12, 56, 1157, 9, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1169, 8, 56, 1, 56, 3, 56, 1172,
		8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1180, 8, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 4, 56, 1187, 8, 56, 11, 56, 12, 56, 1188,
		1, 56, 1, 56, 3, 56, 1193, 8, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1198, 8,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1216, 8, 56, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1228,
		8, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1233, 8, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1245, 8, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 3, 56, 1251, 8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 3, 56, 1258, 8, 56, 1, 56, 1, 56, 3, 56, 1262, 8, 56, 1, 56, 1, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 5, 56, 1270, 8, 56, 10, 56, 12, 56, 1273, 9,
		56, 3, 56, 1275, 8, 56, 1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1281, 8, 56,
		1, 56, 1, 56, 1, 56, 1, 56, 3, 56, 1287, 8, 56, 1, 56, 1, 56, 1, 56, 1,
		56, 1, 56, 5, 56, 1294, 8, 56, 10, 56, 12, 56, 1297, 9, 56, 3, 56, 1299,
		8, 56, 1, 56, 1, 56, 3, 56, 1303, 8, 56, 5, 56, 1305, 8, 56, 10, 56, 12,
		56, 1308, 9, 56, 1, 57, 1, 57, 1, 57, 3, 57, 1313, 8, 57, 1, 57, 1, 57,
		1, 57, 5, 57, 1318, 8, 57, 10, 57, 12, 57, 1321, 9, 57, 1, 57, 3, 57, 1324,
		8, 57, 1, 57, 1, 57, 3, 57, 1328, 8, 57, 1, 57, 3, 57, 1331, 8, 57, 1,
		58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60,
		1, 60, 1, 60, 1, 60, 3, 60, 1347, 8, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1,
		61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 1, 61, 3, 61, 1360, 8, 61, 1, 62,
		1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 5, 64, 1370, 8, 64, 10,
		64, 12, 64, 1373, 9, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 5, 65,
		1381, 8, 65, 10, 65, 12, 65, 1384, 9, 65, 1, 66, 3, 66, 1387, 8, 66, 1,
		66, 1, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1394, 8, 66, 1, 66, 1, 66, 1, 66,
		1, 66, 3, 66, 1400, 8, 66, 1, 66, 1, 66, 1, 66, 3, 66, 1405, 8, 66, 1,
		66, 1, 66, 1, 66, 1, 66, 5, 66, 1411, 8, 66, 10, 66, 12, 66, 1414, 9, 66,
		1, 66, 1, 66, 3, 66, 1418, 8, 66, 1, 66, 1, 66, 3, 66, 1422, 8, 66, 1,
		66, 3, 66, 1425, 8, 66, 1, 66, 1, 66, 3, 66, 1429, 8, 66, 1, 66, 3, 66,
		1432, 8, 66, 1, 67, 1, 67, 1, 67, 1, 67, 5, 67, 1438, 8, 67, 10, 67, 12,
		67, 1441, 9, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 5, 68, 1449,
		8, 68, 10, 68, 12, 68, 1452, 9, 68, 1, 68, 1, 68, 1, 68, 3, 68, 1457, 8,
		68, 3, 68, 1459, 8, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68,
		1467, 8, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68, 1474, 8, 68, 1,
		68, 1, 68, 1, 68, 5, 68, 1479, 8, 68, 10, 68, 12, 68, 1482, 9, 68, 1, 68,
		1, 68, 3, 68, 1486, 8, 68, 3, 68, 1488, 8, 68, 1, 69, 1, 69, 1, 69, 1,
		69, 3, 69, 1494, 8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69,
		3, 69, 1503, 8, 69, 1, 70, 1, 70, 1, 70, 3, 70, 1508, 8, 70, 1, 71, 1,
		71, 1, 71, 1, 71, 1, 71, 3, 71, 1515, 8, 71, 1, 71, 1, 71, 3, 71, 1519,
		8, 71, 3, 71, 1521, 8, 71, 1, 72, 3, 72, 1524, 8, 72, 1, 72, 1, 72, 1,
		72, 1, 72, 5, 72, 1530, 8, 72, 10, 72, 12, 72, 1533, 9, 72, 1, 72, 3, 72,
		1536, 8, 72, 1, 72, 3, 72, 1539, 8, 72, 1, 73, 1, 73, 1, 73, 1, 73, 3,
		73, 1545, 8, 73, 5, 73, 1547, 8, 73, 10, 73, 12, 73, 1550, 9, 73, 1, 74,
		1, 74, 3, 74, 1554, 8, 74, 1, 74, 1, 74, 1, 74, 5, 74, 1559, 8, 74, 10,
		74, 12, 74, 1562, 9, 74, 1, 74, 1, 74, 1, 74, 1, 74, 5, 74, 1568, 8, 74,
		10, 74, 12, 74, 1571, 9, 74, 1, 74, 3, 74, 1574, 8, 74, 3, 74, 1576, 8,
		74, 1, 74, 1, 74, 3, 74, 1580, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74,
		5, 74, 1587, 8, 74, 10, 74, 12, 74, 1590, 9, 74, 1, 74, 1, 74, 3, 74, 1594,
		8, 74, 3, 74, 1596, 8, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1,
		74, 1, 74, 1, 74, 5, 74, 1607, 8, 74, 10, 74, 12, 74, 1610, 9, 74, 3, 74,
		1612, 8, 74, 1, 74, 3, 74, 1615, 8, 74, 1, 75, 1, 75, 1, 76, 3, 76, 1620,
		8, 76, 1, 76, 1, 76, 3, 76, 1624, 8, 76, 1, 76, 3, 76, 1627, 8, 76, 1,
		77, 3, 77, 1630, 8, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1635, 8, 77, 1, 77,
		1, 77, 3, 77, 1639, 8, 77, 1, 77, 4, 77, 1642, 8, 77, 11, 77, 12, 77, 1643,
		1, 77, 3, 77, 1647, 8, 77, 1, 77, 3, 77, 1650, 8, 77, 1, 78, 1, 78, 1,
		78, 1, 78, 3, 78, 1656, 8, 78, 1, 79, 1, 79, 1, 79, 3, 79, 1661, 8, 79,
		1, 79, 1, 79, 3, 79, 1665, 8, 79, 1, 79, 3, 79, 1668, 8, 79, 1, 79, 1,
		79, 1, 79, 1, 79, 1, 79, 3, 79, 1675, 8, 79, 1, 80, 1, 80, 1, 80, 3, 80,
		1680, 8, 80, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 5, 80, 1687, 8, 80, 10,
		80, 12, 80, 1690, 9, 80, 1, 80, 1, 80, 3, 80, 1694, 8, 80, 1, 80, 3, 80,
		1697, 8, 80, 1, 81, 1, 81, 1, 81, 1, 81, 5, 81, 1703, 8, 81, 10, 81, 12,
		81, 1706, 9, 81, 1, 81, 3, 81, 1709, 8, 81, 1, 81, 1, 81, 1, 82, 1, 82,
		1, 82, 1, 82, 3, 82, 1717, 8, 82, 1, 82, 3, 82, 1720, 8, 82, 1, 83, 1,
		83, 1, 83, 3, 83, 1725, 8, 83, 1, 83, 1, 83, 3, 83, 1729, 8, 83, 1, 83,
		3, 83, 1732, 8, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1739, 8,
		83, 1, 83, 1, 83, 1, 83, 3, 83, 1744, 8, 83, 1, 83, 1, 83, 1, 83, 1, 83,
		1, 83, 5, 83, 1751, 8, 83, 10, 83, 12, 83, 1754, 9, 83, 1, 83, 1, 83, 3,
		83, 1758, 8, 83, 1, 83, 3, 83, 1761, 8, 83, 1, 83, 1, 83, 1, 83, 1, 83,
		5, 83, 1767, 8, 83, 10, 83, 12, 83, 1770, 9, 83, 1, 83, 3, 83, 1773, 8,
		83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1781, 8, 83, 1, 83,
		3, 83, 1784, 8, 83, 3, 83, 1786, 8, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1,
		84, 1, 84, 1, 84, 3, 84, 1795, 8, 84, 1, 84, 3, 84, 1798, 8, 84, 3, 84,
		1800, 8, 84, 1, 85, 1, 85, 3, 85, 1804, 8, 85, 1, 85, 1, 85, 3, 85, 1808,
		8, 85, 1, 85, 1, 85, 3, 85, 1812, 8, 85, 1, 85, 3, 85, 1815, 8, 85, 1,
		86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 5, 86, 1824, 8, 86, 10, 86,
		12, 86, 1827, 9, 86, 1, 86, 1, 86, 3, 86, 1831, 8, 86, 1, 87, 1, 87, 3,
		87, 1835, 8, 87, 1, 87, 1, 87, 3, 87, 1839, 8, 87, 1, 88, 3, 88, 1842,
		8, 88, 1, 88, 1, 88, 1, 88, 3, 88, 1847, 8, 88, 1, 88, 1, 88, 1, 88, 1,
		88, 1, 88, 5, 88, 1854, 8, 88, 10, 88, 12, 88, 1857, 9, 88, 1, 88, 1, 88,
		1, 88, 1, 88, 5, 88, 1863, 8, 88, 10, 88, 12, 88, 1866, 9, 88, 1, 88, 3,
		88, 1869, 8, 88, 3, 88, 1871, 8, 88, 1, 88, 1, 88, 3, 88, 1875, 8, 88,
		1, 88, 3, 88, 1878, 8, 88, 1, 89, 1, 89, 3, 89, 1882, 8, 89, 1, 89, 1,
		89, 1, 89, 1, 90, 1, 90, 1, 90, 1, 90, 5, 90, 1891, 8, 90, 10, 90, 12,
		90, 1894, 9, 90, 1, 90, 1, 90, 1, 91, 3, 91, 1899, 8, 91, 1, 91, 1, 91,
		1, 91, 3, 91, 1904, 8, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1910, 8,
		91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 3, 91, 1917, 8, 91, 1, 91, 1, 91,
		1, 91, 5, 91, 1922, 8, 91, 10, 91, 12, 91, 1925, 9, 91, 1, 91, 1, 91, 3,
		91, 1929, 8, 91, 1, 91, 3, 91, 1932, 8, 91, 1, 91, 3, 91, 1935, 8, 91,
		1, 91, 3, 91, 1938, 8, 91, 1, 92, 1, 92, 1, 92, 3, 92, 1943, 8, 92, 1,
		92, 1, 92, 1, 92, 3, 92, 1948, 8, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92,
		3, 92, 1955, 8, 92, 1, 93, 1, 93, 3, 93, 1959, 8, 93, 1, 93, 3, 93, 1962,
		8, 93, 1, 93, 1, 93, 3, 93, 1966, 8, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1,
		94, 1, 94, 1, 95, 1, 95, 3, 95, 1976, 8, 95, 1, 95, 1, 95, 1, 95, 1, 95,
		1, 95, 5, 95, 1983, 8, 95, 10, 95, 12, 95, 1986, 9, 95, 3, 95, 1988, 8,
		95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 5, 95, 1995, 8, 95, 10, 95, 12,
		95, 1998, 9, 95, 1, 95, 3, 95, 2001, 8, 95, 1, 95, 1, 95, 1, 96, 1, 96,
		1, 96, 1, 96, 3, 96, 2009, 8, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 5,
		96, 2016, 8, 96, 10, 96, 12, 96, 2019, 9, 96, 3, 96, 2021, 8, 96, 1, 96,
		1, 96, 1, 96, 1, 96, 1, 96, 5, 96, 2028, 8, 96, 10, 96, 12, 96, 2031, 9,
		96, 3, 96, 2033, 8, 96, 1, 96, 3, 96, 2036, 8, 96, 1, 96, 3, 96, 2039,
		8, 96, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 1, 97, 3, 97, 2049,
		8, 97, 3, 97, 2051, 8, 97, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1, 98, 1,
		98, 3, 98, 2060, 8, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 5, 99, 2067,
		8, 99, 10, 99, 12, 99, 2070, 9, 99, 1, 99, 3, 99, 2073, 8, 99, 1, 99, 1,
		99, 1, 100, 1, 100, 1, 100, 3, 100, 2080, 8, 100, 1, 100, 1, 100, 1, 100,
		5, 100, 2085, 8, 100, 10, 100, 12, 100, 2088, 9, 100, 1, 100, 3, 100, 2091,
		8, 100, 1, 100, 1, 100, 3, 100, 2095, 8, 100, 1, 101, 1, 101, 1, 101, 1,
		101, 1, 101, 5, 101, 2102, 8, 101, 10, 101, 12, 101, 2105, 9, 101, 1, 101,
		3, 101, 2108, 8, 101, 1, 101, 1, 101, 3, 101, 2112, 8, 101, 1, 101, 1,
		101, 1, 101, 3, 101, 2117, 8, 101, 1, 102, 1, 102, 3, 102, 2121, 8, 102,
		1, 102, 1, 102, 1, 102, 5, 102, 2126, 8, 102, 10, 102, 12, 102, 2129, 9,
		102, 1, 103, 1, 103, 1, 103, 1, 103, 1, 103, 5, 103, 2136, 8, 103, 10,
		103, 12, 103, 2139, 9, 103, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 2145,
		8, 104, 1, 105, 1, 105, 1, 105, 3, 105, 2150, 8, 105, 1, 105, 3, 105, 2153,
		8, 105, 1, 105, 1, 105, 3, 105, 2157, 8, 105, 1, 106, 1, 106, 1, 107, 1,
		107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 1, 107, 3,
		107, 2171, 8, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108,
		1, 108, 1, 108, 1, 108, 3, 108, 2183, 8, 108, 1, 109, 1, 109, 1, 109, 1,
		109, 1, 109, 1, 109, 1, 109, 3, 109, 2192, 8, 109, 1, 110, 1, 110, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2201, 8, 110, 1, 110, 1, 110, 3,
		110, 2205, 8, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 3, 110, 2215, 8, 110, 1, 110, 3, 110, 2218, 8, 110, 1, 110, 1,
		110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2227, 8, 110, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2236, 8, 110, 1,
		110, 3, 110, 2239, 8, 110, 1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2245,
		8, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2259, 8, 110, 1, 110, 1, 110, 3,
		110, 2263, 8, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110, 1, 110,
		1, 110, 1, 110, 3, 110, 2274, 8, 110, 1, 110, 1, 110, 1, 110, 3, 110, 2279,
		8, 110, 1, 111, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112, 1, 113, 1, 113,
		1, 113, 4, 113, 2290, 8, 113, 11, 113, 12, 113, 2291, 1, 114, 1, 114, 1,
		114, 4, 114, 2297, 8, 114, 11, 114, 12, 114, 2298, 1, 115, 1, 115, 1, 115,
		1, 115, 1, 116, 1, 116, 3, 116, 2307, 8, 116, 1, 116, 1, 116, 1, 116, 3,
		116, 2312, 8, 116, 5, 116, 2314, 8, 116, 10, 116, 12, 116, 2317, 9, 116,
		1, 117, 1, 117, 1, 118, 1, 118, 1, 119, 1, 119, 1, 120, 1, 120, 1, 121,
		1, 121, 3, 121, 2329, 8, 121, 1, 122, 1, 122, 1, 123, 1, 123, 1, 124, 1,
		124, 1, 125, 1, 125, 1, 126, 1, 126, 1, 127, 1, 127, 1, 128, 1, 128, 1,
		129, 1, 129, 1, 130, 1, 130, 1, 131, 1, 131, 1, 132, 1, 132, 1, 133, 1,
		133, 1, 134, 1, 134, 1, 135, 1, 135, 1, 136, 1, 136, 1, 137, 1, 137, 1,
		138, 1, 138, 1, 139, 1, 139, 1, 140, 1, 140, 1, 141, 1, 141, 1, 142, 1,
		142, 1, 143, 1, 143, 1, 144, 1, 144, 1, 145, 1, 145, 1, 146, 1, 146, 1,
		147, 1, 147, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 1, 148, 3,
		148, 2390, 8, 148, 1, 148, 3, 563, 583, 611, 1, 112, 149, 0, 2, 4, 6, 8,
		10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44,
		46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80,
		82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
		144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
		174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202,
		204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232,
		234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262,
		264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292,
		294, 296, 0, 28, 3, 0, 61, 61, 72, 72, 86, 86, 2, 0, 48, 48, 69, 69, 1,
		0, 137, 138, 2, 0, 152, 152, 177, 177, 1, 0, 8, 9, 2, 0, 62, 62, 147, 147,
		2, 0, 59, 59, 108, 108, 2, 0, 61, 61, 86, 86, 5, 0, 25, 25, 75, 75, 85,
		85, 126, 126, 130, 130, 4, 0, 88, 88, 136, 136, 143, 143, 151, 151, 3,
		0, 37, 37, 54, 54, 139, 139, 1, 0, 14, 17, 4, 0, 81, 81, 101, 101, 103,
		103, 122, 122, 3, 0, 6, 6, 18, 21, 23, 24, 2, 0, 7, 9, 12, 13, 3, 0, 25,
		25, 75, 75, 130, 130, 2, 0, 29, 29, 65, 65, 3, 0, 132, 132, 160, 160, 185,
		185, 2, 0, 5, 5, 110, 110, 1, 0, 182, 183, 2, 0, 34, 34, 63, 63, 2, 0,
		157, 157, 168, 168, 2, 0, 165, 165, 172, 172, 2, 0, 166, 166, 173, 174,
		2, 0, 167, 167, 169, 169, 2, 0, 8, 10, 106, 106, 2, 0, 191, 191, 194, 194,
		7, 0, 25, 36, 38, 50, 52, 53, 55, 77, 79, 127, 129, 143, 145, 186, 2692,
		0, 301, 1, 0, 0, 0, 2, 309, 1, 0, 0, 0, 4, 335, 1, 0, 0, 0, 6, 371, 1,
		0, 0, 0, 8, 381, 1, 0, 0, 0, 10, 385, 1, 0, 0, 0, 12, 400, 1, 0, 0, 0,
		14, 404, 1, 0, 0, 0, 16, 412, 1, 0, 0, 0, 18, 418, 1, 0, 0, 0, 20, 431,
		1, 0, 0, 0, 22, 437, 1, 0, 0, 0, 24, 447, 1, 0, 0, 0, 26, 455, 1, 0, 0,
		0, 28, 467, 1, 0, 0, 0, 30, 471, 1, 0, 0, 0, 32, 482, 1, 0, 0, 0, 34, 485,
		1, 0, 0, 0, 36, 491, 1, 0, 0, 0, 38, 523, 1, 0, 0, 0, 40, 532, 1, 0, 0,
		0, 42, 539, 1, 0, 0, 0, 44, 543, 1, 0, 0, 0, 46, 594, 1, 0, 0, 0, 48, 604,
		1, 0, 0, 0, 50, 609, 1, 0, 0, 0, 52, 627, 1, 0, 0, 0, 54, 670, 1, 0, 0,
		0, 56, 682, 1, 0, 0, 0, 58, 688, 1, 0, 0, 0, 60, 713, 1, 0, 0, 0, 62, 728,
		1, 0, 0, 0, 64, 742, 1, 0, 0, 0, 66, 784, 1, 0, 0, 0, 68, 788, 1, 0, 0,
		0, 70, 850, 1, 0, 0, 0, 72, 880, 1, 0, 0, 0, 74, 907, 1, 0, 0, 0, 76, 928,
		1, 0, 0, 0, 78, 942, 1, 0, 0, 0, 80, 953, 1, 0, 0, 0, 82, 973, 1, 0, 0,
		0, 84, 986, 1, 0, 0, 0, 86, 1004, 1, 0, 0, 0, 88, 1010, 1, 0, 0, 0, 90,
		1022, 1, 0, 0, 0, 92, 1029, 1, 0, 0, 0, 94, 1041, 1, 0, 0, 0, 96, 1059,
		1, 0, 0, 0, 98, 1071, 1, 0, 0, 0, 100, 1083, 1, 0, 0, 0, 102, 1086, 1,
		0, 0, 0, 104, 1099, 1, 0, 0, 0, 106, 1111, 1, 0, 0, 0, 108, 1115, 1, 0,
		0, 0, 110, 1117, 1, 0, 0, 0, 112, 1197, 1, 0, 0, 0, 114, 1309, 1, 0, 0,
		0, 116, 1332, 1, 0, 0, 0, 118, 1336, 1, 0, 0, 0, 120, 1340, 1, 0, 0, 0,
		122, 1359, 1, 0, 0, 0, 124, 1361, 1, 0, 0, 0, 126, 1363, 1, 0, 0, 0, 128,
		1365, 1, 0, 0, 0, 130, 1376, 1, 0, 0, 0, 132, 1386, 1, 0, 0, 0, 134, 1433,
		1, 0, 0, 0, 136, 1442, 1, 0, 0, 0, 138, 1489, 1, 0, 0, 0, 140, 1507, 1,
		0, 0, 0, 142, 1509, 1, 0, 0, 0, 144, 1523, 1, 0, 0, 0, 146, 1540, 1, 0,
		0, 0, 148, 1614, 1, 0, 0, 0, 150, 1616, 1, 0, 0, 0, 152, 1619, 1, 0, 0,
		0, 154, 1629, 1, 0, 0, 0, 156, 1655, 1, 0, 0, 0, 158, 1660, 1, 0, 0, 0,
		160, 1679, 1, 0, 0, 0, 162, 1698, 1, 0, 0, 0, 164, 1712, 1, 0, 0, 0, 166,
		1785, 1, 0, 0, 0, 168, 1799, 1, 0, 0, 0, 170, 1814, 1, 0, 0, 0, 172, 1830,
		1, 0, 0, 0, 174, 1838, 1, 0, 0, 0, 176, 1841, 1, 0, 0, 0, 178, 1881, 1,
		0, 0, 0, 180, 1886, 1, 0, 0, 0, 182, 1898, 1, 0, 0, 0, 184, 1942, 1, 0,
		0, 0, 186, 1956, 1, 0, 0, 0, 188, 1967, 1, 0, 0, 0, 190, 1973, 1, 0, 0,
		0, 192, 2004, 1, 0, 0, 0, 194, 2040, 1, 0, 0, 0, 196, 2052, 1, 0, 0, 0,
		198, 2061, 1, 0, 0, 0, 200, 2076, 1, 0, 0, 0, 202, 2096, 1, 0, 0, 0, 204,
		2118, 1, 0, 0, 0, 206, 2130, 1, 0, 0, 0, 208, 2140, 1, 0, 0, 0, 210, 2146,
		1, 0, 0, 0, 212, 2158, 1, 0, 0, 0, 214, 2170, 1, 0, 0, 0, 216, 2182, 1,
		0, 0, 0, 218, 2191, 1, 0, 0, 0, 220, 2278, 1, 0, 0, 0, 222, 2280, 1, 0,
		0, 0, 224, 2283, 1, 0, 0, 0, 226, 2286, 1, 0, 0, 0, 228, 2293, 1, 0, 0,
		0, 230, 2300, 1, 0, 0, 0, 232, 2304, 1, 0, 0, 0, 234, 2318, 1, 0, 0, 0,
		236, 2320, 1, 0, 0, 0, 238, 2322, 1, 0, 0, 0, 240, 2324, 1, 0, 0, 0, 242,
		2328, 1, 0, 0, 0, 244, 2330, 1, 0, 0, 0, 246, 2332, 1, 0, 0, 0, 248, 2334,
		1, 0, 0, 0, 250, 2336, 1, 0, 0, 0, 252, 2338, 1, 0, 0, 0, 254, 2340, 1,
		0, 0, 0, 256, 2342, 1, 0, 0, 0, 258, 2344, 1, 0, 0, 0, 260, 2346, 1, 0,
		0, 0, 262, 2348, 1, 0, 0, 0, 264, 2350, 1, 0, 0, 0, 266, 2352, 1, 0, 0,
		0, 268, 2354, 1, 0, 0, 0, 270, 2356, 1, 0, 0, 0, 272, 2358, 1, 0, 0, 0,
		274, 2360, 1, 0, 0, 0, 276, 2362, 1, 0, 0, 0, 278, 2364, 1, 0, 0, 0, 280,
		2366, 1, 0, 0, 0, 282, 2368, 1, 0, 0, 0, 284, 2370, 1, 0, 0, 0, 286, 2372,
		1, 0, 0, 0, 288, 2374, 1, 0, 0, 0, 290, 2376, 1, 0, 0, 0, 292, 2378, 1,
		0, 0, 0, 294, 2380, 1, 0, 0, 0, 296, 2389, 1, 0, 0, 0, 298, 300, 3, 2,
		1, 0, 299, 298, 1, 0, 0, 0, 300, 303, 1, 0, 0, 0, 301, 299, 1, 0, 0, 0,
		301, 302, 1, 0, 0, 0, 302, 304, 1, 0, 0, 0, 303, 301, 1, 0, 0, 0, 304,
		305, 5, 0, 0, 1, 305, 1, 1, 0, 0, 0, 306, 308, 5, 1, 0, 0, 307, 306, 1,
		0, 0, 0, 308, 311, 1, 0, 0, 0, 309, 307, 1, 0, 0, 0, 309, 310, 1, 0, 0,
		0, 310, 312, 1, 0, 0, 0, 311, 309, 1, 0, 0, 0, 312, 321, 3, 4, 2, 0, 313,
		315, 5, 1, 0, 0, 314, 313, 1, 0, 0, 0, 315, 316, 1, 0, 0, 0, 316, 314,
		1, 0, 0, 0, 316, 317, 1, 0, 0, 0, 317, 318, 1, 0, 0, 0, 318, 320, 3, 4,
		2, 0, 319, 314, 1, 0, 0, 0, 320, 323, 1, 0, 0, 0, 321, 319, 1, 0, 0, 0,
		321, 322, 1, 0, 0, 0, 322, 327, 1, 0, 0, 0, 323, 321, 1, 0, 0, 0, 324,
		326, 5, 1, 0, 0, 325, 324, 1, 0, 0, 0, 326, 329, 1, 0, 0, 0, 327, 325,
		1, 0, 0, 0, 327, 328, 1, 0, 0, 0, 328, 3, 1, 0, 0, 0, 329, 327, 1, 0, 0,
		0, 330, 333, 5, 74, 0, 0, 331, 332, 5, 118, 0, 0, 332, 334, 5, 115, 0,
		0, 333, 331, 1, 0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335,
		330, 1, 0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 369, 1, 0, 0, 0, 337, 370,
		3, 6, 3, 0, 338, 370, 3, 10, 5, 0, 339, 370, 3, 22, 11, 0, 340, 370, 3,
		24, 12, 0, 341, 370, 3, 26, 13, 0, 342, 370, 3, 28, 14, 0, 343, 370, 3,
		40, 20, 0, 344, 370, 3, 36, 18, 0, 345, 370, 3, 44, 22, 0, 346, 370, 3,
		68, 34, 0, 347, 370, 3, 70, 35, 0, 348, 370, 3, 72, 36, 0, 349, 370, 3,
		82, 41, 0, 350, 370, 3, 84, 42, 0, 351, 370, 3, 86, 43, 0, 352, 370, 3,
		90, 45, 0, 353, 370, 3, 92, 46, 0, 354, 370, 3, 94, 47, 0, 355, 370, 3,
		96, 48, 0, 356, 370, 3, 98, 49, 0, 357, 370, 3, 132, 66, 0, 358, 370, 3,
		138, 69, 0, 359, 370, 3, 142, 71, 0, 360, 370, 3, 34, 17, 0, 361, 370,
		3, 30, 15, 0, 362, 370, 3, 32, 16, 0, 363, 370, 3, 144, 72, 0, 364, 370,
		3, 176, 88, 0, 365, 370, 3, 182, 91, 0, 366, 370, 3, 186, 93, 0, 367, 370,
		3, 102, 51, 0, 368, 370, 3, 110, 55, 0, 369, 337, 1, 0, 0, 0, 369, 338,
		1, 0, 0, 0, 369, 339, 1, 0, 0, 0, 369, 340, 1, 0, 0, 0, 369, 341, 1, 0,
		0, 0, 369, 342, 1, 0, 0, 0, 369, 343, 1, 0, 0, 0, 369, 344, 1, 0, 0, 0,
		369, 345, 1, 0, 0, 0, 369, 346, 1, 0, 0, 0, 369, 347, 1, 0, 0, 0, 369,
		348, 1, 0, 0, 0, 369, 349, 1, 0, 0, 0, 369, 350, 1, 0, 0, 0, 369, 351,
		1, 0, 0, 0, 369, 352, 1, 0, 0, 0, 369, 353, 1, 0, 0, 0, 369, 354, 1, 0,
		0, 0, 369, 355, 1, 0, 0, 0, 369, 356, 1, 0, 0, 0, 369, 357, 1, 0, 0, 0,
		369, 358, 1, 0, 0, 0, 369, 359, 1, 0, 0, 0, 369, 360, 1, 0, 0, 0, 369,
		361, 1, 0, 0, 0, 369, 362, 1, 0, 0, 0, 369, 363, 1, 0, 0, 0, 369, 364,
		1, 0, 0, 0, 369, 365, 1, 0, 0, 0, 369, 366, 1, 0, 0, 0, 369, 367, 1, 0,
		0, 0, 369, 368, 1, 0, 0, 0, 370, 5, 1, 0, 0, 0, 371, 372, 5, 30, 0, 0,
		372, 376, 5, 58, 0, 0, 373, 374, 3, 254, 127, 0, 374, 375, 5, 2, 0, 0,
		375, 377, 1, 0, 0, 0, 376, 373, 1, 0, 0, 0, 376, 377, 1, 0, 0, 0, 377,
		378, 1, 0, 0, 0, 378, 379, 3, 250, 125, 0, 379, 380, 3, 8, 4, 0, 380, 7,
		1, 0, 0, 0, 381, 382, 5, 125, 0, 0, 382, 383, 5, 141, 0, 0, 383, 384, 3,
		250, 125, 0, 384, 9, 1, 0, 0, 0, 385, 386, 5, 30, 0, 0, 386, 390, 5, 136,
		0, 0, 387, 388, 3, 254, 127, 0, 388, 389, 5, 2, 0, 0, 389, 391, 1, 0, 0,
		0, 390, 387, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 392, 1, 0, 0, 0, 392,
		398, 3, 256, 128, 0, 393, 399, 3, 12, 6, 0, 394, 399, 3, 14, 7, 0, 395,
		399, 3, 18, 9, 0, 396, 399, 3, 16, 8, 0, 397, 399, 3, 20, 10, 0, 398, 393,
		1, 0, 0, 0, 398, 394, 1, 0, 0, 0, 398, 395, 1, 0, 0, 0, 398, 396, 1, 0,
		0, 0, 398, 397, 1, 0, 0, 0, 399, 11, 1, 0, 0, 0, 400, 401, 5, 125, 0, 0,
		401, 402, 5, 141, 0, 0, 402, 403, 3, 256, 128, 0, 403, 13, 1, 0, 0, 0,
		404, 406, 5, 125, 0, 0, 405, 407, 5, 47, 0, 0, 406, 405, 1, 0, 0, 0, 406,
		407, 1, 0, 0, 0, 407, 408, 1, 0, 0, 0, 408, 409, 3, 260, 130, 0, 409, 410,
		5, 141, 0, 0, 410, 411, 3, 260, 130, 0, 411, 15, 1, 0, 0, 0, 412, 414,
		5, 27, 0, 0, 413, 415, 5, 47, 0, 0, 414, 413, 1, 0, 0, 0, 414, 415, 1,
		0, 0, 0, 415, 416, 1, 0, 0, 0, 416, 417, 3, 46, 23, 0, 417, 17, 1, 0, 0,
		0, 418, 419, 5, 27, 0, 0, 419, 420, 3, 52, 26, 0, 420, 421, 5, 3, 0, 0,
		421, 426, 3, 260, 130, 0, 422, 423, 5, 5, 0, 0, 423, 425, 3, 260, 130,
		0, 424, 422, 1, 0, 0, 0, 425, 428, 1, 0, 0, 0, 426, 424, 1, 0, 0, 0, 426,
		427, 1, 0, 0, 0, 427, 429, 1, 0, 0, 0, 428, 426, 1, 0, 0, 0, 429, 430,
		5, 4, 0, 0, 430, 19, 1, 0, 0, 0, 431, 433, 5, 66, 0, 0, 432, 434, 5, 47,
		0, 0, 433, 432, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0,
		435, 436, 3, 260, 130, 0, 436, 21, 1, 0, 0, 0, 437, 445, 5, 31, 0, 0, 438,
		446, 3, 254, 127, 0, 439, 440, 3, 254, 127, 0, 440, 441, 5, 2, 0, 0, 441,
		443, 1, 0, 0, 0, 442, 439, 1, 0, 0, 0, 442, 443, 1, 0, 0, 0, 443, 444,
		1, 0, 0, 0, 444, 446, 3, 258, 129, 0, 445, 438, 1, 0, 0, 0, 445, 442, 1,
		0, 0, 0, 445, 446, 1, 0, 0, 0, 446, 23, 1, 0, 0, 0, 447, 449, 5, 35, 0,
		0, 448, 450, 5, 58, 0, 0, 449, 448, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450,
		451, 1, 0, 0, 0, 451, 452, 3, 112, 56, 0, 452, 453, 5, 33, 0, 0, 453, 454,
		3, 254, 127, 0, 454, 25, 1, 0, 0, 0, 455, 457, 5, 39, 0, 0, 456, 458, 7,
		0, 0, 0, 457, 456, 1, 0, 0, 0, 457, 458, 1, 0, 0, 0, 458, 465, 1, 0, 0,
		0, 459, 461, 5, 142, 0, 0, 460, 459, 1, 0, 0, 0, 460, 461, 1, 0, 0, 0,
		461, 463, 1, 0, 0, 0, 462, 464, 3, 280, 140, 0, 463, 462, 1, 0, 0, 0, 463,
		464, 1, 0, 0, 0, 464, 466, 1, 0, 0, 0, 465, 460, 1, 0, 0, 0, 465, 466,
		1, 0, 0, 0, 466, 27, 1, 0, 0, 0, 467, 469, 7, 1, 0, 0, 468, 470, 5, 142,
		0, 0, 469, 468, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 29, 1, 0, 0, 0,
		471, 473, 5, 130, 0, 0, 472, 474, 5, 142, 0, 0, 473, 472, 1, 0, 0, 0, 473,
		474, 1, 0, 0, 0, 474, 480, 1, 0, 0, 0, 475, 477, 5, 141, 0, 0, 476, 478,
		5, 133, 0, 0, 477, 476, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 1,
		0, 0, 0, 479, 481, 3, 276, 138, 0, 480, 475, 1, 0, 0, 0, 480, 481, 1, 0,
		0, 0, 481, 31, 1, 0, 0, 0, 482, 483, 5, 133, 0, 0, 483, 484, 3, 276, 138,
		0, 484, 33, 1, 0, 0, 0, 485, 487, 5, 124, 0, 0, 486, 488, 5, 133, 0, 0,
		487, 486, 1, 0, 0, 0, 487, 488, 1, 0, 0, 0, 488, 489, 1, 0, 0, 0, 489,
		490, 3, 276, 138, 0, 490, 35, 1, 0, 0, 0, 491, 493, 5, 52, 0, 0, 492, 494,
		5, 146, 0, 0, 493, 492, 1, 0, 0, 0, 493, 494, 1, 0, 0, 0, 494, 495, 1,
		0, 0, 0, 495, 497, 5, 88, 0, 0, 496, 498, 3, 42, 21, 0, 497, 496, 1, 0,
		0, 0, 497, 498, 1, 0, 0, 0, 498, 502, 1, 0, 0, 0, 499, 500, 3, 254, 127,
		0, 500, 501, 5, 2, 0, 0, 501, 503, 1, 0, 0, 0, 502, 499, 1, 0, 0, 0, 502,
		503, 1, 0, 0, 0, 503, 504, 1, 0, 0, 0, 504, 505, 3, 266, 133, 0, 505, 506,
		5, 111, 0, 0, 506, 507, 3, 256, 128, 0, 507, 508, 5, 3, 0, 0, 508, 513,
		3, 38, 19, 0, 509, 510, 5, 5, 0, 0, 510, 512, 3, 38, 19, 0, 511, 509, 1,
		0, 0, 0, 512, 515, 1, 0, 0, 0, 513, 511, 1, 0, 0, 0, 513, 514, 1, 0, 0,
		0, 514, 516, 1, 0, 0, 0, 515, 513, 1, 0, 0, 0, 516, 519, 5, 4, 0, 0, 517,
		518, 5, 154, 0, 0, 518, 520, 3, 112, 56, 0, 519, 517, 1, 0, 0, 0, 519,
		520, 1, 0, 0, 0, 520, 37, 1, 0, 0, 0, 521, 524, 3, 260, 130, 0, 522, 524,
		3, 112, 56, 0, 523, 521, 1, 0, 0, 0, 523, 522, 1, 0, 0, 0, 524, 527, 1,
		0, 0, 0, 525, 526, 5, 46, 0, 0, 526, 528, 3, 262, 131, 0, 527, 525, 1,
		0, 0, 0, 527, 528, 1, 0, 0, 0, 528, 530, 1, 0, 0, 0, 529, 531, 3, 212,
		106, 0, 530, 529, 1, 0, 0, 0, 530, 531, 1, 0, 0, 0, 531, 39, 1, 0, 0, 0,
		532, 533, 5, 52, 0, 0, 533, 535, 5, 58, 0, 0, 534, 536, 3, 42, 21, 0, 535,
		534, 1, 0, 0, 0, 535, 536, 1, 0, 0, 0, 536, 537, 1, 0, 0, 0, 537, 538,
		3, 250, 125, 0, 538, 41, 1, 0, 0, 0, 539, 540, 5, 84, 0, 0, 540, 541, 5,
		106, 0, 0, 541, 542, 5, 73, 0, 0, 542, 43, 1, 0, 0, 0, 543, 545, 5, 52,
		0, 0, 544, 546, 7, 2, 0, 0, 545, 544, 1, 0, 0, 0, 545, 546, 1, 0, 0, 0,
		546, 547, 1, 0, 0, 0, 547, 549, 5, 136, 0, 0, 548, 550, 3, 42, 21, 0, 549,
		548, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 554, 1, 0, 0, 0, 551, 552,
		3, 254, 127, 0, 552, 553, 5, 2, 0, 0, 553, 555, 1, 0, 0, 0, 554, 551, 1,
		0, 0, 0, 554, 555, 1, 0, 0, 0, 555, 556, 1, 0, 0, 0, 556, 592, 3, 256,
		128, 0, 557, 558, 5, 3, 0, 0, 558, 563, 3, 46, 23, 0, 559, 560, 5, 5, 0,
		0, 560, 562, 3, 46, 23, 0, 561, 559, 1, 0, 0, 0, 562, 565, 1, 0, 0, 0,
		563, 564, 1, 0, 0, 0, 563, 561, 1, 0, 0, 0, 564, 570, 1, 0, 0, 0, 565,
		563, 1, 0, 0, 0, 566, 567, 5, 5, 0, 0, 567, 569, 3, 58, 29, 0, 568, 566,
		1, 0, 0, 0, 569, 572, 1, 0, 0, 0, 570, 568, 1, 0, 0, 0, 570, 571, 1, 0,
		0, 0, 571, 573, 1, 0, 0, 0, 572, 570, 1, 0, 0, 0, 573, 588, 5, 4, 0, 0,
		574, 575, 5, 156, 0, 0, 575, 589, 5, 191, 0, 0, 576, 577, 5, 155, 0, 0,
		577, 578, 5, 3, 0, 0, 578, 583, 3, 48, 24, 0, 579, 580, 5, 5, 0, 0, 580,
		582, 3, 46, 23, 0, 581, 579, 1, 0, 0, 0, 582, 585, 1, 0, 0, 0, 583, 584,
		1, 0, 0, 0, 583, 581, 1, 0, 0, 0, 584, 586, 1, 0, 0, 0, 585, 583, 1, 0,
		0, 0, 586, 587, 5, 4, 0, 0, 587, 589, 1, 0, 0, 0, 588, 574, 1, 0, 0, 0,
		588, 576, 1, 0, 0, 0, 588, 589, 1, 0, 0, 0, 589, 593, 1, 0, 0, 0, 590,
		591, 5, 33, 0, 0, 591, 593, 3, 144, 72, 0, 592, 557, 1, 0, 0, 0, 592, 590,
		1, 0, 0, 0, 593, 45, 1, 0, 0, 0, 594, 596, 3, 260, 130, 0, 595, 597, 3,
		50, 25, 0, 596, 595, 1, 0, 0, 0, 596, 597, 1, 0, 0, 0, 597, 601, 1, 0,
		0, 0, 598, 600, 3, 52, 26, 0, 599, 598, 1, 0, 0, 0, 600, 603, 1, 0, 0,
		0, 601, 599, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 47, 1, 0, 0, 0, 603,
		601, 1, 0, 0, 0, 604, 605, 5, 191, 0, 0, 605, 606, 5, 6, 0, 0, 606, 607,
		3, 112, 56, 0, 607, 49, 1, 0, 0, 0, 608, 610, 3, 248, 124, 0, 609, 608,
		1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 611, 609, 1, 0,
		0, 0, 612, 623, 1, 0, 0, 0, 613, 614, 5, 3, 0, 0, 614, 615, 3, 56, 28,
		0, 615, 616, 5, 4, 0, 0, 616, 624, 1, 0, 0, 0, 617, 618, 5, 3, 0, 0, 618,
		619, 3, 56, 28, 0, 619, 620, 5, 5, 0, 0, 620, 621, 3, 56, 28, 0, 621, 622,
		5, 4, 0, 0, 622, 624, 1, 0, 0, 0, 623, 613, 1, 0, 0, 0, 623, 617, 1, 0,
		0, 0, 623, 624, 1, 0, 0, 0, 624, 51, 1, 0, 0, 0, 625, 626, 5, 50, 0, 0,
		626, 628, 3, 248, 124, 0, 627, 625, 1, 0, 0, 0, 627, 628, 1, 0, 0, 0, 628,
		668, 1, 0, 0, 0, 629, 669, 3, 54, 27, 0, 630, 632, 5, 106, 0, 0, 631, 630,
		1, 0, 0, 0, 631, 632, 1, 0, 0, 0, 632, 633, 1, 0, 0, 0, 633, 636, 5, 108,
		0, 0, 634, 636, 5, 146, 0, 0, 635, 631, 1, 0, 0, 0, 635, 634, 1, 0, 0,
		0, 636, 638, 1, 0, 0, 0, 637, 639, 3, 66, 33, 0, 638, 637, 1, 0, 0, 0,
		638, 639, 1, 0, 0, 0, 639, 669, 1, 0, 0, 0, 640, 641, 5, 45, 0, 0, 641,
		642, 5, 3, 0, 0, 642, 643, 3, 112, 56, 0, 643, 644, 5, 4, 0, 0, 644, 669,
		1, 0, 0, 0, 645, 652, 5, 59, 0, 0, 646, 653, 3, 56, 28, 0, 647, 653, 3,
		122, 61, 0, 648, 649, 5, 3, 0, 0, 649, 650, 3, 112, 56, 0, 650, 651, 5,
		4, 0, 0, 651, 653, 1, 0, 0, 0, 652, 646, 1, 0, 0, 0, 652, 647, 1, 0, 0,
		0, 652, 648, 1, 0, 0, 0, 653, 669, 1, 0, 0, 0, 654, 655, 5, 46, 0, 0, 655,
		669, 3, 262, 131, 0, 656, 669, 3, 64, 32, 0, 657, 658, 5, 175, 0, 0, 658,
		660, 5, 176, 0, 0, 659, 657, 1, 0, 0, 0, 659, 660, 1, 0, 0, 0, 660, 661,
		1, 0, 0, 0, 661, 662, 5, 33, 0, 0, 662, 663, 5, 3, 0, 0, 663, 664, 3, 112,
		56, 0, 664, 666, 5, 4, 0, 0, 665, 667, 7, 3, 0, 0, 666, 665, 1, 0, 0, 0,
		666, 667, 1, 0, 0, 0, 667, 669, 1, 0, 0, 0, 668, 629, 1, 0, 0, 0, 668,
		635, 1, 0, 0, 0, 668, 640, 1, 0, 0, 0, 668, 645, 1, 0, 0, 0, 668, 654,
		1, 0, 0, 0, 668, 656, 1, 0, 0, 0, 668, 659, 1, 0, 0, 0, 669, 53, 1, 0,
		0, 0, 670, 671, 5, 117, 0, 0, 671, 673, 5, 99, 0, 0, 672, 674, 3, 212,
		106, 0, 673, 672, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674, 676, 1, 0, 0,
		0, 675, 677, 3, 66, 33, 0, 676, 675, 1, 0, 0, 0, 676, 677, 1, 0, 0, 0,
		677, 679, 1, 0, 0, 0, 678, 680, 5, 36, 0, 0, 679, 678, 1, 0, 0, 0, 679,
		680, 1, 0, 0, 0, 680, 55, 1, 0, 0, 0, 681, 683, 7, 4, 0, 0, 682, 681, 1,
		0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 684, 1, 0, 0, 0, 684, 685, 5, 192,
		0, 0, 685, 57, 1, 0, 0, 0, 686, 687, 5, 50, 0, 0, 687, 689, 3, 248, 124,
		0, 688, 686, 1, 0, 0, 0, 688, 689, 1, 0, 0, 0, 689, 711, 1, 0, 0, 0, 690,
		712, 3, 60, 30, 0, 691, 712, 3, 62, 31, 0, 692, 693, 5, 45, 0, 0, 693,
		694, 5, 3, 0, 0, 694, 695, 3, 112, 56, 0, 695, 696, 5, 4, 0, 0, 696, 712,
		1, 0, 0, 0, 697, 698, 5, 77, 0, 0, 698, 699, 5, 99, 0, 0, 699, 700, 5,
		3, 0, 0, 700, 705, 3, 260, 130, 0, 701, 702, 5, 5, 0, 0, 702, 704, 3, 260,
		130, 0, 703, 701, 1, 0, 0, 0, 704, 707, 1, 0, 0, 0, 705, 703, 1, 0, 0,
		0, 705, 706, 1, 0, 0, 0, 706, 708, 1, 0, 0, 0, 707, 705, 1, 0, 0, 0, 708,
		709, 5, 4, 0, 0, 709, 710, 3, 64, 32, 0, 710, 712, 1, 0, 0, 0, 711, 690,
		1, 0, 0, 0, 711, 691, 1, 0, 0, 0, 711, 692, 1, 0, 0, 0, 711, 697, 1, 0,
		0, 0, 712, 59, 1, 0, 0, 0, 713, 714, 5, 117, 0, 0, 714, 715, 5, 99, 0,
		0, 715, 716, 5, 3, 0, 0, 716, 721, 3, 38, 19, 0, 717, 718, 5, 5, 0, 0,
		718, 720, 3, 38, 19, 0, 719, 717, 1, 0, 0, 0, 720, 723, 1, 0, 0, 0, 721,
		719, 1, 0, 0, 0, 721, 722, 1, 0, 0, 0, 722, 724, 1, 0, 0, 0, 723, 721,
		1, 0, 0, 0, 724, 726, 5, 4, 0, 0, 725, 727, 3, 66, 33, 0, 726, 725, 1,
		0, 0, 0, 726, 727, 1, 0, 0, 0, 727, 61, 1, 0, 0, 0, 728, 729, 5, 146, 0,
		0, 729, 730, 5, 3, 0, 0, 730, 735, 3, 38, 19, 0, 731, 732, 5, 5, 0, 0,
		732, 734, 3, 38, 19, 0, 733, 731, 1, 0, 0, 0, 734, 737, 1, 0, 0, 0, 735,
		733, 1, 0, 0, 0, 735, 736, 1, 0, 0, 0, 736, 738, 1, 0, 0, 0, 737, 735,
		1, 0, 0, 0, 738, 740, 5, 4, 0, 0, 739, 741, 3, 66, 33, 0, 740, 739, 1,
		0, 0, 0, 740, 741, 1, 0, 0, 0, 741, 63, 1, 0, 0, 0, 742, 743, 5, 121, 0,
		0, 743, 755, 3, 264, 132, 0, 744, 745, 5, 3, 0, 0, 745, 750, 3, 260, 130,
		0, 746, 747, 5, 5, 0, 0, 747, 749, 3, 260, 130, 0, 748, 746, 1, 0, 0, 0,
		749, 752, 1, 0, 0, 0, 750, 748, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751,
		753, 1, 0, 0, 0, 752, 750, 1, 0, 0, 0, 753, 754, 5, 4, 0, 0, 754, 756,
		1, 0, 0, 0, 755, 744, 1, 0, 0, 0, 755, 756, 1, 0, 0, 0, 756, 771, 1, 0,
		0, 0, 757, 758, 5, 111, 0, 0, 758, 765, 7, 5, 0, 0, 759, 760, 5, 135, 0,
		0, 760, 766, 7, 6, 0, 0, 761, 766, 5, 42, 0, 0, 762, 766, 5, 127, 0, 0,
		763, 764, 5, 105, 0, 0, 764, 766, 5, 26, 0, 0, 765, 759, 1, 0, 0, 0, 765,
		761, 1, 0, 0, 0, 765, 762, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 766, 770,
		1, 0, 0, 0, 767, 768, 5, 103, 0, 0, 768, 770, 3, 248, 124, 0, 769, 757,
		1, 0, 0, 0, 769, 767, 1, 0, 0, 0, 770, 773, 1, 0, 0, 0, 771, 769, 1, 0,
		0, 0, 771, 772, 1, 0, 0, 0, 772, 782, 1, 0, 0, 0, 773, 771, 1, 0, 0, 0,
		774, 776, 5, 106, 0, 0, 775, 774, 1, 0, 0, 0, 775, 776, 1, 0, 0, 0, 776,
		777, 1, 0, 0, 0, 777, 780, 5, 60, 0, 0, 778, 779, 5, 90, 0, 0, 779, 781,
		7, 7, 0, 0, 780, 778, 1, 0, 0, 0, 780, 781, 1, 0, 0, 0, 781, 783, 1, 0,
		0, 0, 782, 775, 1, 0, 0, 0, 782, 783, 1, 0, 0, 0, 783, 65, 1, 0, 0, 0,
		784, 785, 5, 111, 0, 0, 785, 786, 5, 49, 0, 0, 786, 787, 7, 8, 0, 0, 787,
		67, 1, 0, 0, 0, 788, 790, 5, 52, 0, 0, 789, 791, 7, 2, 0, 0, 790, 789,
		1, 0, 0, 0, 790, 791, 1, 0, 0, 0, 791, 792, 1, 0, 0, 0, 792, 794, 5, 143,
		0, 0, 793, 795, 3, 42, 21, 0, 794, 793, 1, 0, 0, 0, 794, 795, 1, 0, 0,
		0, 795, 799, 1, 0, 0, 0, 796, 797, 3, 254, 127, 0, 797, 798, 5, 2, 0, 0,
		798, 800, 1, 0, 0, 0, 799, 796, 1, 0, 0, 0, 799, 800, 1, 0, 0, 0, 800,
		801, 1, 0, 0, 0, 801, 806, 3, 268, 134, 0, 802, 807, 5, 38, 0, 0, 803,
		807, 5, 28, 0, 0, 804, 805, 5, 93, 0, 0, 805, 807, 5, 109, 0, 0, 806, 802,
		1, 0, 0, 0, 806, 803, 1, 0, 0, 0, 806, 804, 1, 0, 0, 0, 806, 807, 1, 0,
		0, 0, 807, 822, 1, 0, 0, 0, 808, 823, 5, 62, 0, 0, 809, 823, 5, 92, 0,
		0, 810, 820, 5, 147, 0, 0, 811, 812, 5, 109, 0, 0, 812, 817, 3, 260, 130,
		0, 813, 814, 5, 5, 0, 0, 814, 816, 3, 260, 130, 0, 815, 813, 1, 0, 0, 0,
		816, 819, 1, 0, 0, 0, 817, 815, 1, 0, 0, 0, 817, 818, 1, 0, 0, 0, 818,
		821, 1, 0, 0, 0, 819, 817, 1, 0, 0, 0, 820, 811, 1, 0, 0, 0, 820, 821,
		1, 0, 0, 0, 821, 823, 1, 0, 0, 0, 822, 808, 1, 0, 0, 0, 822, 809, 1, 0,
		0, 0, 822, 810, 1, 0, 0, 0, 823, 824, 1, 0, 0, 0, 824, 825, 5, 111, 0,
		0, 825, 829, 3, 256, 128, 0, 826, 827, 5, 76, 0, 0, 827, 828, 5, 67, 0,
		0, 828, 830, 5, 131, 0, 0, 829, 826, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0,
		830, 833, 1, 0, 0, 0, 831, 832, 5, 153, 0, 0, 832, 834, 3, 112, 56, 0,
		833, 831, 1, 0, 0, 0, 833, 834, 1, 0, 0, 0, 834, 835, 1, 0, 0, 0, 835,
		844, 5, 39, 0, 0, 836, 841, 3, 176, 88, 0, 837, 841, 3, 132, 66, 0, 838,
		841, 3, 82, 41, 0, 839, 841, 3, 144, 72, 0, 840, 836, 1, 0, 0, 0, 840,
		837, 1, 0, 0, 0, 840, 838, 1, 0, 0, 0, 840, 839, 1, 0, 0, 0, 841, 842,
		1, 0, 0, 0, 842, 843, 5, 1, 0, 0, 843, 845, 1, 0, 0, 0, 844, 840, 1, 0,
		0, 0, 845, 846, 1, 0, 0, 0, 846, 844, 1, 0, 0, 0, 846, 847, 1, 0, 0, 0,
		847, 848, 1, 0, 0, 0, 848, 849, 5, 69, 0, 0, 849, 69, 1, 0, 0, 0, 850,
		852, 5, 52, 0, 0, 851, 853, 7, 2, 0, 0, 852, 851, 1, 0, 0, 0, 852, 853,
		1, 0, 0, 0, 853, 854, 1, 0, 0, 0, 854, 856, 5, 151, 0, 0, 855, 857, 3,
		42, 21, 0, 856, 855, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 861, 1, 0,
		0, 0, 858, 859, 3, 254, 127, 0, 859, 860, 5, 2, 0, 0, 860, 862, 1, 0, 0,
		0, 861, 858, 1, 0, 0, 0, 861, 862, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863,
		875, 3, 270, 135, 0, 864, 865, 5, 3, 0, 0, 865, 870, 3, 260, 130, 0, 866,
		867, 5, 5, 0, 0, 867, 869, 3, 260, 130, 0, 868, 866, 1, 0, 0, 0, 869, 872,
		1, 0, 0, 0, 870, 868, 1, 0, 0, 0, 870, 871, 1, 0, 0, 0, 871, 873, 1, 0,
		0, 0, 872, 870, 1, 0, 0, 0, 873, 874, 5, 4, 0, 0, 874, 876, 1, 0, 0, 0,
		875, 864, 1, 0, 0, 0, 875, 876, 1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877,
		878, 5, 33, 0, 0, 878, 879, 3, 144, 72, 0, 879, 71, 1, 0, 0, 0, 880, 881,
		5, 52, 0, 0, 881, 882, 5, 152, 0, 0, 882, 884, 5, 136, 0, 0, 883, 885,
		3, 42, 21, 0, 884, 883, 1, 0, 0, 0, 884, 885, 1, 0, 0, 0, 885, 889, 1,
		0, 0, 0, 886, 887, 3, 254, 127, 0, 887, 888, 5, 2, 0, 0, 888, 890, 1, 0,
		0, 0, 889, 886, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 891, 1, 0, 0, 0,
		891, 892, 3, 256, 128, 0, 892, 893, 5, 148, 0, 0, 893, 905, 3, 272, 136,
		0, 894, 895, 5, 3, 0, 0, 895, 900, 3, 242, 121, 0, 896, 897, 5, 5, 0, 0,
		897, 899, 3, 242, 121, 0, 898, 896, 1, 0, 0, 0, 899, 902, 1, 0, 0, 0, 900,
		898, 1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 903, 1, 0, 0, 0, 902, 900,
		1, 0, 0, 0, 903, 904, 5, 4, 0, 0, 904, 906, 1, 0, 0, 0, 905, 894, 1, 0,
		0, 0, 905, 906, 1, 0, 0, 0, 906, 73, 1, 0, 0, 0, 907, 909, 5, 155, 0, 0,
		908, 910, 5, 120, 0, 0, 909, 908, 1, 0, 0, 0, 909, 910, 1, 0, 0, 0, 910,
		911, 1, 0, 0, 0, 911, 912, 3, 76, 38, 0, 912, 913, 5, 33, 0, 0, 913, 914,
		5, 3, 0, 0, 914, 915, 3, 144, 72, 0, 915, 925, 5, 4, 0, 0, 916, 917, 5,
		5, 0, 0, 917, 918, 3, 76, 38, 0, 918, 919, 5, 33, 0, 0, 919, 920, 5, 3,
		0, 0, 920, 921, 3, 144, 72, 0, 921, 922, 5, 4, 0, 0, 922, 924, 1, 0, 0,
		0, 923, 916, 1, 0, 0, 0, 924, 927, 1, 0, 0, 0, 925, 923, 1, 0, 0, 0, 925,
		926, 1, 0, 0, 0, 926, 75, 1, 0, 0, 0, 927, 925, 1, 0, 0, 0, 928, 940, 3,
		256, 128, 0, 929, 930, 5, 3, 0, 0, 930, 935, 3, 260, 130, 0, 931, 932,
		5, 5, 0, 0, 932, 934, 3, 260, 130, 0, 933, 931, 1, 0, 0, 0, 934, 937, 1,
		0, 0, 0, 935, 933, 1, 0, 0, 0, 935, 936, 1, 0, 0, 0, 936, 938, 1, 0, 0,
		0, 937, 935, 1, 0, 0, 0, 938, 939, 5, 4, 0, 0, 939, 941, 1, 0, 0, 0, 940,
		929, 1, 0, 0, 0, 940, 941, 1, 0, 0, 0, 941, 77, 1, 0, 0, 0, 942, 943, 3,
		76, 38, 0, 943, 944, 5, 33, 0, 0, 944, 945, 5, 3, 0, 0, 945, 946, 3, 234,
		117, 0, 946, 948, 5, 145, 0, 0, 947, 949, 5, 29, 0, 0, 948, 947, 1, 0,
		0, 0, 948, 949, 1, 0, 0, 0, 949, 950, 1, 0, 0, 0, 950, 951, 3, 236, 118,
		0, 951, 952, 5, 4, 0, 0, 952, 79, 1, 0, 0, 0, 953, 965, 3, 256, 128, 0,
		954, 955, 5, 3, 0, 0, 955, 960, 3, 260, 130, 0, 956, 957, 5, 5, 0, 0, 957,
		959, 3, 260, 130, 0, 958, 956, 1, 0, 0, 0, 959, 962, 1, 0, 0, 0, 960, 958,
		1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 963, 1, 0, 0, 0, 962, 960, 1, 0,
		0, 0, 963, 964, 5, 4, 0, 0, 964, 966, 1, 0, 0, 0, 965, 954, 1, 0, 0, 0,
		965, 966, 1, 0, 0, 0, 966, 967, 1, 0, 0, 0, 967, 968, 5, 33, 0, 0, 968,
		969, 5, 3, 0, 0, 969, 970, 3, 144, 72, 0, 970, 971, 5, 4, 0, 0, 971, 81,
		1, 0, 0, 0, 972, 974, 3, 74, 37, 0, 973, 972, 1, 0, 0, 0, 973, 974, 1,
		0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 976, 5, 62, 0, 0, 976, 977, 5, 79,
		0, 0, 977, 980, 3, 184, 92, 0, 978, 979, 5, 154, 0, 0, 979, 981, 3, 112,
		56, 0, 980, 978, 1, 0, 0, 0, 980, 981, 1, 0, 0, 0, 981, 983, 1, 0, 0, 0,
		982, 984, 3, 134, 67, 0, 983, 982, 1, 0, 0, 0, 983, 984, 1, 0, 0, 0, 984,
		83, 1, 0, 0, 0, 985, 987, 3, 74, 37, 0, 986, 985, 1, 0, 0, 0, 986, 987,
		1, 0, 0, 0, 987, 988, 1, 0, 0, 0, 988, 989, 5, 62, 0, 0, 989, 990, 5, 79,
		0, 0, 990, 993, 3, 184, 92, 0, 991, 992, 5, 154, 0, 0, 992, 994, 3, 112,
		56, 0, 993, 991, 1, 0, 0, 0, 993, 994, 1, 0, 0, 0, 994, 996, 1, 0, 0, 0,
		995, 997, 3, 134, 67, 0, 996, 995, 1, 0, 0, 0, 996, 997, 1, 0, 0, 0, 997,
		1002, 1, 0, 0, 0, 998, 1000, 3, 206, 103, 0, 999, 998, 1, 0, 0, 0, 999,
		1000, 1, 0, 0, 0, 1000, 1001, 1, 0, 0, 0, 1001, 1003, 3, 208, 104, 0, 1002,
		999, 1, 0, 0, 0, 1002, 1003, 1, 0, 0, 0, 1003, 85, 1, 0, 0, 0, 1004, 1006,
		5, 64, 0, 0, 1005, 1007, 5, 58, 0, 0, 1006, 1005, 1, 0, 0, 0, 1006, 1007,
		1, 0, 0, 0, 1007, 1008, 1, 0, 0, 0, 1008, 1009, 3, 254, 127, 0, 1009, 87,
		1, 0, 0, 0, 1010, 1011, 5, 66, 0, 0, 1011, 1013, 7, 9, 0, 0, 1012, 1014,
		3, 100, 50, 0, 1013, 1012, 1, 0, 0, 0, 1013, 1014, 1, 0, 0, 0, 1014, 1018,
		1, 0, 0, 0, 1015, 1016, 3, 254, 127, 0, 1016, 1017, 5, 2, 0, 0, 1017, 1019,
		1, 0, 0, 0, 1018, 1015, 1, 0, 0, 0, 1018, 1019, 1, 0, 0, 0, 1019, 1020,
		1, 0, 0, 0, 1020, 1021, 3, 296, 148, 0, 1021, 89, 1, 0, 0, 0, 1022, 1023,
		5, 66, 0, 0, 1023, 1025, 5, 58, 0, 0, 1024, 1026, 3, 100, 50, 0, 1025,
		1024, 1, 0, 0, 0, 1025, 1026, 1, 0, 0, 0, 1026, 1027, 1, 0, 0, 0, 1027,
		1028, 3, 250, 125, 0, 1028, 91, 1, 0, 0, 0, 1029, 1030, 5, 66, 0, 0, 1030,
		1032, 5, 88, 0, 0, 1031, 1033, 3, 100, 50, 0, 1032, 1031, 1, 0, 0, 0, 1032,
		1033, 1, 0, 0, 0, 1033, 1037, 1, 0, 0, 0, 1034, 1035, 3, 254, 127, 0, 1035,
		1036, 5, 2, 0, 0, 1036, 1038, 1, 0, 0, 0, 1037, 1034, 1, 0, 0, 0, 1037,
		1038, 1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 1040, 3, 266, 133, 0, 1040,
		93, 1, 0, 0, 0, 1041, 1042, 5, 66, 0, 0, 1042, 1044, 5, 136, 0, 0, 1043,
		1045, 3, 100, 50, 0, 1044, 1043, 1, 0, 0, 0, 1044, 1045, 1, 0, 0, 0, 1045,
		1049, 1, 0, 0, 0, 1046, 1047, 3, 254, 127, 0, 1047, 1048, 5, 2, 0, 0, 1048,
		1050, 1, 0, 0, 0, 1049, 1046, 1, 0, 0, 0, 1049, 1050, 1, 0, 0, 0, 1050,
		1051, 1, 0, 0, 0, 1051, 1056, 3, 256, 128, 0, 1052, 1053, 5, 5, 0, 0, 1053,
		1055, 3, 256, 128, 0, 1054, 1052, 1, 0, 0, 0, 1055, 1058, 1, 0, 0, 0, 1056,
		1054, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 95, 1, 0, 0, 0, 1058, 1056,
		1, 0, 0, 0, 1059, 1060, 5, 66, 0, 0, 1060, 1062, 5, 143, 0, 0, 1061, 1063,
		3, 100, 50, 0, 1062, 1061, 1, 0, 0, 0, 1062, 1063, 1, 0, 0, 0, 1063, 1067,
		1, 0, 0, 0, 1064, 1065, 3, 254, 127, 0, 1065, 1066, 5, 2, 0, 0, 1066, 1068,
		1, 0, 0, 0, 1067, 1064, 1, 0, 0, 0, 1067, 1068, 1, 0, 0, 0, 1068, 1069,
		1, 0, 0, 0, 1069, 1070, 3, 268, 134, 0, 1070, 97, 1, 0, 0, 0, 1071, 1072,
		5, 66, 0, 0, 1072, 1074, 5, 151, 0, 0, 1073, 1075, 3, 100, 50, 0, 1074,
		1073, 1, 0, 0, 0, 1074, 1075, 1, 0, 0, 0, 1075, 1079, 1, 0, 0, 0, 1076,
		1077, 3, 254, 127, 0, 1077, 1078, 5, 2, 0, 0, 1078, 1080, 1, 0, 0, 0, 1079,
		1076, 1, 0, 0, 0, 1079, 1080, 1, 0, 0, 0, 1080, 1081, 1, 0, 0, 0, 1081,
		1082, 3, 270, 135, 0, 1082, 99, 1, 0, 0, 0, 1083, 1084, 5, 84, 0, 0, 1084,
		1085, 5, 73, 0, 0, 1085, 101, 1, 0, 0, 0, 1086, 1087, 5, 51, 0, 0, 1087,
		1089, 3, 184, 92, 0, 1088, 1090, 3, 104, 52, 0, 1089, 1088, 1, 0, 0, 0,
		1089, 1090, 1, 0, 0, 0, 1090, 1091, 1, 0, 0, 0, 1091, 1092, 5, 79, 0, 0,
		1092, 1094, 3, 108, 54, 0, 1093, 1095, 5, 155, 0, 0, 1094, 1093, 1, 0,
		0, 0, 1094, 1095, 1, 0, 0, 0, 1095, 1097, 1, 0, 0, 0, 1096, 1098, 3, 106,
		53, 0, 1097, 1096, 1, 0, 0, 0, 1097, 1098, 1, 0, 0, 0, 1098, 103, 1, 0,
		0, 0, 1099, 1100, 5, 3, 0, 0, 1100, 1105, 3, 260, 130, 0, 1101, 1102, 5,
		5, 0, 0, 1102, 1104, 3, 260, 130, 0, 1103, 1101, 1, 0, 0, 0, 1104, 1107,
		1, 0, 0, 0, 1105, 1103, 1, 0, 0, 0, 1105, 1106, 1, 0, 0, 0, 1106, 1108,
		1, 0, 0, 0, 1107, 1105, 1, 0, 0, 0, 1108, 1109, 5, 4, 0, 0, 1109, 105,
		1, 0, 0, 0, 1110, 1112, 5, 78, 0, 0, 1111, 1110, 1, 0, 0, 0, 1111, 1112,
		1, 0, 0, 0, 1112, 1113, 1, 0, 0, 0, 1113, 1114, 7, 10, 0, 0, 1114, 107,
		1, 0, 0, 0, 1115, 1116, 3, 296, 148, 0, 1116, 109, 1, 0, 0, 0, 1117, 1119,
		5, 144, 0, 0, 1118, 1120, 5, 136, 0, 0, 1119, 1118, 1, 0, 0, 0, 1119, 1120,
		1, 0, 0, 0, 1120, 1121, 1, 0, 0, 0, 1121, 1126, 3, 256, 128, 0, 1122, 1123,
		5, 5, 0, 0, 1123, 1125, 3, 256, 128, 0, 1124, 1122, 1, 0, 0, 0, 1125, 1128,
		1, 0, 0, 0, 1126, 1124, 1, 0, 0, 0, 1126, 1127, 1, 0, 0, 0, 1127, 111,
		1, 0, 0, 0, 1128, 1126, 1, 0, 0, 0, 1129, 1130, 6, 56, -1, 0, 1130, 1198,
		3, 122, 61, 0, 1131, 1198, 3, 118, 59, 0, 1132, 1198, 3, 124, 62, 0, 1133,
		1134, 3, 254, 127, 0, 1134, 1135, 5, 2, 0, 0, 1135, 1137, 1, 0, 0, 0, 1136,
		1133, 1, 0, 0, 0, 1136, 1137, 1, 0, 0, 0, 1137, 1138, 1, 0, 0, 0, 1138,
		1139, 3, 256, 128, 0, 1139, 1140, 5, 2, 0, 0, 1140, 1142, 1, 0, 0, 0, 1141,
		1136, 1, 0, 0, 0, 1141, 1142, 1, 0, 0, 0, 1142, 1143, 1, 0, 0, 0, 1143,
		1198, 3, 260, 130, 0, 1144, 1145, 3, 238, 119, 0, 1145, 1146, 3, 112, 56,
		19, 1146, 1198, 1, 0, 0, 0, 1147, 1198, 3, 116, 58, 0, 1148, 1198, 3, 114,
		57, 0, 1149, 1150, 5, 3, 0, 0, 1150, 1155, 3, 112, 56, 0, 1151, 1152, 5,
		5, 0, 0, 1152, 1154, 3, 112, 56, 0, 1153, 1151, 1, 0, 0, 0, 1154, 1157,
		1, 0, 0, 0, 1155, 1153, 1, 0, 0, 0, 1155, 1156, 1, 0, 0, 0, 1156, 1158,
		1, 0, 0, 0, 1157, 1155, 1, 0, 0, 0, 1158, 1159, 5, 4, 0, 0, 1159, 1198,
		1, 0, 0, 0, 1160, 1161, 5, 44, 0, 0, 1161, 1162, 5, 3, 0, 0, 1162, 1163,
		3, 112, 56, 0, 1163, 1164, 5, 33, 0, 0, 1164, 1165, 3, 50, 25, 0, 1165,
		1166, 5, 4, 0, 0, 1166, 1198, 1, 0, 0, 0, 1167, 1169, 5, 106, 0, 0, 1168,
		1167, 1, 0, 0, 0, 1168, 1169, 1, 0, 0, 0, 1169, 1170, 1, 0, 0, 0, 1170,
		1172, 5, 73, 0, 0, 1171, 1168, 1, 0, 0, 0, 1171, 1172, 1, 0, 0, 0, 1172,
		1173, 1, 0, 0, 0, 1173, 1174, 5, 3, 0, 0, 1174, 1175, 3, 144, 72, 0, 1175,
		1176, 5, 4, 0, 0, 1176, 1198, 1, 0, 0, 0, 1177, 1179, 5, 43, 0, 0, 1178,
		1180, 3, 112, 56, 0, 1179, 1178, 1, 0, 0, 0, 1179, 1180, 1, 0, 0, 0, 1180,
		1186, 1, 0, 0, 0, 1181, 1182, 5, 153, 0, 0, 1182, 1183, 3, 112, 56, 0,
		1183, 1184, 5, 140, 0, 0, 1184, 1185, 3, 112, 56, 0, 1185, 1187, 1, 0,
		0, 0, 1186, 1181, 1, 0, 0, 0, 1187, 1188, 1, 0, 0, 0, 1188, 1186, 1, 0,
		0, 0, 1188, 1189, 1, 0, 0, 0, 1189, 1192, 1, 0, 0, 0, 1190, 1191, 5, 68,
		0, 0, 1191, 1193, 3, 112, 56, 0, 1192, 1190, 1, 0, 0, 0, 1192, 1193, 1,
		0, 0, 0, 1193, 1194, 1, 0, 0, 0, 1194, 1195, 5, 69, 0, 0, 1195, 1198, 1,
		0, 0, 0, 1196, 1198, 3, 120, 60, 0, 1197, 1129, 1, 0, 0, 0, 1197, 1131,
		1, 0, 0, 0, 1197, 1132, 1, 0, 0, 0, 1197, 1141, 1, 0, 0, 0, 1197, 1144,
		1, 0, 0, 0, 1197, 1147, 1, 0, 0, 0, 1197, 1148, 1, 0, 0, 0, 1197, 1149,
		1, 0, 0, 0, 1197, 1160, 1, 0, 0, 0, 1197, 1171, 1, 0, 0, 0, 1197, 1177,
		1, 0, 0, 0, 1197, 1196, 1, 0, 0, 0, 1198, 1306, 1, 0, 0, 0, 1199, 1200,
		10, 18, 0, 0, 1200, 1201, 5, 11, 0, 0, 1201, 1305, 3, 112, 56, 19, 1202,
		1203, 10, 17, 0, 0, 1203, 1204, 7, 11, 0, 0, 1204, 1305, 3, 112, 56, 18,
		1205, 1215, 10, 15, 0, 0, 1206, 1216, 5, 22, 0, 0, 1207, 1216, 5, 96, 0,
		0, 1208, 1209, 5, 96, 0, 0, 1209, 1216, 5, 106, 0, 0, 1210, 1216, 5, 87,
		0, 0, 1211, 1216, 5, 101, 0, 0, 1212, 1216, 5, 81, 0, 0, 1213, 1216, 5,
		103, 0, 0, 1214, 1216, 5, 122, 0, 0, 1215, 1206, 1, 0, 0, 0, 1215, 1207,
		1, 0, 0, 0, 1215, 1208, 1, 0, 0, 0, 1215, 1210, 1, 0, 0, 0, 1215, 1211,
		1, 0, 0, 0, 1215, 1212, 1, 0, 0, 0, 1215, 1213, 1, 0, 0, 0, 1215, 1214,
		1, 0, 0, 0, 1216, 1217, 1, 0, 0, 0, 1217, 1305, 3, 112, 56, 16, 1218, 1219,
		10, 14, 0, 0, 1219, 1220, 5, 32, 0, 0, 1220, 1305, 3, 112, 56, 15, 1221,
		1222, 10, 13, 0, 0, 1222, 1223, 5, 112, 0, 0, 1223, 1305, 3, 112, 56, 14,
		1224, 1225, 10, 6, 0, 0, 1225, 1227, 5, 96, 0, 0, 1226, 1228, 5, 106, 0,
		0, 1227, 1226, 1, 0, 0, 0, 1227, 1228, 1, 0, 0, 0, 1228, 1229, 1, 0, 0,
		0, 1229, 1305, 3, 112, 56, 7, 1230, 1232, 10, 5, 0, 0, 1231, 1233, 5, 106,
		0, 0, 1232, 1231, 1, 0, 0, 0, 1232, 1233, 1, 0, 0, 0, 1233, 1234, 1, 0,
		0, 0, 1234, 1235, 5, 40, 0, 0, 1235, 1236, 3, 112, 56, 0, 1236, 1237, 5,
		32, 0, 0, 1237, 1238, 3, 112, 56, 6, 1238, 1305, 1, 0, 0, 0, 1239, 1240,
		10, 9, 0, 0, 1240, 1241, 5, 46, 0, 0, 1241, 1305, 3, 262, 131, 0, 1242,
		1244, 10, 8, 0, 0, 1243, 1245, 5, 106, 0, 0, 1244, 1243, 1, 0, 0, 0, 1244,
		1245, 1, 0, 0, 0, 1245, 1246, 1, 0, 0, 0, 1246, 1247, 7, 12, 0, 0, 1247,
		1250, 3, 112, 56, 0, 1248, 1249, 5, 70, 0, 0, 1249, 1251, 3, 112, 56, 0,
		1250, 1248, 1, 0, 0, 0, 1250, 1251, 1, 0, 0, 0, 1251, 1305, 1, 0, 0, 0,
		1252, 1257, 10, 7, 0, 0, 1253, 1258, 5, 97, 0, 0, 1254, 1258, 5, 107, 0,
		0, 1255, 1256, 5, 106, 0, 0, 1256, 1258, 5, 108, 0, 0, 1257, 1253, 1, 0,
		0, 0, 1257, 1254, 1, 0, 0, 0, 1257, 1255, 1, 0, 0, 0, 1258, 1305, 1, 0,
		0, 0, 1259, 1261, 10, 4, 0, 0, 1260, 1262, 5, 106, 0, 0, 1261, 1260, 1,
		0, 0, 0, 1261, 1262, 1, 0, 0, 0, 1262, 1263, 1, 0, 0, 0, 1263, 1302, 5,
		87, 0, 0, 1264, 1274, 5, 3, 0, 0, 1265, 1275, 3, 144, 72, 0, 1266, 1271,
		3, 112, 56, 0, 1267, 1268, 5, 5, 0, 0, 1268, 1270, 3, 112, 56, 0, 1269,
		1267, 1, 0, 0, 0, 1270, 1273, 1, 0, 0, 0, 1271, 1269, 1, 0, 0, 0, 1271,
		1272, 1, 0, 0, 0, 1272, 1275, 1, 0, 0, 0, 1273, 1271, 1, 0, 0, 0, 1274,
		1265, 1, 0, 0, 0, 1274, 1266, 1, 0, 0, 0, 1274, 1275, 1, 0, 0, 0, 1275,
		1276, 1, 0, 0, 0, 1276, 1303, 5, 4, 0, 0, 1277, 1278, 3, 254, 127, 0, 1278,
		1279, 5, 2, 0, 0, 1279, 1281, 1, 0, 0, 0, 1280, 1277, 1, 0, 0, 0, 1280,
		1281, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1303, 3, 256, 128, 0, 1283,
		1284, 3, 254, 127, 0, 1284, 1285, 5, 2, 0, 0, 1285, 1287, 1, 0, 0, 0, 1286,
		1283, 1, 0, 0, 0, 1286, 1287, 1, 0, 0, 0, 1287, 1288, 1, 0, 0, 0, 1288,
		1289, 3, 294, 147, 0, 1289, 1298, 5, 3, 0, 0, 1290, 1295, 3, 112, 56, 0,
		1291, 1292, 5, 5, 0, 0, 1292, 1294, 3, 112, 56, 0, 1293, 1291, 1, 0, 0,
		0, 1294, 1297, 1, 0, 0, 0, 1295, 1293, 1, 0, 0, 0, 1295, 1296, 1, 0, 0,
		0, 1296, 1299, 1, 0, 0, 0, 1297, 1295, 1, 0, 0, 0, 1298, 1290, 1, 0, 0,
		0, 1298, 1299, 1, 0, 0, 0, 1299, 1300, 1, 0, 0, 0, 1300, 1301, 5, 4, 0,
		0, 1301, 1303, 1, 0, 0, 0, 1302, 1264, 1, 0, 0, 0, 1302, 1280, 1, 0, 0,
		0, 1302, 1286, 1, 0, 0, 0, 1303, 1305, 1, 0, 0, 0, 1304, 1199, 1, 0, 0,
		0, 1304, 1202, 1, 0, 0, 0, 1304, 1205, 1, 0, 0, 0, 1304, 1218, 1, 0, 0,
		0, 1304, 1221, 1, 0, 0, 0, 1304, 1224, 1, 0, 0, 0, 1304, 1230, 1, 0, 0,
		0, 1304, 1239, 1, 0, 0, 0, 1304, 1242, 1, 0, 0, 0, 1304, 1252, 1, 0, 0,
		0, 1304, 1259, 1, 0, 0, 0, 1305, 1308, 1, 0, 0, 0, 1306, 1304, 1, 0, 0,
		0, 1306, 1307, 1, 0, 0, 0, 1307, 113, 1, 0, 0, 0, 1308, 1306, 1, 0, 0,
		0, 1309, 1310, 3, 252, 126, 0, 1310, 1323, 5, 3, 0, 0, 1311, 1313, 5, 65,
		0, 0, 1312, 1311, 1, 0, 0, 0, 1312, 1313, 1, 0, 0, 0, 1313, 1314, 1, 0,
		0, 0, 1314, 1319, 3, 112, 56, 0, 1315, 1316, 5, 5, 0, 0, 1316, 1318, 3,
		112, 56, 0, 1317, 1315, 1, 0, 0, 0, 1318, 1321, 1, 0, 0, 0, 1319, 1317,
		1, 0, 0, 0, 1319, 1320, 1, 0, 0, 0, 1320, 1324, 1, 0, 0, 0, 1321, 1319,
		1, 0, 0, 0, 1322, 1324, 5, 7, 0, 0, 1323, 1312, 1, 0, 0, 0, 1323, 1322,
		1, 0, 0, 0, 1323, 1324, 1, 0, 0, 0, 1324, 1325, 1, 0, 0, 0, 1325, 1327,
		5, 4, 0, 0, 1326, 1328, 3, 188, 94, 0, 1327, 1326, 1, 0, 0, 0, 1327, 1328,
		1, 0, 0, 0, 1328, 1330, 1, 0, 0, 0, 1329, 1331, 3, 192, 96, 0, 1330, 1329,
		1, 0, 0, 0, 1330, 1331, 1, 0, 0, 0, 1331, 115, 1, 0, 0, 0, 1332, 1333,
		3, 260, 130, 0, 1333, 1334, 7, 13, 0, 0, 1334, 1335, 3, 122, 61, 0, 1335,
		117, 1, 0, 0, 0, 1336, 1337, 3, 260, 130, 0, 1337, 1338, 7, 14, 0, 0, 1338,
		1339, 3, 112, 56, 0, 1339, 119, 1, 0, 0, 0, 1340, 1341, 5, 119, 0, 0, 1341,
		1346, 5, 3, 0, 0, 1342, 1347, 5, 85, 0, 0, 1343, 1344, 7, 15, 0, 0, 1344,
		1345, 5, 5, 0, 0, 1345, 1347, 3, 240, 120, 0, 1346, 1342, 1, 0, 0, 0, 1346,
		1343, 1, 0, 0, 0, 1347, 1348, 1, 0, 0, 0, 1348, 1349, 5, 4, 0, 0, 1349,
		121, 1, 0, 0, 0, 1350, 1360, 3, 56, 28, 0, 1351, 1360, 3, 126, 63, 0, 1352,
		1360, 5, 195, 0, 0, 1353, 1360, 5, 108, 0, 0, 1354, 1360, 5, 178, 0, 0,
		1355, 1360, 5, 179, 0, 0, 1356, 1360, 5, 56, 0, 0, 1357, 1360, 5, 55, 0,
		0, 1358, 1360, 5, 57, 0, 0, 1359, 1350, 1, 0, 0, 0, 1359, 1351, 1, 0, 0,
		0, 1359, 1352, 1, 0, 0, 0, 1359, 1353, 1, 0, 0, 0, 1359, 1354, 1, 0, 0,
		0, 1359, 1355, 1, 0, 0, 0, 1359, 1356, 1, 0, 0, 0, 1359, 1357, 1, 0, 0,
		0, 1359, 1358, 1, 0, 0, 0, 1360, 123, 1, 0, 0, 0, 1361, 1362, 5, 193, 0,
		0, 1362, 125, 1, 0, 0, 0, 1363, 1364, 5, 194, 0, 0, 1364, 127, 1, 0, 0,
		0, 1365, 1366, 5, 3, 0, 0, 1366, 1371, 3, 112, 56, 0, 1367, 1368, 5, 5,
		0, 0, 1368, 1370, 3, 112, 56, 0, 1369, 1367, 1, 0, 0, 0, 1370, 1373, 1,
		0, 0, 0, 1371, 1369, 1, 0, 0, 0, 1371, 1372, 1, 0, 0, 0, 1372, 1374, 1,
		0, 0, 0, 1373, 1371, 1, 0, 0, 0, 1374, 1375, 5, 4, 0, 0, 1375, 129, 1,
		0, 0, 0, 1376, 1377, 5, 150, 0, 0, 1377, 1382, 3, 128, 64, 0, 1378, 1379,
		5, 5, 0, 0, 1379, 1381, 3, 128, 64, 0, 1380, 1378, 1, 0, 0, 0, 1381, 1384,
		1, 0, 0, 0, 1382, 1380, 1, 0, 0, 0, 1382, 1383, 1, 0, 0, 0, 1383, 131,
		1, 0, 0, 0, 1384, 1382, 1, 0, 0, 0, 1385, 1387, 3, 74, 37, 0, 1386, 1385,
		1, 0, 0, 0, 1386, 1387, 1, 0, 0, 0, 1387, 1393, 1, 0, 0, 0, 1388, 1394,
		5, 92, 0, 0, 1389, 1394, 5, 126, 0, 0, 1390, 1391, 5, 92, 0, 0, 1391, 1392,
		5, 112, 0, 0, 1392, 1394, 7, 8, 0, 0, 1393, 1388, 1, 0, 0, 0, 1393, 1389,
		1, 0, 0, 0, 1393, 1390, 1, 0, 0, 0, 1394, 1395, 1, 0, 0, 0, 1395, 1399,
		5, 95, 0, 0, 1396, 1397, 3, 254, 127, 0, 1397, 1398, 5, 2, 0, 0, 1398,
		1400, 1, 0, 0, 0, 1399, 1396, 1, 0, 0, 0, 1399, 1400, 1, 0, 0, 0, 1400,
		1401, 1, 0, 0, 0, 1401, 1404, 3, 256, 128, 0, 1402, 1403, 5, 33, 0, 0,
		1403, 1405, 3, 278, 139, 0, 1404, 1402, 1, 0, 0, 0, 1404, 1405, 1, 0, 0,
		0, 1405, 1417, 1, 0, 0, 0, 1406, 1407, 5, 3, 0, 0, 1407, 1412, 3, 260,
		130, 0, 1408, 1409, 5, 5, 0, 0, 1409, 1411, 3, 260, 130, 0, 1410, 1408,
		1, 0, 0, 0, 1411, 1414, 1, 0, 0, 0, 1412, 1410, 1, 0, 0, 0, 1412, 1413,
		1, 0, 0, 0, 1413, 1415, 1, 0, 0, 0, 1414, 1412, 1, 0, 0, 0, 1415, 1416,
		5, 4, 0, 0, 1416, 1418, 1, 0, 0, 0, 1417, 1406, 1, 0, 0, 0, 1417, 1418,
		1, 0, 0, 0, 1418, 1428, 1, 0, 0, 0, 1419, 1422, 3, 130, 65, 0, 1420, 1422,
		3, 144, 72, 0, 1421, 1419, 1, 0, 0, 0, 1421, 1420, 1, 0, 0, 0, 1422, 1424,
		1, 0, 0, 0, 1423, 1425, 3, 136, 68, 0, 1424, 1423, 1, 0, 0, 0, 1424, 1425,
		1, 0, 0, 0, 1425, 1429, 1, 0, 0, 0, 1426, 1427, 5, 59, 0, 0, 1427, 1429,
		5, 150, 0, 0, 1428, 1421, 1, 0, 0, 0, 1428, 1426, 1, 0, 0, 0, 1429, 1431,
		1, 0, 0, 0, 1430, 1432, 3, 134, 67, 0, 1431, 1430, 1, 0, 0, 0, 1431, 1432,
		1, 0, 0, 0, 1432, 133, 1, 0, 0, 0, 1433, 1434, 5, 128, 0, 0, 1434, 1439,
		3, 168, 84, 0, 1435, 1436, 5, 5, 0, 0, 1436, 1438, 3, 168, 84, 0, 1437,
		1435, 1, 0, 0, 0, 1438, 1441, 1, 0, 0, 0, 1439, 1437, 1, 0, 0, 0, 1439,
		1440, 1, 0, 0, 0, 1440, 135, 1, 0, 0, 0, 1441, 1439, 1, 0, 0, 0, 1442,
		1443, 5, 111, 0, 0, 1443, 1458, 5, 49, 0, 0, 1444, 1445, 5, 3, 0, 0, 1445,
		1450, 3, 38, 19, 0, 1446, 1447, 5, 5, 0, 0, 1447, 1449, 3, 38, 19, 0, 1448,
		1446, 1, 0, 0, 0, 1449, 1452, 1, 0, 0, 0, 1450, 1448, 1, 0, 0, 0, 1450,
		1451, 1, 0, 0, 0, 1451, 1453, 1, 0, 0, 0, 1452, 1450, 1, 0, 0, 0, 1453,
		1456, 5, 4, 0, 0, 1454, 1455, 5, 154, 0, 0, 1455, 1457, 3, 112, 56, 0,
		1456, 1454, 1, 0, 0, 0, 1456, 1457, 1, 0, 0, 0, 1457, 1459, 1, 0, 0, 0,
		1458, 1444, 1, 0, 0, 0, 1458, 1459, 1, 0, 0, 0, 1459, 1460, 1, 0, 0, 0,
		1460, 1487, 5, 189, 0, 0, 1461, 1488, 5, 190, 0, 0, 1462, 1463, 5, 147,
		0, 0, 1463, 1466, 5, 135, 0, 0, 1464, 1467, 3, 260, 130, 0, 1465, 1467,
		3, 180, 90, 0, 1466, 1464, 1, 0, 0, 0, 1466, 1465, 1, 0, 0, 0, 1467, 1468,
		1, 0, 0, 0, 1468, 1469, 5, 6, 0, 0, 1469, 1480, 3, 112, 56, 0, 1470, 1473,
		5, 5, 0, 0, 1471, 1474, 3, 260, 130, 0, 1472, 1474, 3, 180, 90, 0, 1473,
		1471, 1, 0, 0, 0, 1473, 1472, 1, 0, 0, 0, 1474, 1475, 1, 0, 0, 0, 1475,
		1476, 5, 6, 0, 0, 1476, 1477, 3, 112, 56, 0, 1477, 1479, 1, 0, 0, 0, 1478,
		1470, 1, 0, 0, 0, 1479, 1482, 1, 0, 0, 0, 1480, 1478, 1, 0, 0, 0, 1480,
		1481, 1, 0, 0, 0, 1481, 1485, 1, 0, 0, 0, 1482, 1480, 1, 0, 0, 0, 1483,
		1484, 5, 154, 0, 0, 1484, 1486, 3, 112, 56, 0, 1485, 1483, 1, 0, 0, 0,
		1485, 1486, 1, 0, 0, 0, 1486, 1488, 1, 0, 0, 0, 1487, 1461, 1, 0, 0, 0,
		1487, 1462, 1, 0, 0, 0, 1488, 137, 1, 0, 0, 0, 1489, 1493, 5, 116, 0, 0,
		1490, 1491, 3, 254, 127, 0, 1491, 1492, 5, 2, 0, 0, 1492, 1494, 1, 0, 0,
		0, 1493, 1490, 1, 0, 0, 0, 1493, 1494, 1, 0, 0, 0, 1494, 1495, 1, 0, 0,
		0, 1495, 1502, 3, 274, 137, 0, 1496, 1497, 5, 6, 0, 0, 1497, 1503, 3, 140,
		70, 0, 1498, 1499, 5, 3, 0, 0, 1499, 1500, 3, 140, 70, 0, 1500, 1501, 5,
		4, 0, 0, 1501, 1503, 1, 0, 0, 0, 1502, 1496, 1, 0, 0, 0, 1502, 1498, 1,
		0, 0, 0, 1502, 1503, 1, 0, 0, 0, 1503, 139, 1, 0, 0, 0, 1504, 1508, 3,
		56, 28, 0, 1505, 1508, 3, 248, 124, 0, 1506, 1508, 5, 194, 0, 0, 1507,
		1504, 1, 0, 0, 0, 1507, 1505, 1, 0, 0, 0, 1507, 1506, 1, 0, 0, 0, 1508,
		141, 1, 0, 0, 0, 1509, 1520, 5, 123, 0, 0, 1510, 1521, 3, 262, 131, 0,
		1511, 1512, 3, 254, 127, 0, 1512, 1513, 5, 2, 0, 0, 1513, 1515, 1, 0, 0,
		0, 1514, 1511, 1, 0, 0, 0, 1514, 1515, 1, 0, 0, 0, 1515, 1518, 1, 0, 0,
		0, 1516, 1519, 3, 256, 128, 0, 1517, 1519, 3, 266, 133, 0, 1518, 1516,
		1, 0, 0, 0, 1518, 1517, 1, 0, 0, 0, 1519, 1521, 1, 0, 0, 0, 1520, 1510,
		1, 0, 0, 0, 1520, 1514, 1, 0, 0, 0, 1520, 1521, 1, 0, 0, 0, 1521, 143,
		1, 0, 0, 0, 1522, 1524, 3, 204, 102, 0, 1523, 1522, 1, 0, 0, 0, 1523, 1524,
		1, 0, 0, 0, 1524, 1525, 1, 0, 0, 0, 1525, 1531, 3, 148, 74, 0, 1526, 1527,
		3, 174, 87, 0, 1527, 1528, 3, 148, 74, 0, 1528, 1530, 1, 0, 0, 0, 1529,
		1526, 1, 0, 0, 0, 1530, 1533, 1, 0, 0, 0, 1531, 1529, 1, 0, 0, 0, 1531,
		1532, 1, 0, 0, 0, 1532, 1535, 1, 0, 0, 0, 1533, 1531, 1, 0, 0, 0, 1534,
		1536, 3, 206, 103, 0, 1535, 1534, 1, 0, 0, 0, 1535, 1536, 1, 0, 0, 0, 1536,
		1538, 1, 0, 0, 0, 1537, 1539, 3, 208, 104, 0, 1538, 1537, 1, 0, 0, 0, 1538,
		1539, 1, 0, 0, 0, 1539, 145, 1, 0, 0, 0, 1540, 1548, 3, 166, 83, 0, 1541,
		1542, 3, 170, 85, 0, 1542, 1544, 3, 166, 83, 0, 1543, 1545, 3, 172, 86,
		0, 1544, 1543, 1, 0, 0, 0, 1544, 1545, 1, 0, 0, 0, 1545, 1547, 1, 0, 0,
		0, 1546, 1541, 1, 0, 0, 0, 1547, 1550, 1, 0, 0, 0, 1548, 1546, 1, 0, 0,
		0, 1548, 1549, 1, 0, 0, 0, 1549, 147, 1, 0, 0, 0, 1550, 1548, 1, 0, 0,
		0, 1551, 1553, 5, 134, 0, 0, 1552, 1554, 7, 16, 0, 0, 1553, 1552, 1, 0,
		0, 0, 1553, 1554, 1, 0, 0, 0, 1554, 1555, 1, 0, 0, 0, 1555, 1560, 3, 168,
		84, 0, 1556, 1557, 5, 5, 0, 0, 1557, 1559, 3, 168, 84, 0, 1558, 1556, 1,
		0, 0, 0, 1559, 1562, 1, 0, 0, 0, 1560, 1558, 1, 0, 0, 0, 1560, 1561, 1,
		0, 0, 0, 1561, 1575, 1, 0, 0, 0, 1562, 1560, 1, 0, 0, 0, 1563, 1573, 5,
		79, 0, 0, 1564, 1569, 3, 156, 78, 0, 1565, 1566, 5, 5, 0, 0, 1566, 1568,
		3, 156, 78, 0, 1567, 1565, 1, 0, 0, 0, 1568, 1571, 1, 0, 0, 0, 1569, 1567,
		1, 0, 0, 0, 1569, 1570, 1, 0, 0, 0, 1570, 1574, 1, 0, 0, 0, 1571, 1569,
		1, 0, 0, 0, 1572, 1574, 3, 146, 73, 0, 1573, 1564, 1, 0, 0, 0, 1573, 1572,
		1, 0, 0, 0, 1574, 1576, 1, 0, 0, 0, 1575, 1563, 1, 0, 0, 0, 1575, 1576,
		1, 0, 0, 0, 1576, 1579, 1, 0, 0, 0, 1577, 1578, 5, 154, 0, 0, 1578, 1580,
		3, 112, 56, 0, 1579, 1577, 1, 0, 0, 0, 1579, 1580, 1, 0, 0, 0, 1580, 1595,
		1, 0, 0, 0, 1581, 1582, 5, 82, 0, 0, 1582, 1583, 5, 41, 0, 0, 1583, 1588,
		3, 112, 56, 0, 1584, 1585, 5, 5, 0, 0, 1585, 1587, 3, 112, 56, 0, 1586,
		1584, 1, 0, 0, 0, 1587, 1590, 1, 0, 0, 0, 1588, 1586, 1, 0, 0, 0, 1588,
		1589, 1, 0, 0, 0, 1589, 1593, 1, 0, 0, 0, 1590, 1588, 1, 0, 0, 0, 1591,
		1592, 5, 83, 0, 0, 1592, 1594, 3, 112, 56, 0, 1593, 1591, 1, 0, 0, 0, 1593,
		1594, 1, 0, 0, 0, 1594, 1596, 1, 0, 0, 0, 1595, 1581, 1, 0, 0, 0, 1595,
		1596, 1, 0, 0, 0, 1596, 1611, 1, 0, 0, 0, 1597, 1598, 5, 180, 0, 0, 1598,
		1599, 3, 282, 141, 0, 1599, 1600, 5, 33, 0, 0, 1600, 1608, 3, 190, 95,
		0, 1601, 1602, 5, 5, 0, 0, 1602, 1603, 3, 282, 141, 0, 1603, 1604, 5, 33,
		0, 0, 1604, 1605, 3, 190, 95, 0, 1605, 1607, 1, 0, 0, 0, 1606, 1601, 1,
		0, 0, 0, 1607, 1610, 1, 0, 0, 0, 1608, 1606, 1, 0, 0, 0, 1608, 1609, 1,
		0, 0, 0, 1609, 1612, 1, 0, 0, 0, 1610, 1608, 1, 0, 0, 0, 1611, 1597, 1,
		0, 0, 0, 1611, 1612, 1, 0, 0, 0, 1612, 1615, 1, 0, 0, 0, 1613, 1615, 3,
		130, 65, 0, 1614, 1551, 1, 0, 0, 0, 1614, 1613, 1, 0, 0, 0, 1615, 149,
		1, 0, 0, 0, 1616, 1617, 3, 144, 72, 0, 1617, 151, 1, 0, 0, 0, 1618, 1620,
		3, 204, 102, 0, 1619, 1618, 1, 0, 0, 0, 1619, 1620, 1, 0, 0, 0, 1620, 1621,
		1, 0, 0, 0, 1621, 1623, 3, 148, 74, 0, 1622, 1624, 3, 206, 103, 0, 1623,
		1622, 1, 0, 0, 0, 1623, 1624, 1, 0, 0, 0, 1624, 1626, 1, 0, 0, 0, 1625,
		1627, 3, 208, 104, 0, 1626, 1625, 1, 0, 0, 0, 1626, 1627, 1, 0, 0, 0, 1627,
		153, 1, 0, 0, 0, 1628, 1630, 3, 204, 102, 0, 1629, 1628, 1, 0, 0, 0, 1629,
		1630, 1, 0, 0, 0, 1630, 1631, 1, 0, 0, 0, 1631, 1641, 3, 148, 74, 0, 1632,
		1634, 5, 145, 0, 0, 1633, 1635, 5, 29, 0, 0, 1634, 1633, 1, 0, 0, 0, 1634,
		1635, 1, 0, 0, 0, 1635, 1639, 1, 0, 0, 0, 1636, 1639, 5, 94, 0, 0, 1637,
		1639, 5, 71, 0, 0, 1638, 1632, 1, 0, 0, 0, 1638, 1636, 1, 0, 0, 0, 1638,
		1637, 1, 0, 0, 0, 1639, 1640, 1, 0, 0, 0, 1640, 1642, 3, 148, 74, 0, 1641,
		1638, 1, 0, 0, 0, 1642, 1643, 1, 0, 0, 0, 1643, 1641, 1, 0, 0, 0, 1643,
		1644, 1, 0, 0, 0, 1644, 1646, 1, 0, 0, 0, 1645, 1647, 3, 206, 103, 0, 1646,
		1645, 1, 0, 0, 0, 1646, 1647, 1, 0, 0, 0, 1647, 1649, 1, 0, 0, 0, 1648,
		1650, 3, 208, 104, 0, 1649, 1648, 1, 0, 0, 0, 1649, 1650, 1, 0, 0, 0, 1650,
		155, 1, 0, 0, 0, 1651, 1656, 3, 158, 79, 0, 1652, 1656, 3, 160, 80, 0,
		1653, 1656, 3, 164, 82, 0, 1654, 1656, 3, 162, 81, 0, 1655, 1651, 1, 0,
		0, 0, 1655, 1652, 1, 0, 0, 0, 1655, 1653, 1, 0, 0, 0, 1655, 1654, 1, 0,
		0, 0, 1656, 157, 1, 0, 0, 0, 1657, 1658, 3, 254, 127, 0, 1658, 1659, 5,
		2, 0, 0, 1659, 1661, 1, 0, 0, 0, 1660, 1657, 1, 0, 0, 0, 1660, 1661, 1,
		0, 0, 0, 1661, 1662, 1, 0, 0, 0, 1662, 1667, 3, 256, 128, 0, 1663, 1665,
		5, 33, 0, 0, 1664, 1663, 1, 0, 0, 0, 1664, 1665, 1, 0, 0, 0, 1665, 1666,
		1, 0, 0, 0, 1666, 1668, 3, 278, 139, 0, 1667, 1664, 1, 0, 0, 0, 1667, 1668,
		1, 0, 0, 0, 1668, 1674, 1, 0, 0, 0, 1669, 1670, 5, 89, 0, 0, 1670, 1671,
		5, 41, 0, 0, 1671, 1675, 3, 266, 133, 0, 1672, 1673, 5, 106, 0, 0, 1673,
		1675, 5, 89, 0, 0, 1674, 1669, 1, 0, 0, 0, 1674, 1672, 1, 0, 0, 0, 1674,
		1675, 1, 0, 0, 0, 1675, 159, 1, 0, 0, 0, 1676, 1677, 3, 254, 127, 0, 1677,
		1678, 5, 2, 0, 0, 1678, 1680, 1, 0, 0, 0, 1679, 1676, 1, 0, 0, 0, 1679,
		1680, 1, 0, 0, 0, 1680, 1681, 1, 0, 0, 0, 1681, 1682, 3, 294, 147, 0, 1682,
		1683, 5, 3, 0, 0, 1683, 1688, 3, 112, 56, 0, 1684, 1685, 5, 5, 0, 0, 1685,
		1687, 3, 112, 56, 0, 1686, 1684, 1, 0, 0, 0, 1687, 1690, 1, 0, 0, 0, 1688,
		1686, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0, 1689, 1691, 1, 0, 0, 0, 1690,
		1688, 1, 0, 0, 0, 1691, 1696, 5, 4, 0, 0, 1692, 1694, 5, 33, 0, 0, 1693,
		1692, 1, 0, 0, 0, 1693, 1694, 1, 0, 0, 0, 1694, 1695, 1, 0, 0, 0, 1695,
		1697, 3, 278, 139, 0, 1696, 1693, 1, 0, 0, 0, 1696, 1697, 1, 0, 0, 0, 1697,
		161, 1, 0, 0, 0, 1698, 1708, 5, 3, 0, 0, 1699, 1704, 3, 166, 83, 0, 1700,
		1701, 5, 5, 0, 0, 1701, 1703, 3, 166, 83, 0, 1702, 1700, 1, 0, 0, 0, 1703,
		1706, 1, 0, 0, 0, 1704, 1702, 1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705,
		1709, 1, 0, 0, 0, 1706, 1704, 1, 0, 0, 0, 1707, 1709, 3, 146, 73, 0, 1708,
		1699, 1, 0, 0, 0, 1708, 1707, 1, 0, 0, 0, 1709, 1710, 1, 0, 0, 0, 1710,
		1711, 5, 4, 0, 0, 1711, 163, 1, 0, 0, 0, 1712, 1713, 5, 3, 0, 0, 1713,
		1714, 3, 144, 72, 0, 1714, 1719, 5, 4, 0, 0, 1715, 1717, 5, 33, 0, 0, 1716,
		1715, 1, 0, 0, 0, 1716, 1717, 1, 0, 0, 0, 1717, 1718, 1, 0, 0, 0, 1718,
		1720, 3, 278, 139, 0, 1719, 1716, 1, 0, 0, 0, 1719, 1720, 1, 0, 0, 0, 1720,
		165, 1, 0, 0, 0, 1721, 1722, 3, 254, 127, 0, 1722, 1723, 5, 2, 0, 0, 1723,
		1725, 1, 0, 0, 0, 1724, 1721, 1, 0, 0, 0, 1724, 1725, 1, 0, 0, 0, 1725,
		1726, 1, 0, 0, 0, 1726, 1731, 3, 256, 128, 0, 1727, 1729, 5, 33, 0, 0,
		1728, 1727, 1, 0, 0, 0, 1728, 1729, 1, 0, 0, 0, 1729, 1730, 1, 0, 0, 0,
		1730, 1732, 3, 278, 139, 0, 1731, 1728, 1, 0, 0, 0, 1731, 1732, 1, 0, 0,
		0, 1732, 1738, 1, 0, 0, 0, 1733, 1734, 5, 89, 0, 0, 1734, 1735, 5, 41,
		0, 0, 1735, 1739, 3, 266, 133, 0, 1736, 1737, 5, 106, 0, 0, 1737, 1739,
		5, 89, 0, 0, 1738, 1733, 1, 0, 0, 0, 1738, 1736, 1, 0, 0, 0, 1738, 1739,
		1, 0, 0, 0, 1739, 1786, 1, 0, 0, 0, 1740, 1741, 3, 254, 127, 0, 1741, 1742,
		5, 2, 0, 0, 1742, 1744, 1, 0, 0, 0, 1743, 1740, 1, 0, 0, 0, 1743, 1744,
		1, 0, 0, 0, 1744, 1745, 1, 0, 0, 0, 1745, 1746, 3, 294, 147, 0, 1746, 1747,
		5, 3, 0, 0, 1747, 1752, 3, 112, 56, 0, 1748, 1749, 5, 5, 0, 0, 1749, 1751,
		3, 112, 56, 0, 1750, 1748, 1, 0, 0, 0, 1751, 1754, 1, 0, 0, 0, 1752, 1750,
		1, 0, 0, 0, 1752, 1753, 1, 0, 0, 0, 1753, 1755, 1, 0, 0, 0, 1754, 1752,
		1, 0, 0, 0, 1755, 1760, 5, 4, 0, 0, 1756, 1758, 5, 33, 0, 0, 1757, 1756,
		1, 0, 0, 0, 1757, 1758, 1, 0, 0, 0, 1758, 1759, 1, 0, 0, 0, 1759, 1761,
		3, 278, 139, 0, 1760, 1757, 1, 0, 0, 0, 1760, 1761, 1, 0, 0, 0, 1761, 1786,
		1, 0, 0, 0, 1762, 1772, 5, 3, 0, 0, 1763, 1768, 3, 166, 83, 0, 1764, 1765,
		5, 5, 0, 0, 1765, 1767, 3, 166, 83, 0, 1766, 1764, 1, 0, 0, 0, 1767, 1770,
		1, 0, 0, 0, 1768, 1766, 1, 0, 0, 0, 1768, 1769, 1, 0, 0, 0, 1769, 1773,
		1, 0, 0, 0, 1770, 1768, 1, 0, 0, 0, 1771, 1773, 3, 146, 73, 0, 1772, 1763,
		1, 0, 0, 0, 1772, 1771, 1, 0, 0, 0, 1773, 1774, 1, 0, 0, 0, 1774, 1775,
		5, 4, 0, 0, 1775, 1786, 1, 0, 0, 0, 1776, 1777, 5, 3, 0, 0, 1777, 1778,
		3, 144, 72, 0, 1778, 1783, 5, 4, 0, 0, 1779, 1781, 5, 33, 0, 0, 1780, 1779,
		1, 0, 0, 0, 1780, 1781, 1, 0, 0, 0, 1781, 1782, 1, 0, 0, 0, 1782, 1784,
		3, 278, 139, 0, 1783, 1780, 1, 0, 0, 0, 1783, 1784, 1, 0, 0, 0, 1784, 1786,
		1, 0, 0, 0, 1785, 1724, 1, 0, 0, 0, 1785, 1743, 1, 0, 0, 0, 1785, 1762,
		1, 0, 0, 0, 1785, 1776, 1, 0, 0, 0, 1786, 167, 1, 0, 0, 0, 1787, 1800,
		5, 7, 0, 0, 1788, 1789, 3, 256, 128, 0, 1789, 1790, 5, 2, 0, 0, 1790, 1791,
		5, 7, 0, 0, 1791, 1800, 1, 0, 0, 0, 1792, 1797, 3, 112, 56, 0, 1793, 1795,
		5, 33, 0, 0, 1794, 1793, 1, 0, 0, 0, 1794, 1795, 1, 0, 0, 0, 1795, 1796,
		1, 0, 0, 0, 1796, 1798, 3, 244, 122, 0, 1797, 1794, 1, 0, 0, 0, 1797, 1798,
		1, 0, 0, 0, 1798, 1800, 1, 0, 0, 0, 1799, 1787, 1, 0, 0, 0, 1799, 1788,
		1, 0, 0, 0, 1799, 1792, 1, 0, 0, 0, 1800, 169, 1, 0, 0, 0, 1801, 1815,
		5, 5, 0, 0, 1802, 1804, 5, 104, 0, 0, 1803, 1802, 1, 0, 0, 0, 1803, 1804,
		1, 0, 0, 0, 1804, 1811, 1, 0, 0, 0, 1805, 1807, 5, 100, 0, 0, 1806, 1808,
		5, 114, 0, 0, 1807, 1806, 1, 0, 0, 0, 1807, 1808, 1, 0, 0, 0, 1808, 1812,
		1, 0, 0, 0, 1809, 1812, 5, 91, 0, 0, 1810, 1812, 5, 53, 0, 0, 1811, 1805,
		1, 0, 0, 0, 1811, 1809, 1, 0, 0, 0, 1811, 1810, 1, 0, 0, 0, 1811, 1812,
		1, 0, 0, 0, 1812, 1813, 1, 0, 0, 0, 1813, 1815, 5, 98, 0, 0, 1814, 1801,
		1, 0, 0, 0, 1814, 1803, 1, 0, 0, 0, 1815, 171, 1, 0, 0, 0, 1816, 1817,
		5, 111, 0, 0, 1817, 1831, 3, 112, 56, 0, 1818, 1819, 5, 148, 0, 0, 1819,
		1820, 5, 3, 0, 0, 1820, 1825, 3, 260, 130, 0, 1821, 1822, 5, 5, 0, 0, 1822,
		1824, 3, 260, 130, 0, 1823, 1821, 1, 0, 0, 0, 1824, 1827, 1, 0, 0, 0, 1825,
		1823, 1, 0, 0, 0, 1825, 1826, 1, 0, 0, 0, 1826, 1828, 1, 0, 0, 0, 1827,
		1825, 1, 0, 0, 0, 1828, 1829, 5, 4, 0, 0, 1829, 1831, 1, 0, 0, 0, 1830,
		1816, 1, 0, 0, 0, 1830, 1818, 1, 0, 0, 0, 1831, 173, 1, 0, 0, 0, 1832,
		1834, 5, 145, 0, 0, 1833, 1835, 5, 29, 0, 0, 1834, 1833, 1, 0, 0, 0, 1834,
		1835, 1, 0, 0, 0, 1835, 1839, 1, 0, 0, 0, 1836, 1839, 5, 94, 0, 0, 1837,
		1839, 5, 71, 0, 0, 1838, 1832, 1, 0, 0, 0, 1838, 1836, 1, 0, 0, 0, 1838,
		1837, 1, 0, 0, 0, 1839, 175, 1, 0, 0, 0, 1840, 1842, 3, 74, 37, 0, 1841,
		1840, 1, 0, 0, 0, 1841, 1842, 1, 0, 0, 0, 1842, 1843, 1, 0, 0, 0, 1843,
		1846, 5, 147, 0, 0, 1844, 1845, 5, 112, 0, 0, 1845, 1847, 7, 8, 0, 0, 1846,
		1844, 1, 0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1848, 1, 0, 0, 0, 1848,
		1849, 3, 184, 92, 0, 1849, 1850, 5, 135, 0, 0, 1850, 1855, 3, 178, 89,
		0, 1851, 1852, 5, 5, 0, 0, 1852, 1854, 3, 178, 89, 0, 1853, 1851, 1, 0,
		0, 0, 1854, 1857, 1, 0, 0, 0, 1855, 1853, 1, 0, 0, 0, 1855, 1856, 1, 0,
		0, 0, 1856, 1870, 1, 0, 0, 0, 1857, 1855, 1, 0, 0, 0, 1858, 1868, 5, 79,
		0, 0, 1859, 1864, 3, 166, 83, 0, 1860, 1861, 5, 5, 0, 0, 1861, 1863, 3,
		166, 83, 0, 1862, 1860, 1, 0, 0, 0, 1863, 1866, 1, 0, 0, 0, 1864, 1862,
		1, 0, 0, 0, 1864, 1865, 1, 0, 0, 0, 1865, 1869, 1, 0, 0, 0, 1866, 1864,
		1, 0, 0, 0, 1867, 1869, 3, 146, 73, 0, 1868, 1859, 1, 0, 0, 0, 1868, 1867,
		1, 0, 0, 0, 1869, 1871, 1, 0, 0, 0, 1870, 1858, 1, 0, 0, 0, 1870, 1871,
		1, 0, 0, 0, 1871, 1874, 1, 0, 0, 0, 1872, 1873, 5, 154, 0, 0, 1873, 1875,
		3, 112, 56, 0, 1874, 1872, 1, 0, 0, 0, 1874, 1875, 1, 0, 0, 0, 1875, 1877,
		1, 0, 0, 0, 1876, 1878, 3, 134, 67, 0, 1877, 1876, 1, 0, 0, 0, 1877, 1878,
		1, 0, 0, 0, 1878, 177, 1, 0, 0, 0, 1879, 1882, 3, 260, 130, 0, 1880, 1882,
		3, 180, 90, 0, 1881, 1879, 1, 0, 0, 0, 1881, 1880, 1, 0, 0, 0, 1882, 1883,
		1, 0, 0, 0, 1883, 1884, 5, 6, 0, 0, 1884, 1885, 3, 112, 56, 0, 1885, 179,
		1, 0, 0, 0, 1886, 1887, 5, 3, 0, 0, 1887, 1892, 3, 260, 130, 0, 1888, 1889,
		5, 5, 0, 0, 1889, 1891, 3, 260, 130, 0, 1890, 1888, 1, 0, 0, 0, 1891, 1894,
		1, 0, 0, 0, 1892, 1890, 1, 0, 0, 0, 1892, 1893, 1, 0, 0, 0, 1893, 1895,
		1, 0, 0, 0, 1894, 1892, 1, 0, 0, 0, 1895, 1896, 5, 4, 0, 0, 1896, 181,
		1, 0, 0, 0, 1897, 1899, 3, 74, 37, 0, 1898, 1897, 1, 0, 0, 0, 1898, 1899,
		1, 0, 0, 0, 1899, 1900, 1, 0, 0, 0, 1900, 1903, 5, 147, 0, 0, 1901, 1902,
		5, 112, 0, 0, 1902, 1904, 7, 8, 0, 0, 1903, 1901, 1, 0, 0, 0, 1903, 1904,
		1, 0, 0, 0, 1904, 1905, 1, 0, 0, 0, 1905, 1906, 3, 184, 92, 0, 1906, 1909,
		5, 135, 0, 0, 1907, 1910, 3, 260, 130, 0, 1908, 1910, 3, 180, 90, 0, 1909,
		1907, 1, 0, 0, 0, 1909, 1908, 1, 0, 0, 0, 1910, 1911, 1, 0, 0, 0, 1911,
		1912, 5, 6, 0, 0, 1912, 1923, 3, 112, 56, 0, 1913, 1916, 5, 5, 0, 0, 1914,
		1917, 3, 260, 130, 0, 1915, 1917, 3, 180, 90, 0, 1916, 1914, 1, 0, 0, 0,
		1916, 1915, 1, 0, 0, 0, 1917, 1918, 1, 0, 0, 0, 1918, 1919, 5, 6, 0, 0,
		1919, 1920, 3, 112, 56, 0, 1920, 1922, 1, 0, 0, 0, 1921, 1913, 1, 0, 0,
		0, 1922, 1925, 1, 0, 0, 0, 1923, 1921, 1, 0, 0, 0, 1923, 1924, 1, 0, 0,
		0, 1924, 1928, 1, 0, 0, 0, 1925, 1923, 1, 0, 0, 0, 1926, 1927, 5, 154,
		0, 0, 1927, 1929, 3, 112, 56, 0, 1928, 1926, 1, 0, 0, 0, 1928, 1929, 1,
		0, 0, 0, 1929, 1931, 1, 0, 0, 0, 1930, 1932, 3, 134, 67, 0, 1931, 1930,
		1, 0, 0, 0, 1931, 1932, 1, 0, 0, 0, 1932, 1937, 1, 0, 0, 0, 1933, 1935,
		3, 206, 103, 0, 1934, 1933, 1, 0, 0, 0, 1934, 1935, 1, 0, 0, 0, 1935, 1936,
		1, 0, 0, 0, 1936, 1938, 3, 208, 104, 0, 1937, 1934, 1, 0, 0, 0, 1937, 1938,
		1, 0, 0, 0, 1938, 183, 1, 0, 0, 0, 1939, 1940, 3, 254, 127, 0, 1940, 1941,
		5, 2, 0, 0, 1941, 1943, 1, 0, 0, 0, 1942, 1939, 1, 0, 0, 0, 1942, 1943,
		1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 1947, 3, 256, 128, 0, 1945, 1946,
		5, 33, 0, 0, 1946, 1948, 3, 284, 142, 0, 1947, 1945, 1, 0, 0, 0, 1947,
		1948, 1, 0, 0, 0, 1948, 1954, 1, 0, 0, 0, 1949, 1950, 5, 89, 0, 0, 1950,
		1951, 5, 41, 0, 0, 1951, 1955, 3, 266, 133, 0, 1952, 1953, 5, 106, 0, 0,
		1953, 1955, 5, 89, 0, 0, 1954, 1949, 1, 0, 0, 0, 1954, 1952, 1, 0, 0, 0,
		1954, 1955, 1, 0, 0, 0, 1955, 185, 1, 0, 0, 0, 1956, 1958, 5, 149, 0, 0,
		1957, 1959, 5, 31, 0, 0, 1958, 1957, 1, 0, 0, 0, 1958, 1959, 1, 0, 0, 0,
		1959, 1961, 1, 0, 0, 0, 1960, 1962, 3, 254, 127, 0, 1961, 1960, 1, 0, 0,
		0, 1961, 1962, 1, 0, 0, 0, 1962, 1965, 1, 0, 0, 0, 1963, 1964, 5, 95, 0,
		0, 1964, 1966, 3, 286, 143, 0, 1965, 1963, 1, 0, 0, 0, 1965, 1966, 1, 0,
		0, 0, 1966, 187, 1, 0, 0, 0, 1967, 1968, 5, 184, 0, 0, 1968, 1969, 5, 3,
		0, 0, 1969, 1970, 5, 154, 0, 0, 1970, 1971, 3, 112, 56, 0, 1971, 1972,
		5, 4, 0, 0, 1972, 189, 1, 0, 0, 0, 1973, 1975, 5, 3, 0, 0, 1974, 1976,
		3, 288, 144, 0, 1975, 1974, 1, 0, 0, 0, 1975, 1976, 1, 0, 0, 0, 1976, 1987,
		1, 0, 0, 0, 1977, 1978, 5, 159, 0, 0, 1978, 1979, 5, 41, 0, 0, 1979, 1984,
		3, 112, 56, 0, 1980, 1981, 5, 5, 0, 0, 1981, 1983, 3, 112, 56, 0, 1982,
		1980, 1, 0, 0, 0, 1983, 1986, 1, 0, 0, 0, 1984, 1982, 1, 0, 0, 0, 1984,
		1985, 1, 0, 0, 0, 1985, 1988, 1, 0, 0, 0, 1986, 1984, 1, 0, 0, 0, 1987,
		1977, 1, 0, 0, 0, 1987, 1988, 1, 0, 0, 0, 1988, 1989, 1, 0, 0, 0, 1989,
		1990, 5, 113, 0, 0, 1990, 1991, 5, 41, 0, 0, 1991, 1996, 3, 210, 105, 0,
		1992, 1993, 5, 5, 0, 0, 1993, 1995, 3, 210, 105, 0, 1994, 1992, 1, 0, 0,
		0, 1995, 1998, 1, 0, 0, 0, 1996, 1994, 1, 0, 0, 0, 1996, 1997, 1, 0, 0,
		0, 1997, 2000, 1, 0, 0, 0, 1998, 1996, 1, 0, 0, 0, 1999, 2001, 3, 194,
		97, 0, 2000, 1999, 1, 0, 0, 0, 2000, 2001, 1, 0, 0, 0, 2001, 2002, 1, 0,
		0, 0, 2002, 2003, 5, 4, 0, 0, 2003, 191, 1, 0, 0, 0, 2004, 2038, 5, 158,
		0, 0, 2005, 2039, 3, 282, 141, 0, 2006, 2008, 5, 3, 0, 0, 2007, 2009, 3,
		288, 144, 0, 2008, 2007, 1, 0, 0, 0, 2008, 2009, 1, 0, 0, 0, 2009, 2020,
		1, 0, 0, 0, 2010, 2011, 5, 159, 0, 0, 2011, 2012, 5, 41, 0, 0, 2012, 2017,
		3, 112, 56, 0, 2013, 2014, 5, 5, 0, 0, 2014, 2016, 3, 112, 56, 0, 2015,
		2013, 1, 0, 0, 0, 2016, 2019, 1, 0, 0, 0, 2017, 2015, 1, 0, 0, 0, 2017,
		2018, 1, 0, 0, 0, 2018, 2021, 1, 0, 0, 0, 2019, 2017, 1, 0, 0, 0, 2020,
		2010, 1, 0, 0, 0, 2020, 2021, 1, 0, 0, 0, 2021, 2032, 1, 0, 0, 0, 2022,
		2023, 5, 113, 0, 0, 2023, 2024, 5, 41, 0, 0, 2024, 2029, 3, 210, 105, 0,
		2025, 2026, 5, 5, 0, 0, 2026, 2028, 3, 210, 105, 0, 2027, 2025, 1, 0, 0,
		0, 2028, 2031, 1, 0, 0, 0, 2029, 2027, 1, 0, 0, 0, 2029, 2030, 1, 0, 0,
		0, 2030, 2033, 1, 0, 0, 0, 2031, 2029, 1, 0, 0, 0, 2032, 2022, 1, 0, 0,
		0, 2032, 2033, 1, 0, 0, 0, 2033, 2035, 1, 0, 0, 0, 2034, 2036, 3, 194,
		97, 0, 2035, 2034, 1, 0, 0, 0, 2035, 2036, 1, 0, 0, 0, 2036, 2037, 1, 0,
		0, 0, 2037, 2039, 5, 4, 0, 0, 2038, 2005, 1, 0, 0, 0, 2038, 2006, 1, 0,
		0, 0, 2039, 193, 1, 0, 0, 0, 2040, 2050, 3, 196, 98, 0, 2041, 2048, 5,
		186, 0, 0, 2042, 2043, 5, 105, 0, 0, 2043, 2049, 5, 188, 0, 0, 2044, 2045,
		5, 163, 0, 0, 2045, 2049, 5, 131, 0, 0, 2046, 2049, 5, 82, 0, 0, 2047,
		2049, 5, 187, 0, 0, 2048, 2042, 1, 0, 0, 0, 2048, 2044, 1, 0, 0, 0, 2048,
		2046, 1, 0, 0, 0, 2048, 2047, 1, 0, 0, 0, 2049, 2051, 1, 0, 0, 0, 2050,
		2041, 1, 0, 0, 0, 2050, 2051, 1, 0, 0, 0, 2051, 195, 1, 0, 0, 0, 2052,
		2059, 7, 17, 0, 0, 2053, 2060, 3, 218, 109, 0, 2054, 2055, 5, 40, 0, 0,
		2055, 2056, 3, 214, 107, 0, 2056, 2057, 5, 32, 0, 0, 2057, 2058, 3, 216,
		108, 0, 2058, 2060, 1, 0, 0, 0, 2059, 2053, 1, 0, 0, 0, 2059, 2054, 1,
		0, 0, 0, 2060, 197, 1, 0, 0, 0, 2061, 2062, 3, 290, 145, 0, 2062, 2072,
		5, 3, 0, 0, 2063, 2068, 3, 112, 56, 0, 2064, 2065, 5, 5, 0, 0, 2065, 2067,
		3, 112, 56, 0, 2066, 2064, 1, 0, 0, 0, 2067, 2070, 1, 0, 0, 0, 2068, 2066,
		1, 0, 0, 0, 2068, 2069, 1, 0, 0, 0, 2069, 2073, 1, 0, 0, 0, 2070, 2068,
		1, 0, 0, 0, 2071, 2073, 5, 7, 0, 0, 2072, 2063, 1, 0, 0, 0, 2072, 2071,
		1, 0, 0, 0, 2073, 2074, 1, 0, 0, 0, 2074, 2075, 5, 4, 0, 0, 2075, 199,
		1, 0, 0, 0, 2076, 2077, 3, 292, 146, 0, 2077, 2090, 5, 3, 0, 0, 2078, 2080,
		5, 65, 0, 0, 2079, 2078, 1, 0, 0, 0, 2079, 2080, 1, 0, 0, 0, 2080, 2081,
		1, 0, 0, 0, 2081, 2086, 3, 112, 56, 0, 2082, 2083, 5, 5, 0, 0, 2083, 2085,
		3, 112, 56, 0, 2084, 2082, 1, 0, 0, 0, 2085, 2088, 1, 0, 0, 0, 2086, 2084,
		1, 0, 0, 0, 2086, 2087, 1, 0, 0, 0, 2087, 2091, 1, 0, 0, 0, 2088, 2086,
		1, 0, 0, 0, 2089, 2091, 5, 7, 0, 0, 2090, 2079, 1, 0, 0, 0, 2090, 2089,
		1, 0, 0, 0, 2090, 2091, 1, 0, 0, 0, 2091, 2092, 1, 0, 0, 0, 2092, 2094,
		5, 4, 0, 0, 2093, 2095, 3, 188, 94, 0, 2094, 2093, 1, 0, 0, 0, 2094, 2095,
		1, 0, 0, 0, 2095, 201, 1, 0, 0, 0, 2096, 2097, 3, 220, 110, 0, 2097, 2107,
		5, 3, 0, 0, 2098, 2103, 3, 112, 56, 0, 2099, 2100, 5, 5, 0, 0, 2100, 2102,
		3, 112, 56, 0, 2101, 2099, 1, 0, 0, 0, 2102, 2105, 1, 0, 0, 0, 2103, 2101,
		1, 0, 0, 0, 2103, 2104, 1, 0, 0, 0, 2104, 2108, 1, 0, 0, 0, 2105, 2103,
		1, 0, 0, 0, 2106, 2108, 5, 7, 0, 0, 2107, 2098, 1, 0, 0, 0, 2107, 2106,
		1, 0, 0, 0, 2107, 2108, 1, 0, 0, 0, 2108, 2109, 1, 0, 0, 0, 2109, 2111,
		5, 4, 0, 0, 2110, 2112, 3, 188, 94, 0, 2111, 2110, 1, 0, 0, 0, 2111, 2112,
		1, 0, 0, 0, 2112, 2113, 1, 0, 0, 0, 2113, 2116, 5, 158, 0, 0, 2114, 2117,
		3, 190, 95, 0, 2115, 2117, 3, 282, 141, 0, 2116, 2114, 1, 0, 0, 0, 2116,
		2115, 1, 0, 0, 0, 2117, 203, 1, 0, 0, 0, 2118, 2120, 5, 155, 0, 0, 2119,
		2121, 5, 120, 0, 0, 2120, 2119, 1, 0, 0, 0, 2120, 2121, 1, 0, 0, 0, 2121,
		2122, 1, 0, 0, 0, 2122, 2127, 3, 80, 40, 0, 2123, 2124, 5, 5, 0, 0, 2124,
		2126, 3, 80, 40, 0, 2125, 2123, 1, 0, 0, 0, 2126, 2129, 1, 0, 0, 0, 2127,
		2125, 1, 0, 0, 0, 2127, 2128, 1, 0, 0, 0, 2128, 205, 1, 0, 0, 0, 2129,
		2127, 1, 0, 0, 0, 2130, 2131, 5, 113, 0, 0, 2131, 2132, 5, 41, 0, 0, 2132,
		2137, 3, 210, 105, 0, 2133, 2134, 5, 5, 0, 0, 2134, 2136, 3, 210, 105,
		0, 2135, 2133, 1, 0, 0, 0, 2136, 2139, 1, 0, 0, 0, 2137, 2135, 1, 0, 0,
		0, 2137, 2138, 1, 0, 0, 0, 2138, 207, 1, 0, 0, 0, 2139, 2137, 1, 0, 0,
		0, 2140, 2141, 5, 102, 0, 0, 2141, 2144, 3, 112, 56, 0, 2142, 2143, 7,
		18, 0, 0, 2143, 2145, 3, 112, 56, 0, 2144, 2142, 1, 0, 0, 0, 2144, 2145,
		1, 0, 0, 0, 2145, 209, 1, 0, 0, 0, 2146, 2149, 3, 112, 56, 0, 2147, 2148,
		5, 46, 0, 0, 2148, 2150, 3, 262, 131, 0, 2149, 2147, 1, 0, 0, 0, 2149,
		2150, 1, 0, 0, 0, 2150, 2152, 1, 0, 0, 0, 2151, 2153, 3, 212, 106, 0, 2152,
		2151, 1, 0, 0, 0, 2152, 2153, 1, 0, 0, 0, 2153, 2156, 1, 0, 0, 0, 2154,
		2155, 5, 181, 0, 0, 2155, 2157, 7, 19, 0, 0, 2156, 2154, 1, 0, 0, 0, 2156,
		2157, 1, 0, 0, 0, 2157, 211, 1, 0, 0, 0, 2158, 2159, 7, 20, 0, 0, 2159,
		213, 1, 0, 0, 0, 2160, 2161, 3, 112, 56, 0, 2161, 2162, 5, 161, 0, 0, 2162,
		2171, 1, 0, 0, 0, 2163, 2164, 3, 112, 56, 0, 2164, 2165, 5, 164, 0, 0,
		2165, 2171, 1, 0, 0, 0, 2166, 2167, 5, 163, 0, 0, 2167, 2171, 5, 131, 0,
		0, 2168, 2169, 5, 162, 0, 0, 2169, 2171, 5, 161, 0, 0, 2170, 2160, 1, 0,
		0, 0, 2170, 2163, 1, 0, 0, 0, 2170, 2166, 1, 0, 0, 0, 2170, 2168, 1, 0,
		0, 0, 2171, 215, 1, 0, 0, 0, 2172, 2173, 3, 112, 56, 0, 2173, 2174, 5,
		161, 0, 0, 2174, 2183, 1, 0, 0, 0, 2175, 2176, 3, 112, 56, 0, 2176, 2177,
		5, 164, 0, 0, 2177, 2183, 1, 0, 0, 0, 2178, 2179, 5, 163, 0, 0, 2179, 2183,
		5, 131, 0, 0, 2180, 2181, 5, 162, 0, 0, 2181, 2183, 5, 164, 0, 0, 2182,
		2172, 1, 0, 0, 0, 2182, 2175, 1, 0, 0, 0, 2182, 2178, 1, 0, 0, 0, 2182,
		2180, 1, 0, 0, 0, 2183, 217, 1, 0, 0, 0, 2184, 2185, 3, 112, 56, 0, 2185,
		2186, 5, 161, 0, 0, 2186, 2192, 1, 0, 0, 0, 2187, 2188, 5, 162, 0, 0, 2188,
		2192, 5, 161, 0, 0, 2189, 2190, 5, 163, 0, 0, 2190, 2192, 5, 131, 0, 0,
		2191, 2184, 1, 0, 0, 0, 2191, 2187, 1, 0, 0, 0, 2191, 2189, 1, 0, 0, 0,
		2192, 219, 1, 0, 0, 0, 2193, 2194, 7, 21, 0, 0, 2194, 2195, 5, 3, 0, 0,
		2195, 2196, 3, 112, 56, 0, 2196, 2197, 5, 4, 0, 0, 2197, 2198, 5, 158,
		0, 0, 2198, 2200, 5, 3, 0, 0, 2199, 2201, 3, 226, 113, 0, 2200, 2199, 1,
		0, 0, 0, 2200, 2201, 1, 0, 0, 0, 2201, 2202, 1, 0, 0, 0, 2202, 2204, 3,
		230, 115, 0, 2203, 2205, 3, 196, 98, 0, 2204, 2203, 1, 0, 0, 0, 2204, 2205,
		1, 0, 0, 0, 2205, 2206, 1, 0, 0, 0, 2206, 2207, 5, 4, 0, 0, 2207, 2279,
		1, 0, 0, 0, 2208, 2209, 7, 22, 0, 0, 2209, 2210, 5, 3, 0, 0, 2210, 2211,
		5, 4, 0, 0, 2211, 2212, 5, 158, 0, 0, 2212, 2214, 5, 3, 0, 0, 2213, 2215,
		3, 226, 113, 0, 2214, 2213, 1, 0, 0, 0, 2214, 2215, 1, 0, 0, 0, 2215, 2217,
		1, 0, 0, 0, 2216, 2218, 3, 228, 114, 0, 2217, 2216, 1, 0, 0, 0, 2217, 2218,
		1, 0, 0, 0, 2218, 2219, 1, 0, 0, 0, 2219, 2279, 5, 4, 0, 0, 2220, 2221,
		7, 23, 0, 0, 2221, 2222, 5, 3, 0, 0, 2222, 2223, 5, 4, 0, 0, 2223, 2224,
		5, 158, 0, 0, 2224, 2226, 5, 3, 0, 0, 2225, 2227, 3, 226, 113, 0, 2226,
		2225, 1, 0, 0, 0, 2226, 2227, 1, 0, 0, 0, 2227, 2228, 1, 0, 0, 0, 2228,
		2229, 3, 230, 115, 0, 2229, 2230, 5, 4, 0, 0, 2230, 2279, 1, 0, 0, 0, 2231,
		2232, 7, 24, 0, 0, 2232, 2233, 5, 3, 0, 0, 2233, 2235, 3, 112, 56, 0, 2234,
		2236, 3, 222, 111, 0, 2235, 2234, 1, 0, 0, 0, 2235, 2236, 1, 0, 0, 0, 2236,
		2238, 1, 0, 0, 0, 2237, 2239, 3, 224, 112, 0, 2238, 2237, 1, 0, 0, 0, 2238,
		2239, 1, 0, 0, 0, 2239, 2240, 1, 0, 0, 0, 2240, 2241, 5, 4, 0, 0, 2241,
		2242, 5, 158, 0, 0, 2242, 2244, 5, 3, 0, 0, 2243, 2245, 3, 226, 113, 0,
		2244, 2243, 1, 0, 0, 0, 2244, 2245, 1, 0, 0, 0, 2245, 2246, 1, 0, 0, 0,
		2246, 2247, 3, 230, 115, 0, 2247, 2248, 5, 4, 0, 0, 2248, 2279, 1, 0, 0,
		0, 2249, 2250, 5, 170, 0, 0, 2250, 2251, 5, 3, 0, 0, 2251, 2252, 3, 112,
		56, 0, 2252, 2253, 5, 5, 0, 0, 2253, 2254, 3, 56, 28, 0, 2254, 2255, 5,
		4, 0, 0, 2255, 2256, 5, 158, 0, 0, 2256, 2258, 5, 3, 0, 0, 2257, 2259,
		3, 226, 113, 0, 2258, 2257, 1, 0, 0, 0, 2258, 2259, 1, 0, 0, 0, 2259, 2260,
		1, 0, 0, 0, 2260, 2262, 3, 230, 115, 0, 2261, 2263, 3, 196, 98, 0, 2262,
		2261, 1, 0, 0, 0, 2262, 2263, 1, 0, 0, 0, 2263, 2264, 1, 0, 0, 0, 2264,
		2265, 5, 4, 0, 0, 2265, 2279, 1, 0, 0, 0, 2266, 2267, 5, 171, 0, 0, 2267,
		2268, 5, 3, 0, 0, 2268, 2269, 3, 112, 56, 0, 2269, 2270, 5, 4, 0, 0, 2270,
		2271, 5, 158, 0, 0, 2271, 2273, 5, 3, 0, 0, 2272, 2274, 3, 226, 113, 0,
		2273, 2272, 1, 0, 0, 0, 2273, 2274, 1, 0, 0, 0, 2274, 2275, 1, 0, 0, 0,
		2275, 2276, 3, 230, 115, 0, 2276, 2277, 5, 4, 0, 0, 2277, 2279, 1, 0, 0,
		0, 2278, 2193, 1, 0, 0, 0, 2278, 2208, 1, 0, 0, 0, 2278, 2220, 1, 0, 0,
		0, 2278, 2231, 1, 0, 0, 0, 2278, 2249, 1, 0, 0, 0, 2278, 2266, 1, 0, 0,
		0, 2279, 221, 1, 0, 0, 0, 2280, 2281, 5, 5, 0, 0, 2281, 2282, 3, 56, 28,
		0, 2282, 223, 1, 0, 0, 0, 2283, 2284, 5, 5, 0, 0, 2284, 2285, 3, 56, 28,
		0, 2285, 225, 1, 0, 0, 0, 2286, 2287, 5, 159, 0, 0, 2287, 2289, 5, 41,
		0, 0, 2288, 2290, 3, 112, 56, 0, 2289, 2288, 1, 0, 0, 0, 2290, 2291, 1,
		0, 0, 0, 2291, 2289, 1, 0, 0, 0, 2291, 2292, 1, 0, 0, 0, 2292, 227, 1,
		0, 0, 0, 2293, 2294, 5, 113, 0, 0, 2294, 2296, 5, 41, 0, 0, 2295, 2297,
		3, 112, 56, 0, 2296, 2295, 1, 0, 0, 0, 2297, 2298, 1, 0, 0, 0, 2298, 2296,
		1, 0, 0, 0, 2298, 2299, 1, 0, 0, 0, 2299, 229, 1, 0, 0, 0, 2300, 2301,
		5, 113, 0, 0, 2301, 2302, 5, 41, 0, 0, 2302, 2303, 3, 232, 116, 0, 2303,
		231, 1, 0, 0, 0, 2304, 2306, 3, 112, 56, 0, 2305, 2307, 3, 212, 106, 0,
		2306, 2305, 1, 0, 0, 0, 2306, 2307, 1, 0, 0, 0, 2307, 2315, 1, 0, 0, 0,
		2308, 2309, 5, 5, 0, 0, 2309, 2311, 3, 112, 56, 0, 2310, 2312, 3, 212,
		106, 0, 2311, 2310, 1, 0, 0, 0, 2311, 2312, 1, 0, 0, 0, 2312, 2314, 1,
		0, 0, 0, 2313, 2308, 1, 0, 0, 0, 2314, 2317, 1, 0, 0, 0, 2315, 2313, 1,
		0, 0, 0, 2315, 2316, 1, 0, 0, 0, 2316, 233, 1, 0, 0, 0, 2317, 2315, 1,
		0, 0, 0, 2318, 2319, 3, 144, 72, 0, 2319, 235, 1, 0, 0, 0, 2320, 2321,
		3, 144, 72, 0, 2321, 237, 1, 0, 0, 0, 2322, 2323, 7, 25, 0, 0, 2323, 239,
		1, 0, 0, 0, 2324, 2325, 5, 194, 0, 0, 2325, 241, 1, 0, 0, 0, 2326, 2329,
		3, 112, 56, 0, 2327, 2329, 3, 46, 23, 0, 2328, 2326, 1, 0, 0, 0, 2328,
		2327, 1, 0, 0, 0, 2329, 243, 1, 0, 0, 0, 2330, 2331, 7, 26, 0, 0, 2331,
		245, 1, 0, 0, 0, 2332, 2333, 7, 27, 0, 0, 2333, 247, 1, 0, 0, 0, 2334,
		2335, 3, 296, 148, 0, 2335, 249, 1, 0, 0, 0, 2336, 2337, 3, 296, 148, 0,
		2337, 251, 1, 0, 0, 0, 2338, 2339, 3, 296, 148, 0, 2339, 253, 1, 0, 0,
		0, 2340, 2341, 3, 296, 148, 0, 2341, 255, 1, 0, 0, 0, 2342, 2343, 3, 296,
		148, 0, 2343, 257, 1, 0, 0, 0, 2344, 2345, 3, 296, 148, 0, 2345, 259, 1,
		0, 0, 0, 2346, 2347, 3, 296, 148, 0, 2347, 261, 1, 0, 0, 0, 2348, 2349,
		3, 296, 148, 0, 2349, 263, 1, 0, 0, 0, 2350, 2351, 3, 296, 148, 0, 2351,
		265, 1, 0, 0, 0, 2352, 2353, 3, 296, 148, 0, 2353, 267, 1, 0, 0, 0, 2354,
		2355, 3, 296, 148, 0, 2355, 269, 1, 0, 0, 0, 2356, 2357, 3, 296, 148, 0,
		2357, 271, 1, 0, 0, 0, 2358, 2359, 3, 296, 148, 0, 2359, 273, 1, 0, 0,
		0, 2360, 2361, 3, 296, 148, 0, 2361, 275, 1, 0, 0, 0, 2362, 2363, 3, 296,
		148, 0, 2363, 277, 1, 0, 0, 0, 2364, 2365, 3, 296, 148, 0, 2365, 279, 1,
		0, 0, 0, 2366, 2367, 3, 296, 148, 0, 2367, 281, 1, 0, 0, 0, 2368, 2369,
		3, 296, 148, 0, 2369, 283, 1, 0, 0, 0, 2370, 2371, 3, 296, 148, 0, 2371,
		285, 1, 0, 0, 0, 2372, 2373, 3, 296, 148, 0, 2373, 287, 1, 0, 0, 0, 2374,
		2375, 3, 296, 148, 0, 2375, 289, 1, 0, 0, 0, 2376, 2377, 3, 296, 148, 0,
		2377, 291, 1, 0, 0, 0, 2378, 2379, 3, 296, 148, 0, 2379, 293, 1, 0, 0,
		0, 2380, 2381, 3, 296, 148, 0, 2381, 295, 1, 0, 0, 0, 2382, 2390, 5, 191,
		0, 0, 2383, 2390, 3, 246, 123, 0, 2384, 2390, 5, 194, 0, 0, 2385, 2386,
		5, 3, 0, 0, 2386, 2387, 3, 296, 148, 0, 2387, 2388, 5, 4, 0, 0, 2388, 2390,
		1, 0, 0, 0, 2389, 2382, 1, 0, 0, 0, 2389, 2383, 1, 0, 0, 0, 2389, 2384,
		1, 0, 0, 0, 2389, 2385, 1, 0, 0, 0, 2390, 297, 1, 0, 0, 0, 332, 301, 309,
		316, 321, 327, 333, 335, 369, 376, 390, 398, 406, 414, 426, 433, 442, 445,
		449, 457, 460, 463, 465, 469, 473, 477, 480, 487, 493, 497, 502, 513, 519,
		523, 527, 530, 535, 545, 549, 554, 563, 570, 583, 588, 592, 596, 601, 611,
		623, 627, 631, 635, 638, 652, 659, 666, 668, 673, 676, 679, 682, 688, 705,
		711, 721, 726, 735, 740, 750, 755, 765, 769, 771, 775, 780, 782, 790, 794,
		799, 806, 817, 820, 822, 829, 833, 840, 846, 852, 856, 861, 870, 875, 884,
		889, 900, 905, 909, 925, 935, 940, 948, 960, 965, 973, 980, 983, 986, 993,
		996, 999, 1002, 1006, 1013, 1018, 1025, 1032, 1037, 1044, 1049, 1056, 1062,
		1067, 1074, 1079, 1089, 1094, 1097, 1105, 1111, 1119, 1126, 1136, 1141,
		1155, 1168, 1171, 1179, 1188, 1192, 1197, 1215, 1227, 1232, 1244, 1250,
		1257, 1261, 1271, 1274, 1280, 1286, 1295, 1298, 1302, 1304, 1306, 1312,
		1319, 1323, 1327, 1330, 1346, 1359, 1371, 1382, 1386, 1393, 1399, 1404,
		1412, 1417, 1421, 1424, 1428, 1431, 1439, 1450, 1456, 1458, 1466, 1473,
		1480, 1485, 1487, 1493, 1502, 1507, 1514, 1518, 1520, 1523, 1531, 1535,
		1538, 1544, 1548, 1553, 1560, 1569, 1573, 1575, 1579, 1588, 1593, 1595,
		1608, 1611, 1614, 1619, 1623, 1626, 1629, 1634, 1638, 1643, 1646, 1649,
		1655, 1660, 1664, 1667, 1674, 1679, 1688, 1693, 1696, 1704, 1708, 1716,
		1719, 1724, 1728, 1731, 1738, 1743, 1752, 1757, 1760, 1768, 1772, 1780,
		1783, 1785, 1794, 1797, 1799, 1803, 1807, 1811, 1814, 1825, 1830, 1834,
		1838, 1841, 1846, 1855, 1864, 1868, 1870, 1874, 1877, 1881, 1892, 1898,
		1903, 1909, 1916, 1923, 1928, 1931, 1934, 1937, 1942, 1947, 1954, 1958,
		1961, 1965, 1975, 1984, 1987, 1996, 2000, 2008, 2017, 2020, 2029, 2032,
		2035, 2038, 2048, 2050, 2059, 2068, 2072, 2079, 2086, 2090, 2094, 2103,
		2107, 2111, 2116, 2120, 2127, 2137, 2144, 2149, 2152, 2156, 2170, 2182,
		2191, 2200, 2204, 2214, 2217, 2226, 2235, 2238, 2244, 2258, 2262, 2273,
		2278, 2291, 2298, 2306, 2311, 2315, 2328, 2389,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// SQLiteParserInit initializes any static state used to implement SQLiteParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewSQLiteParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func SQLiteParserInit() {
	staticData := &SQLiteParserParserStaticData
	staticData.once.Do(sqliteparserParserInit)
}

// NewSQLiteParser produces a new parser instance for the optional input antlr.TokenStream.
func NewSQLiteParser(input antlr.TokenStream) *SQLiteParser {
	SQLiteParserInit()
	this := new(SQLiteParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &SQLiteParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "SQLiteParser.g4"

	return this
}

// SQLiteParser tokens.
const (
	SQLiteParserEOF                 = antlr.TokenEOF
	SQLiteParserSCOL                = 1
	SQLiteParserDOT                 = 2
	SQLiteParserOPEN_PAR            = 3
	SQLiteParserCLOSE_PAR           = 4
	SQLiteParserCOMMA               = 5
	SQLiteParserASSIGN              = 6
	SQLiteParserSTAR                = 7
	SQLiteParserPLUS                = 8
	SQLiteParserMINUS               = 9
	SQLiteParserTILDE               = 10
	SQLiteParserPIPE2               = 11
	SQLiteParserDIV                 = 12
	SQLiteParserMOD                 = 13
	SQLiteParserLT2                 = 14
	SQLiteParserGT2                 = 15
	SQLiteParserAMP                 = 16
	SQLiteParserPIPE                = 17
	SQLiteParserLT                  = 18
	SQLiteParserLT_EQ               = 19
	SQLiteParserGT                  = 20
	SQLiteParserGT_EQ               = 21
	SQLiteParserEQ                  = 22
	SQLiteParserNOT_EQ1             = 23
	SQLiteParserNOT_EQ2             = 24
	SQLiteParserABORT_              = 25
	SQLiteParserACTION_             = 26
	SQLiteParserADD_                = 27
	SQLiteParserAFTER_              = 28
	SQLiteParserALL_                = 29
	SQLiteParserALTER_              = 30
	SQLiteParserANALYZE_            = 31
	SQLiteParserAND_                = 32
	SQLiteParserAS_                 = 33
	SQLiteParserASC_                = 34
	SQLiteParserATTACH_             = 35
	SQLiteParserAUTOINCREMENT_      = 36
	SQLiteParserBINARY_             = 37
	SQLiteParserBEFORE_             = 38
	SQLiteParserBEGIN_              = 39
	SQLiteParserBETWEEN_            = 40
	SQLiteParserBY_                 = 41
	SQLiteParserCASCADE_            = 42
	SQLiteParserCASE_               = 43
	SQLiteParserCAST_               = 44
	SQLiteParserCHECK_              = 45
	SQLiteParserCOLLATE_            = 46
	SQLiteParserCOLUMN_             = 47
	SQLiteParserCOMMIT_             = 48
	SQLiteParserCONFLICT_           = 49
	SQLiteParserCONSTRAINT_         = 50
	SQLiteParserCOPY_               = 51
	SQLiteParserCREATE_             = 52
	SQLiteParserCROSS_              = 53
	SQLiteParserCSV_                = 54
	SQLiteParserCURRENT_DATE_       = 55
	SQLiteParserCURRENT_TIME_       = 56
	SQLiteParserCURRENT_TIMESTAMP_  = 57
	SQLiteParserDATABASE_           = 58
	SQLiteParserDEFAULT_            = 59
	SQLiteParserDEFERRABLE_         = 60
	SQLiteParserDEFERRED_           = 61
	SQLiteParserDELETE_             = 62
	SQLiteParserDESC_               = 63
	SQLiteParserDETACH_             = 64
	SQLiteParserDISTINCT_           = 65
	SQLiteParserDROP_               = 66
	SQLiteParserEACH_               = 67
	SQLiteParserELSE_               = 68
	SQLiteParserEND_                = 69
	SQLiteParserESCAPE_             = 70
	SQLiteParserEXCEPT_             = 71
	SQLiteParserEXCLUSIVE_          = 72
	SQLiteParserEXISTS_             = 73
	SQLiteParserEXPLAIN_            = 74
	SQLiteParserFAIL_               = 75
	SQLiteParserFOR_                = 76
	SQLiteParserFOREIGN_            = 77
	SQLiteParserFORMAT_             = 78
	SQLiteParserFROM_               = 79
	SQLiteParserFULL_               = 80
	SQLiteParserGLOB_               = 81
	SQLiteParserGROUP_              = 82
	SQLiteParserHAVING_             = 83
	SQLiteParserIF_                 = 84
	SQLiteParserIGNORE_             = 85
	SQLiteParserIMMEDIATE_          = 86
	SQLiteParserIN_                 = 87
	SQLiteParserINDEX_              = 88
	SQLiteParserINDEXED_            = 89
	SQLiteParserINITIALLY_          = 90
	SQLiteParserINNER_              = 91
	SQLiteParserINSERT_             = 92
	SQLiteParserINSTEAD_            = 93
	SQLiteParserINTERSECT_          = 94
	SQLiteParserINTO_               = 95
	SQLiteParserIS_                 = 96
	SQLiteParserISNULL_             = 97
	SQLiteParserJOIN_               = 98
	SQLiteParserKEY_                = 99
	SQLiteParserLEFT_               = 100
	SQLiteParserLIKE_               = 101
	SQLiteParserLIMIT_              = 102
	SQLiteParserMATCH_              = 103
	SQLiteParserNATURAL_            = 104
	SQLiteParserNO_                 = 105
	SQLiteParserNOT_                = 106
	SQLiteParserNOTNULL_            = 107
	SQLiteParserNULL_               = 108
	SQLiteParserOF_                 = 109
	SQLiteParserOFFSET_             = 110
	SQLiteParserON_                 = 111
	SQLiteParserOR_                 = 112
	SQLiteParserORDER_              = 113
	SQLiteParserOUTER_              = 114
	SQLiteParserPLAN_               = 115
	SQLiteParserPRAGMA_             = 116
	SQLiteParserPRIMARY_            = 117
	SQLiteParserQUERY_              = 118
	SQLiteParserRAISE_              = 119
	SQLiteParserRECURSIVE_          = 120
	SQLiteParserREFERENCES_         = 121
	SQLiteParserREGEXP_             = 122
	SQLiteParserREINDEX_            = 123
	SQLiteParserRELEASE_            = 124
	SQLiteParserRENAME_             = 125
	SQLiteParserREPLACE_            = 126
	SQLiteParserRESTRICT_           = 127
	SQLiteParserRETURNING_          = 128
	SQLiteParserRIGHT_              = 129
	SQLiteParserROLLBACK_           = 130
	SQLiteParserROW_                = 131
	SQLiteParserROWS_               = 132
	SQLiteParserSAVEPOINT_          = 133
	SQLiteParserSELECT_             = 134
	SQLiteParserSET_                = 135
	SQLiteParserTABLE_              = 136
	SQLiteParserTEMP_               = 137
	SQLiteParserTEMPORARY_          = 138
	SQLiteParserTEXT_               = 139
	SQLiteParserTHEN_               = 140
	SQLiteParserTO_                 = 141
	SQLiteParserTRANSACTION_        = 142
	SQLiteParserTRIGGER_            = 143
	SQLiteParserTRUNCATE_           = 144
	SQLiteParserUNION_              = 145
	SQLiteParserUNIQUE_             = 146
	SQLiteParserUPDATE_             = 147
	SQLiteParserUSING_              = 148
	SQLiteParserVACUUM_             = 149
	SQLiteParserVALUES_             = 150
	SQLiteParserVIEW_               = 151
	SQLiteParserVIRTUAL_            = 152
	SQLiteParserWHEN_               = 153
	SQLiteParserWHERE_              = 154
	SQLiteParserWITH_               = 155
	SQLiteParserWITHOUT_            = 156
	SQLiteParserFIRST_VALUE_        = 157
	SQLiteParserOVER_               = 158
	SQLiteParserPARTITION_          = 159
	SQLiteParserRANGE_              = 160
	SQLiteParserPRECEDING_          = 161
	SQLiteParserUNBOUNDED_          = 162
	SQLiteParserCURRENT_            = 163
	SQLiteParserFOLLOWING_          = 164
	SQLiteParserCUME_DIST_          = 165
	SQLiteParserDENSE_RANK_         = 166
	SQLiteParserLAG_                = 167
	SQLiteParserLAST_VALUE_         = 168
	SQLiteParserLEAD_               = 169
	SQLiteParserNTH_VALUE_          = 170
	SQLiteParserNTILE_              = 171
	SQLiteParserPERCENT_RANK_       = 172
	SQLiteParserRANK_               = 173
	SQLiteParserROW_NUMBER_         = 174
	SQLiteParserGENERATED_          = 175
	SQLiteParserALWAYS_             = 176
	SQLiteParserSTORED_             = 177
	SQLiteParserTRUE_               = 178
	SQLiteParserFALSE_              = 179
	SQLiteParserWINDOW_             = 180
	SQLiteParserNULLS_              = 181
	SQLiteParserFIRST_              = 182
	SQLiteParserLAST_               = 183
	SQLiteParserFILTER_             = 184
	SQLiteParserGROUPS_             = 185
	SQLiteParserEXCLUDE_            = 186
	SQLiteParserTIES_               = 187
	SQLiteParserOTHERS_             = 188
	SQLiteParserDO_                 = 189
	SQLiteParserNOTHING_            = 190
	SQLiteParserIDENTIFIER          = 191
	SQLiteParserNUMERIC_LITERAL     = 192
	SQLiteParserBIND_PARAMETER      = 193
	SQLiteParserSTRING_LITERAL      = 194
	SQLiteParserBLOB_LITERAL        = 195
	SQLiteParserSINGLE_LINE_COMMENT = 196
	SQLiteParserMULTILINE_COMMENT   = 197
	SQLiteParserSPACES              = 198
	SQLiteParserUNEXPECTED_CHAR     = 199
)

// SQLiteParser rules.
const (
	SQLiteParserRULE_parse                         = 0
	SQLiteParserRULE_sql_stmt_list                 = 1
	SQLiteParserRULE_sql_stmt                      = 2
	SQLiteParserRULE_alter_database_stmt           = 3
	SQLiteParserRULE_rename_database_to            = 4
	SQLiteParserRULE_alter_table_stmt              = 5
	SQLiteParserRULE_rename_table_to               = 6
	SQLiteParserRULE_rename_table_colum            = 7
	SQLiteParserRULE_add_table_column              = 8
	SQLiteParserRULE_add_table_index               = 9
	SQLiteParserRULE_drop_table_column             = 10
	SQLiteParserRULE_analyze_stmt                  = 11
	SQLiteParserRULE_attach_stmt                   = 12
	SQLiteParserRULE_begin_stmt                    = 13
	SQLiteParserRULE_commit_stmt                   = 14
	SQLiteParserRULE_rollback_stmt                 = 15
	SQLiteParserRULE_savepoint_stmt                = 16
	SQLiteParserRULE_release_stmt                  = 17
	SQLiteParserRULE_create_index_stmt             = 18
	SQLiteParserRULE_indexed_column                = 19
	SQLiteParserRULE_create_database_stmt          = 20
	SQLiteParserRULE_if_not_exists                 = 21
	SQLiteParserRULE_create_table_stmt             = 22
	SQLiteParserRULE_column_def                    = 23
	SQLiteParserRULE_with_param                    = 24
	SQLiteParserRULE_type_name                     = 25
	SQLiteParserRULE_column_constraint             = 26
	SQLiteParserRULE_primary_key_constraint        = 27
	SQLiteParserRULE_signed_number                 = 28
	SQLiteParserRULE_table_constraint              = 29
	SQLiteParserRULE_primary_key_def               = 30
	SQLiteParserRULE_unique_key_def                = 31
	SQLiteParserRULE_foreign_key_clause            = 32
	SQLiteParserRULE_conflict_clause               = 33
	SQLiteParserRULE_create_trigger_stmt           = 34
	SQLiteParserRULE_create_view_stmt              = 35
	SQLiteParserRULE_create_virtual_table_stmt     = 36
	SQLiteParserRULE_with_clause                   = 37
	SQLiteParserRULE_cte_table_name                = 38
	SQLiteParserRULE_recursive_cte                 = 39
	SQLiteParserRULE_common_table_expression       = 40
	SQLiteParserRULE_delete_stmt                   = 41
	SQLiteParserRULE_delete_stmt_limited           = 42
	SQLiteParserRULE_detach_stmt                   = 43
	SQLiteParserRULE_drop_stmt                     = 44
	SQLiteParserRULE_drop_database_stmt            = 45
	SQLiteParserRULE_drop_index_stmt               = 46
	SQLiteParserRULE_drop_table_stmt               = 47
	SQLiteParserRULE_drop_trigger_stmt             = 48
	SQLiteParserRULE_drop_view_stmt                = 49
	SQLiteParserRULE_if_exists                     = 50
	SQLiteParserRULE_copy_stmt                     = 51
	SQLiteParserRULE_copy_column_list              = 52
	SQLiteParserRULE_copy_format                   = 53
	SQLiteParserRULE_source_name                   = 54
	SQLiteParserRULE_truncate_stmt                 = 55
	SQLiteParserRULE_expr                          = 56
	SQLiteParserRULE_function                      = 57
	SQLiteParserRULE_comparison_expr               = 58
	SQLiteParserRULE_arithmetic_expr               = 59
	SQLiteParserRULE_raise_function                = 60
	SQLiteParserRULE_literal_value                 = 61
	SQLiteParserRULE_bind_param                    = 62
	SQLiteParserRULE_string_literal                = 63
	SQLiteParserRULE_value_row                     = 64
	SQLiteParserRULE_values_clause                 = 65
	SQLiteParserRULE_insert_stmt                   = 66
	SQLiteParserRULE_returning_clause              = 67
	SQLiteParserRULE_upsert_clause                 = 68
	SQLiteParserRULE_pragma_stmt                   = 69
	SQLiteParserRULE_pragma_value                  = 70
	SQLiteParserRULE_reindex_stmt                  = 71
	SQLiteParserRULE_select_stmt                   = 72
	SQLiteParserRULE_join_clause                   = 73
	SQLiteParserRULE_select_core                   = 74
	SQLiteParserRULE_factored_select_stmt          = 75
	SQLiteParserRULE_simple_select_stmt            = 76
	SQLiteParserRULE_compound_select_stmt          = 77
	SQLiteParserRULE_from                          = 78
	SQLiteParserRULE_from_table                    = 79
	SQLiteParserRULE_from_function                 = 80
	SQLiteParserRULE_from_table_or_subquery        = 81
	SQLiteParserRULE_from_select                   = 82
	SQLiteParserRULE_table_or_subquery             = 83
	SQLiteParserRULE_result_column                 = 84
	SQLiteParserRULE_join_operator                 = 85
	SQLiteParserRULE_join_constraint               = 86
	SQLiteParserRULE_compound_operator             = 87
	SQLiteParserRULE_update_stmt                   = 88
	SQLiteParserRULE_update_column_set             = 89
	SQLiteParserRULE_column_name_list              = 90
	SQLiteParserRULE_update_stmt_limited           = 91
	SQLiteParserRULE_qualified_table_name          = 92
	SQLiteParserRULE_vacuum_stmt                   = 93
	SQLiteParserRULE_filter_clause                 = 94
	SQLiteParserRULE_window_defn                   = 95
	SQLiteParserRULE_over_clause                   = 96
	SQLiteParserRULE_frame_spec                    = 97
	SQLiteParserRULE_frame_clause                  = 98
	SQLiteParserRULE_simple_function_invocation    = 99
	SQLiteParserRULE_aggregate_function_invocation = 100
	SQLiteParserRULE_window_function_invocation    = 101
	SQLiteParserRULE_common_table_stmt             = 102
	SQLiteParserRULE_order_by_stmt                 = 103
	SQLiteParserRULE_limit_stmt                    = 104
	SQLiteParserRULE_ordering_term                 = 105
	SQLiteParserRULE_asc_desc                      = 106
	SQLiteParserRULE_frame_left                    = 107
	SQLiteParserRULE_frame_right                   = 108
	SQLiteParserRULE_frame_single                  = 109
	SQLiteParserRULE_window_function               = 110
	SQLiteParserRULE_offset                        = 111
	SQLiteParserRULE_default_value                 = 112
	SQLiteParserRULE_partition_by                  = 113
	SQLiteParserRULE_order_by_expr                 = 114
	SQLiteParserRULE_order_by_expr_asc_desc        = 115
	SQLiteParserRULE_expr_asc_desc                 = 116
	SQLiteParserRULE_initial_select                = 117
	SQLiteParserRULE_recursive_select              = 118
	SQLiteParserRULE_unary_operator                = 119
	SQLiteParserRULE_error_message                 = 120
	SQLiteParserRULE_module_argument               = 121
	SQLiteParserRULE_column_alias                  = 122
	SQLiteParserRULE_keyword                       = 123
	SQLiteParserRULE_name                          = 124
	SQLiteParserRULE_database_name                 = 125
	SQLiteParserRULE_function_name                 = 126
	SQLiteParserRULE_schema_name                   = 127
	SQLiteParserRULE_table_name                    = 128
	SQLiteParserRULE_table_or_index_name           = 129
	SQLiteParserRULE_column_name                   = 130
	SQLiteParserRULE_collation_name                = 131
	SQLiteParserRULE_foreign_table                 = 132
	SQLiteParserRULE_index_name                    = 133
	SQLiteParserRULE_trigger_name                  = 134
	SQLiteParserRULE_view_name                     = 135
	SQLiteParserRULE_module_name                   = 136
	SQLiteParserRULE_pragma_name                   = 137
	SQLiteParserRULE_savepoint_name                = 138
	SQLiteParserRULE_table_alias                   = 139
	SQLiteParserRULE_transaction_name              = 140
	SQLiteParserRULE_window_name                   = 141
	SQLiteParserRULE_alias                         = 142
	SQLiteParserRULE_filename                      = 143
	SQLiteParserRULE_base_window_name              = 144
	SQLiteParserRULE_simple_func                   = 145
	SQLiteParserRULE_aggregate_func                = 146
	SQLiteParserRULE_table_function_name           = 147
	SQLiteParserRULE_any_name                      = 148
)

// IParseContext is an interface to support dynamic dispatch.
type IParseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	EOF() antlr.TerminalNode
	AllSql_stmt_list() []ISql_stmt_listContext
	Sql_stmt_list(i int) ISql_stmt_listContext

	// IsParseContext differentiates from other interfaces.
	IsParseContext()
}

type ParseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParseContext() *ParseContext {
	var p = new(ParseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
	return p
}

func InitEmptyParseContext(p *ParseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_parse
}

func (*ParseContext) IsParseContext() {}

func NewParseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParseContext {
	var p = new(ParseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_parse

	return p
}

func (s *ParseContext) GetParser() antlr.Parser { return s.parser }

func (s *ParseContext) EOF() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEOF, 0)
}

func (s *ParseContext) AllSql_stmt_list() []ISql_stmt_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_stmt_listContext); ok {
			len++
		}
	}

	tst := make([]ISql_stmt_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_stmt_listContext); ok {
			tst[i] = t.(ISql_stmt_listContext)
			i++
		}
	}

	return tst
}

func (s *ParseContext) Sql_stmt_list(i int) ISql_stmt_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmt_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmt_listContext)
}

func (s *ParseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterParse(s)
	}
}

func (s *ParseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitParse(s)
	}
}

func (s *ParseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitParse(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Parse() (localctx IParseContext) {
	localctx = NewParseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLiteParserRULE_parse)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(301)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&4618723480181932034) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&6345571875233465381) != 0) || ((int64((_la-130)) & ^0x3f) == 0 && ((int64(1)<<(_la-130))&35274777) != 0) {
		{
			p.SetState(298)
			p.Sql_stmt_list()
		}

		p.SetState(303)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(304)
		p.Match(SQLiteParserEOF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_stmt_listContext is an interface to support dynamic dispatch.
type ISql_stmt_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSql_stmt() []ISql_stmtContext
	Sql_stmt(i int) ISql_stmtContext
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode

	// IsSql_stmt_listContext differentiates from other interfaces.
	IsSql_stmt_listContext()
}

type Sql_stmt_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmt_listContext() *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
	return p
}

func InitEmptySql_stmt_listContext(p *Sql_stmt_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list
}

func (*Sql_stmt_listContext) IsSql_stmt_listContext() {}

func NewSql_stmt_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmt_listContext {
	var p = new(Sql_stmt_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt_list

	return p
}

func (s *Sql_stmt_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmt_listContext) AllSql_stmt() []ISql_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISql_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISql_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISql_stmtContext); ok {
			tst[i] = t.(ISql_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Sql_stmt_listContext) Sql_stmt(i int) ISql_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISql_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISql_stmtContext)
}

func (s *Sql_stmt_listContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Sql_stmt_listContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Sql_stmt_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmt_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmt_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSql_stmt_list(s)
	}
}

func (s *Sql_stmt_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSql_stmt_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt_list() (localctx ISql_stmt_listContext) {
	localctx = NewSql_stmt_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLiteParserRULE_sql_stmt_list)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(309)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserSCOL {
		{
			p.SetState(306)
			p.Match(SQLiteParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(312)
		p.Sql_stmt()
	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(314)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == SQLiteParserSCOL {
				{
					p.SetState(313)
					p.Match(SQLiteParserSCOL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(316)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(318)
				p.Sql_stmt()
			}

		}
		p.SetState(323)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 3, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(327)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(324)
				p.Match(SQLiteParserSCOL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(329)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISql_stmtContext is an interface to support dynamic dispatch.
type ISql_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Alter_database_stmt() IAlter_database_stmtContext
	Alter_table_stmt() IAlter_table_stmtContext
	Analyze_stmt() IAnalyze_stmtContext
	Attach_stmt() IAttach_stmtContext
	Begin_stmt() IBegin_stmtContext
	Commit_stmt() ICommit_stmtContext
	Create_database_stmt() ICreate_database_stmtContext
	Create_index_stmt() ICreate_index_stmtContext
	Create_table_stmt() ICreate_table_stmtContext
	Create_trigger_stmt() ICreate_trigger_stmtContext
	Create_view_stmt() ICreate_view_stmtContext
	Create_virtual_table_stmt() ICreate_virtual_table_stmtContext
	Delete_stmt() IDelete_stmtContext
	Delete_stmt_limited() IDelete_stmt_limitedContext
	Detach_stmt() IDetach_stmtContext
	Drop_database_stmt() IDrop_database_stmtContext
	Drop_index_stmt() IDrop_index_stmtContext
	Drop_table_stmt() IDrop_table_stmtContext
	Drop_trigger_stmt() IDrop_trigger_stmtContext
	Drop_view_stmt() IDrop_view_stmtContext
	Insert_stmt() IInsert_stmtContext
	Pragma_stmt() IPragma_stmtContext
	Reindex_stmt() IReindex_stmtContext
	Release_stmt() IRelease_stmtContext
	Rollback_stmt() IRollback_stmtContext
	Savepoint_stmt() ISavepoint_stmtContext
	Select_stmt() ISelect_stmtContext
	Update_stmt() IUpdate_stmtContext
	Update_stmt_limited() IUpdate_stmt_limitedContext
	Vacuum_stmt() IVacuum_stmtContext
	Copy_stmt() ICopy_stmtContext
	Truncate_stmt() ITruncate_stmtContext
	EXPLAIN_() antlr.TerminalNode
	QUERY_() antlr.TerminalNode
	PLAN_() antlr.TerminalNode

	// IsSql_stmtContext differentiates from other interfaces.
	IsSql_stmtContext()
}

type Sql_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_stmtContext() *Sql_stmtContext {
	var p = new(Sql_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
	return p
}

func InitEmptySql_stmtContext(p *Sql_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_sql_stmt
}

func (*Sql_stmtContext) IsSql_stmtContext() {}

func NewSql_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_stmtContext {
	var p = new(Sql_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_sql_stmt

	return p
}

func (s *Sql_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_stmtContext) Alter_database_stmt() IAlter_database_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_database_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_database_stmtContext)
}

func (s *Sql_stmtContext) Alter_table_stmt() IAlter_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAlter_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAlter_table_stmtContext)
}

func (s *Sql_stmtContext) Analyze_stmt() IAnalyze_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAnalyze_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAnalyze_stmtContext)
}

func (s *Sql_stmtContext) Attach_stmt() IAttach_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttach_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttach_stmtContext)
}

func (s *Sql_stmtContext) Begin_stmt() IBegin_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBegin_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBegin_stmtContext)
}

func (s *Sql_stmtContext) Commit_stmt() ICommit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommit_stmtContext)
}

func (s *Sql_stmtContext) Create_database_stmt() ICreate_database_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_database_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_database_stmtContext)
}

func (s *Sql_stmtContext) Create_index_stmt() ICreate_index_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_index_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_index_stmtContext)
}

func (s *Sql_stmtContext) Create_table_stmt() ICreate_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_table_stmtContext)
}

func (s *Sql_stmtContext) Create_trigger_stmt() ICreate_trigger_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_trigger_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_trigger_stmtContext)
}

func (s *Sql_stmtContext) Create_view_stmt() ICreate_view_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_view_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_view_stmtContext)
}

func (s *Sql_stmtContext) Create_virtual_table_stmt() ICreate_virtual_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICreate_virtual_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICreate_virtual_table_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt() IDelete_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Sql_stmtContext) Delete_stmt_limited() IDelete_stmt_limitedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmt_limitedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmt_limitedContext)
}

func (s *Sql_stmtContext) Detach_stmt() IDetach_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDetach_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDetach_stmtContext)
}

func (s *Sql_stmtContext) Drop_database_stmt() IDrop_database_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_database_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_database_stmtContext)
}

func (s *Sql_stmtContext) Drop_index_stmt() IDrop_index_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_index_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_index_stmtContext)
}

func (s *Sql_stmtContext) Drop_table_stmt() IDrop_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_table_stmtContext)
}

func (s *Sql_stmtContext) Drop_trigger_stmt() IDrop_trigger_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_trigger_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_trigger_stmtContext)
}

func (s *Sql_stmtContext) Drop_view_stmt() IDrop_view_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_view_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_view_stmtContext)
}

func (s *Sql_stmtContext) Insert_stmt() IInsert_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Sql_stmtContext) Pragma_stmt() IPragma_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_stmtContext)
}

func (s *Sql_stmtContext) Reindex_stmt() IReindex_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReindex_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReindex_stmtContext)
}

func (s *Sql_stmtContext) Release_stmt() IRelease_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRelease_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRelease_stmtContext)
}

func (s *Sql_stmtContext) Rollback_stmt() IRollback_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRollback_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRollback_stmtContext)
}

func (s *Sql_stmtContext) Savepoint_stmt() ISavepoint_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_stmtContext)
}

func (s *Sql_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt() IUpdate_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Sql_stmtContext) Update_stmt_limited() IUpdate_stmt_limitedContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmt_limitedContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmt_limitedContext)
}

func (s *Sql_stmtContext) Vacuum_stmt() IVacuum_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVacuum_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVacuum_stmtContext)
}

func (s *Sql_stmtContext) Copy_stmt() ICopy_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_stmtContext)
}

func (s *Sql_stmtContext) Truncate_stmt() ITruncate_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITruncate_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITruncate_stmtContext)
}

func (s *Sql_stmtContext) EXPLAIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXPLAIN_, 0)
}

func (s *Sql_stmtContext) QUERY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserQUERY_, 0)
}

func (s *Sql_stmtContext) PLAN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLAN_, 0)
}

func (s *Sql_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSql_stmt(s)
	}
}

func (s *Sql_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSql_stmt(s)
	}
}

func (s *Sql_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSql_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Sql_stmt() (localctx ISql_stmtContext) {
	localctx = NewSql_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLiteParserRULE_sql_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(335)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserEXPLAIN_ {
		{
			p.SetState(330)
			p.Match(SQLiteParserEXPLAIN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(333)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserQUERY_ {
			{
				p.SetState(331)
				p.Match(SQLiteParserQUERY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(332)
				p.Match(SQLiteParserPLAN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	}
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(337)
			p.Alter_database_stmt()
		}

	case 2:
		{
			p.SetState(338)
			p.Alter_table_stmt()
		}

	case 3:
		{
			p.SetState(339)
			p.Analyze_stmt()
		}

	case 4:
		{
			p.SetState(340)
			p.Attach_stmt()
		}

	case 5:
		{
			p.SetState(341)
			p.Begin_stmt()
		}

	case 6:
		{
			p.SetState(342)
			p.Commit_stmt()
		}

	case 7:
		{
			p.SetState(343)
			p.Create_database_stmt()
		}

	case 8:
		{
			p.SetState(344)
			p.Create_index_stmt()
		}

	case 9:
		{
			p.SetState(345)
			p.Create_table_stmt()
		}

	case 10:
		{
			p.SetState(346)
			p.Create_trigger_stmt()
		}

	case 11:
		{
			p.SetState(347)
			p.Create_view_stmt()
		}

	case 12:
		{
			p.SetState(348)
			p.Create_virtual_table_stmt()
		}

	case 13:
		{
			p.SetState(349)
			p.Delete_stmt()
		}

	case 14:
		{
			p.SetState(350)
			p.Delete_stmt_limited()
		}

	case 15:
		{
			p.SetState(351)
			p.Detach_stmt()
		}

	case 16:
		{
			p.SetState(352)
			p.Drop_database_stmt()
		}

	case 17:
		{
			p.SetState(353)
			p.Drop_index_stmt()
		}

	case 18:
		{
			p.SetState(354)
			p.Drop_table_stmt()
		}

	case 19:
		{
			p.SetState(355)
			p.Drop_trigger_stmt()
		}

	case 20:
		{
			p.SetState(356)
			p.Drop_view_stmt()
		}

	case 21:
		{
			p.SetState(357)
			p.Insert_stmt()
		}

	case 22:
		{
			p.SetState(358)
			p.Pragma_stmt()
		}

	case 23:
		{
			p.SetState(359)
			p.Reindex_stmt()
		}

	case 24:
		{
			p.SetState(360)
			p.Release_stmt()
		}

	case 25:
		{
			p.SetState(361)
			p.Rollback_stmt()
		}

	case 26:
		{
			p.SetState(362)
			p.Savepoint_stmt()
		}

	case 27:
		{
			p.SetState(363)
			p.Select_stmt()
		}

	case 28:
		{
			p.SetState(364)
			p.Update_stmt()
		}

	case 29:
		{
			p.SetState(365)
			p.Update_stmt_limited()
		}

	case 30:
		{
			p.SetState(366)
			p.Vacuum_stmt()
		}

	case 31:
		{
			p.SetState(367)
			p.Copy_stmt()
		}

	case 32:
		{
			p.SetState(368)
			p.Truncate_stmt()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_database_stmtContext is an interface to support dynamic dispatch.
type IAlter_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ALTER_() antlr.TerminalNode
	DATABASE_() antlr.TerminalNode
	Database_name() IDatabase_nameContext
	Rename_database_to() IRename_database_toContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsAlter_database_stmtContext differentiates from other interfaces.
	IsAlter_database_stmtContext()
}

type Alter_database_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_database_stmtContext() *Alter_database_stmtContext {
	var p = new(Alter_database_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_database_stmt
	return p
}

func InitEmptyAlter_database_stmtContext(p *Alter_database_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_database_stmt
}

func (*Alter_database_stmtContext) IsAlter_database_stmtContext() {}

func NewAlter_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_database_stmtContext {
	var p = new(Alter_database_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alter_database_stmt

	return p
}

func (s *Alter_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_database_stmtContext) ALTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALTER_, 0)
}

func (s *Alter_database_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Alter_database_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Alter_database_stmtContext) Rename_database_to() IRename_database_toContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRename_database_toContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRename_database_toContext)
}

func (s *Alter_database_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Alter_database_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Alter_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAlter_database_stmt(s)
	}
}

func (s *Alter_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAlter_database_stmt(s)
	}
}

func (s *Alter_database_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAlter_database_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alter_database_stmt() (localctx IAlter_database_stmtContext) {
	localctx = NewAlter_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLiteParserRULE_alter_database_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(371)
		p.Match(SQLiteParserALTER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(372)
		p.Match(SQLiteParserDATABASE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(376)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(373)
			p.Schema_name()
		}
		{
			p.SetState(374)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(378)
		p.Database_name()
	}

	{
		p.SetState(379)
		p.Rename_database_to()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRename_database_toContext is an interface to support dynamic dispatch.
type IRename_database_toContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNew_database_name returns the new_database_name rule contexts.
	GetNew_database_name() IDatabase_nameContext

	// SetNew_database_name sets the new_database_name rule contexts.
	SetNew_database_name(IDatabase_nameContext)

	// Getter signatures
	RENAME_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	Database_name() IDatabase_nameContext

	// IsRename_database_toContext differentiates from other interfaces.
	IsRename_database_toContext()
}

type Rename_database_toContext struct {
	antlr.BaseParserRuleContext
	parser            antlr.Parser
	new_database_name IDatabase_nameContext
}

func NewEmptyRename_database_toContext() *Rename_database_toContext {
	var p = new(Rename_database_toContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_database_to
	return p
}

func InitEmptyRename_database_toContext(p *Rename_database_toContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_database_to
}

func (*Rename_database_toContext) IsRename_database_toContext() {}

func NewRename_database_toContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_database_toContext {
	var p = new(Rename_database_toContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rename_database_to

	return p
}

func (s *Rename_database_toContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_database_toContext) GetNew_database_name() IDatabase_nameContext {
	return s.new_database_name
}

func (s *Rename_database_toContext) SetNew_database_name(v IDatabase_nameContext) {
	s.new_database_name = v
}

func (s *Rename_database_toContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *Rename_database_toContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Rename_database_toContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Rename_database_toContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_database_toContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rename_database_toContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRename_database_to(s)
	}
}

func (s *Rename_database_toContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRename_database_to(s)
	}
}

func (s *Rename_database_toContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRename_database_to(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rename_database_to() (localctx IRename_database_toContext) {
	localctx = NewRename_database_toContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLiteParserRULE_rename_database_to)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(381)
		p.Match(SQLiteParserRENAME_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(382)
		p.Match(SQLiteParserTO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(383)

		var _x = p.Database_name()

		localctx.(*Rename_database_toContext).new_database_name = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAlter_table_stmtContext is an interface to support dynamic dispatch.
type IAlter_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTarget_table_name returns the target_table_name rule contexts.
	GetTarget_table_name() ITable_nameContext

	// SetTarget_table_name sets the target_table_name rule contexts.
	SetTarget_table_name(ITable_nameContext)

	// Getter signatures
	ALTER_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	Table_name() ITable_nameContext
	Rename_table_to() IRename_table_toContext
	Rename_table_colum() IRename_table_columContext
	Add_table_index() IAdd_table_indexContext
	Add_table_column() IAdd_table_columnContext
	Drop_table_column() IDrop_table_columnContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsAlter_table_stmtContext differentiates from other interfaces.
	IsAlter_table_stmtContext()
}

type Alter_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser            antlr.Parser
	target_table_name ITable_nameContext
}

func NewEmptyAlter_table_stmtContext() *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
	return p
}

func InitEmptyAlter_table_stmtContext(p *Alter_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt
}

func (*Alter_table_stmtContext) IsAlter_table_stmtContext() {}

func NewAlter_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_stmtContext {
	var p = new(Alter_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alter_table_stmt

	return p
}

func (s *Alter_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_stmtContext) GetTarget_table_name() ITable_nameContext {
	return s.target_table_name
}

func (s *Alter_table_stmtContext) SetTarget_table_name(v ITable_nameContext) { s.target_table_name = v }

func (s *Alter_table_stmtContext) ALTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALTER_, 0)
}

func (s *Alter_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Alter_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_table_stmtContext) Rename_table_to() IRename_table_toContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRename_table_toContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRename_table_toContext)
}

func (s *Alter_table_stmtContext) Rename_table_colum() IRename_table_columContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRename_table_columContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRename_table_columContext)
}

func (s *Alter_table_stmtContext) Add_table_index() IAdd_table_indexContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdd_table_indexContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdd_table_indexContext)
}

func (s *Alter_table_stmtContext) Add_table_column() IAdd_table_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAdd_table_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAdd_table_columnContext)
}

func (s *Alter_table_stmtContext) Drop_table_column() IDrop_table_columnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDrop_table_columnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDrop_table_columnContext)
}

func (s *Alter_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Alter_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Alter_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAlter_table_stmt(s)
	}
}

func (s *Alter_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAlter_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alter_table_stmt() (localctx IAlter_table_stmtContext) {
	localctx = NewAlter_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SQLiteParserRULE_alter_table_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(385)
		p.Match(SQLiteParserALTER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(386)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(390)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(387)
			p.Schema_name()
		}
		{
			p.SetState(388)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(392)

		var _x = p.Table_name()

		localctx.(*Alter_table_stmtContext).target_table_name = _x
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(393)
			p.Rename_table_to()
		}

	case 2:
		{
			p.SetState(394)
			p.Rename_table_colum()
		}

	case 3:
		{
			p.SetState(395)
			p.Add_table_index()
		}

	case 4:
		{
			p.SetState(396)
			p.Add_table_column()
		}

	case 5:
		{
			p.SetState(397)
			p.Drop_table_column()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRename_table_toContext is an interface to support dynamic dispatch.
type IRename_table_toContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RENAME_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	Table_name() ITable_nameContext

	// IsRename_table_toContext differentiates from other interfaces.
	IsRename_table_toContext()
}

type Rename_table_toContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRename_table_toContext() *Rename_table_toContext {
	var p = new(Rename_table_toContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_table_to
	return p
}

func InitEmptyRename_table_toContext(p *Rename_table_toContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_table_to
}

func (*Rename_table_toContext) IsRename_table_toContext() {}

func NewRename_table_toContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_table_toContext {
	var p = new(Rename_table_toContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rename_table_to

	return p
}

func (s *Rename_table_toContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_table_toContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *Rename_table_toContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Rename_table_toContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Rename_table_toContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_table_toContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rename_table_toContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRename_table_to(s)
	}
}

func (s *Rename_table_toContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRename_table_to(s)
	}
}

func (s *Rename_table_toContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRename_table_to(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rename_table_to() (localctx IRename_table_toContext) {
	localctx = NewRename_table_toContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLiteParserRULE_rename_table_to)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(400)
		p.Match(SQLiteParserRENAME_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(401)
		p.Match(SQLiteParserTO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(402)
		p.Table_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRename_table_columContext is an interface to support dynamic dispatch.
type IRename_table_columContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOld_column_name returns the old_column_name rule contexts.
	GetOld_column_name() IColumn_nameContext

	// GetNew_column_name returns the new_column_name rule contexts.
	GetNew_column_name() IColumn_nameContext

	// SetOld_column_name sets the old_column_name rule contexts.
	SetOld_column_name(IColumn_nameContext)

	// SetNew_column_name sets the new_column_name rule contexts.
	SetNew_column_name(IColumn_nameContext)

	// Getter signatures
	RENAME_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	COLUMN_() antlr.TerminalNode

	// IsRename_table_columContext differentiates from other interfaces.
	IsRename_table_columContext()
}

type Rename_table_columContext struct {
	antlr.BaseParserRuleContext
	parser          antlr.Parser
	old_column_name IColumn_nameContext
	new_column_name IColumn_nameContext
}

func NewEmptyRename_table_columContext() *Rename_table_columContext {
	var p = new(Rename_table_columContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_table_colum
	return p
}

func InitEmptyRename_table_columContext(p *Rename_table_columContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rename_table_colum
}

func (*Rename_table_columContext) IsRename_table_columContext() {}

func NewRename_table_columContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_table_columContext {
	var p = new(Rename_table_columContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rename_table_colum

	return p
}

func (s *Rename_table_columContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_table_columContext) GetOld_column_name() IColumn_nameContext {
	return s.old_column_name
}

func (s *Rename_table_columContext) GetNew_column_name() IColumn_nameContext {
	return s.new_column_name
}

func (s *Rename_table_columContext) SetOld_column_name(v IColumn_nameContext) { s.old_column_name = v }

func (s *Rename_table_columContext) SetNew_column_name(v IColumn_nameContext) { s.new_column_name = v }

func (s *Rename_table_columContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *Rename_table_columContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Rename_table_columContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Rename_table_columContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Rename_table_columContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *Rename_table_columContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_table_columContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rename_table_columContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRename_table_colum(s)
	}
}

func (s *Rename_table_columContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRename_table_colum(s)
	}
}

func (s *Rename_table_columContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRename_table_colum(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rename_table_colum() (localctx IRename_table_columContext) {
	localctx = NewRename_table_columContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLiteParserRULE_rename_table_colum)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(404)
		p.Match(SQLiteParserRENAME_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(406)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(405)
			p.Match(SQLiteParserCOLUMN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(408)

		var _x = p.Column_name()

		localctx.(*Rename_table_columContext).old_column_name = _x
	}
	{
		p.SetState(409)
		p.Match(SQLiteParserTO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(410)

		var _x = p.Column_name()

		localctx.(*Rename_table_columContext).new_column_name = _x
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdd_table_columnContext is an interface to support dynamic dispatch.
type IAdd_table_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ADD_() antlr.TerminalNode
	Column_def() IColumn_defContext
	COLUMN_() antlr.TerminalNode

	// IsAdd_table_columnContext differentiates from other interfaces.
	IsAdd_table_columnContext()
}

type Add_table_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_table_columnContext() *Add_table_columnContext {
	var p = new(Add_table_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_add_table_column
	return p
}

func InitEmptyAdd_table_columnContext(p *Add_table_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_add_table_column
}

func (*Add_table_columnContext) IsAdd_table_columnContext() {}

func NewAdd_table_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_table_columnContext {
	var p = new(Add_table_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_add_table_column

	return p
}

func (s *Add_table_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Add_table_columnContext) ADD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserADD_, 0)
}

func (s *Add_table_columnContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Add_table_columnContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *Add_table_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_table_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Add_table_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAdd_table_column(s)
	}
}

func (s *Add_table_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAdd_table_column(s)
	}
}

func (s *Add_table_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAdd_table_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Add_table_column() (localctx IAdd_table_columnContext) {
	localctx = NewAdd_table_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLiteParserRULE_add_table_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(412)
		p.Match(SQLiteParserADD_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(413)
			p.Match(SQLiteParserCOLUMN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(416)
		p.Column_def()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAdd_table_indexContext is an interface to support dynamic dispatch.
type IAdd_table_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ADD_() antlr.TerminalNode
	Column_constraint() IColumn_constraintContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAdd_table_indexContext differentiates from other interfaces.
	IsAdd_table_indexContext()
}

type Add_table_indexContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_table_indexContext() *Add_table_indexContext {
	var p = new(Add_table_indexContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_add_table_index
	return p
}

func InitEmptyAdd_table_indexContext(p *Add_table_indexContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_add_table_index
}

func (*Add_table_indexContext) IsAdd_table_indexContext() {}

func NewAdd_table_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_table_indexContext {
	var p = new(Add_table_indexContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_add_table_index

	return p
}

func (s *Add_table_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Add_table_indexContext) ADD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserADD_, 0)
}

func (s *Add_table_indexContext) Column_constraint() IColumn_constraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Add_table_indexContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Add_table_indexContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Add_table_indexContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Add_table_indexContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Add_table_indexContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Add_table_indexContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Add_table_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_table_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Add_table_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAdd_table_index(s)
	}
}

func (s *Add_table_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAdd_table_index(s)
	}
}

func (s *Add_table_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAdd_table_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Add_table_index() (localctx IAdd_table_indexContext) {
	localctx = NewAdd_table_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLiteParserRULE_add_table_index)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(418)
		p.Match(SQLiteParserADD_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(419)
		p.Column_constraint()
	}
	{
		p.SetState(420)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(421)
		p.Column_name()
	}
	p.SetState(426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(422)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(423)
			p.Column_name()
		}

		p.SetState(428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(429)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_table_columnContext is an interface to support dynamic dispatch.
type IDrop_table_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	Column_name() IColumn_nameContext
	COLUMN_() antlr.TerminalNode

	// IsDrop_table_columnContext differentiates from other interfaces.
	IsDrop_table_columnContext()
}

type Drop_table_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_table_columnContext() *Drop_table_columnContext {
	var p = new(Drop_table_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_column
	return p
}

func InitEmptyDrop_table_columnContext(p *Drop_table_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_column
}

func (*Drop_table_columnContext) IsDrop_table_columnContext() {}

func NewDrop_table_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_columnContext {
	var p = new(Drop_table_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_table_column

	return p
}

func (s *Drop_table_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_columnContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_table_columnContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Drop_table_columnContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *Drop_table_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_table_column(s)
	}
}

func (s *Drop_table_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_table_column(s)
	}
}

func (s *Drop_table_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_table_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_table_column() (localctx IDrop_table_columnContext) {
	localctx = NewDrop_table_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLiteParserRULE_drop_table_column)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(431)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(433)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(432)
			p.Match(SQLiteParserCOLUMN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(435)
		p.Column_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAnalyze_stmtContext is an interface to support dynamic dispatch.
type IAnalyze_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ANALYZE_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	Table_or_index_name() ITable_or_index_nameContext
	DOT() antlr.TerminalNode

	// IsAnalyze_stmtContext differentiates from other interfaces.
	IsAnalyze_stmtContext()
}

type Analyze_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_stmtContext() *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
	return p
}

func InitEmptyAnalyze_stmtContext(p *Analyze_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_analyze_stmt
}

func (*Analyze_stmtContext) IsAnalyze_stmtContext() {}

func NewAnalyze_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_stmtContext {
	var p = new(Analyze_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_analyze_stmt

	return p
}

func (s *Analyze_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_stmtContext) ANALYZE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserANALYZE_, 0)
}

func (s *Analyze_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Analyze_stmtContext) Table_or_index_name() ITable_or_index_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_index_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_index_nameContext)
}

func (s *Analyze_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Analyze_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAnalyze_stmt(s)
	}
}

func (s *Analyze_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAnalyze_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Analyze_stmt() (localctx IAnalyze_stmtContext) {
	localctx = NewAnalyze_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLiteParserRULE_analyze_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(437)
		p.Match(SQLiteParserANALYZE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(445)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(438)
			p.Schema_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) == 2 {
		p.SetState(442)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(439)
				p.Schema_name()
			}
			{
				p.SetState(440)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(444)
			p.Table_or_index_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAttach_stmtContext is an interface to support dynamic dispatch.
type IAttach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ATTACH_() antlr.TerminalNode
	Expr() IExprContext
	AS_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DATABASE_() antlr.TerminalNode

	// IsAttach_stmtContext differentiates from other interfaces.
	IsAttach_stmtContext()
}

type Attach_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttach_stmtContext() *Attach_stmtContext {
	var p = new(Attach_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
	return p
}

func InitEmptyAttach_stmtContext(p *Attach_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_attach_stmt
}

func (*Attach_stmtContext) IsAttach_stmtContext() {}

func NewAttach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attach_stmtContext {
	var p = new(Attach_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_attach_stmt

	return p
}

func (s *Attach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Attach_stmtContext) ATTACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserATTACH_, 0)
}

func (s *Attach_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Attach_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Attach_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Attach_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Attach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAttach_stmt(s)
	}
}

func (s *Attach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAttach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Attach_stmt() (localctx IAttach_stmtContext) {
	localctx = NewAttach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLiteParserRULE_attach_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(SQLiteParserATTACH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(449)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(448)
			p.Match(SQLiteParserDATABASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(451)
		p.expr(0)
	}
	{
		p.SetState(452)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(453)
		p.Schema_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBegin_stmtContext is an interface to support dynamic dispatch.
type IBegin_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BEGIN_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode
	EXCLUSIVE_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	Transaction_name() ITransaction_nameContext

	// IsBegin_stmtContext differentiates from other interfaces.
	IsBegin_stmtContext()
}

type Begin_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_stmtContext() *Begin_stmtContext {
	var p = new(Begin_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
	return p
}

func InitEmptyBegin_stmtContext(p *Begin_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_begin_stmt
}

func (*Begin_stmtContext) IsBegin_stmtContext() {}

func NewBegin_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_stmtContext {
	var p = new(Begin_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_begin_stmt

	return p
}

func (s *Begin_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_stmtContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *Begin_stmtContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *Begin_stmtContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *Begin_stmtContext) EXCLUSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUSIVE_, 0)
}

func (s *Begin_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Begin_stmtContext) Transaction_name() ITransaction_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITransaction_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITransaction_nameContext)
}

func (s *Begin_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitBegin_stmt(s)
	}
}

func (s *Begin_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitBegin_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Begin_stmt() (localctx IBegin_stmtContext) {
	localctx = NewBegin_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLiteParserRULE_begin_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(455)
		p.Match(SQLiteParserBEGIN_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(456)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-61)) & ^0x3f) == 0 && ((int64(1)<<(_la-61))&33556481) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 21, p.GetParserRuleContext()) == 1 {
		p.SetState(460)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(459)
				p.Match(SQLiteParserTRANSACTION_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(463)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(462)
				p.Transaction_name()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommit_stmtContext is an interface to support dynamic dispatch.
type ICommit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMIT_() antlr.TerminalNode
	END_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode

	// IsCommit_stmtContext differentiates from other interfaces.
	IsCommit_stmtContext()
}

type Commit_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_stmtContext() *Commit_stmtContext {
	var p = new(Commit_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
	return p
}

func InitEmptyCommit_stmtContext(p *Commit_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_commit_stmt
}

func (*Commit_stmtContext) IsCommit_stmtContext() {}

func NewCommit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_stmtContext {
	var p = new(Commit_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_commit_stmt

	return p
}

func (s *Commit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_stmtContext) COMMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMIT_, 0)
}

func (s *Commit_stmtContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *Commit_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Commit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCommit_stmt(s)
	}
}

func (s *Commit_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCommit_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Commit_stmt() (localctx ICommit_stmtContext) {
	localctx = NewCommit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLiteParserRULE_commit_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(467)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserCOMMIT_ || _la == SQLiteParserEND_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTRANSACTION_ {
		{
			p.SetState(468)
			p.Match(SQLiteParserTRANSACTION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRollback_stmtContext is an interface to support dynamic dispatch.
type IRollback_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ROLLBACK_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext
	SAVEPOINT_() antlr.TerminalNode

	// IsRollback_stmtContext differentiates from other interfaces.
	IsRollback_stmtContext()
}

type Rollback_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_stmtContext() *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
	return p
}

func InitEmptyRollback_stmtContext(p *Rollback_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_rollback_stmt
}

func (*Rollback_stmtContext) IsRollback_stmtContext() {}

func NewRollback_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_stmtContext {
	var p = new(Rollback_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_rollback_stmt

	return p
}

func (s *Rollback_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Rollback_stmtContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *Rollback_stmtContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *Rollback_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Rollback_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Rollback_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRollback_stmt(s)
	}
}

func (s *Rollback_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRollback_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Rollback_stmt() (localctx IRollback_stmtContext) {
	localctx = NewRollback_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLiteParserRULE_rollback_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(471)
		p.Match(SQLiteParserROLLBACK_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(473)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTRANSACTION_ {
		{
			p.SetState(472)
			p.Match(SQLiteParserTRANSACTION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(480)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTO_ {
		{
			p.SetState(475)
			p.Match(SQLiteParserTO_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(477)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(476)
				p.Match(SQLiteParserSAVEPOINT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(479)
			p.Savepoint_name()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISavepoint_stmtContext is an interface to support dynamic dispatch.
type ISavepoint_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SAVEPOINT_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext

	// IsSavepoint_stmtContext differentiates from other interfaces.
	IsSavepoint_stmtContext()
}

type Savepoint_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_stmtContext() *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
	return p
}

func InitEmptySavepoint_stmtContext(p *Savepoint_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt
}

func (*Savepoint_stmtContext) IsSavepoint_stmtContext() {}

func NewSavepoint_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_stmtContext {
	var p = new(Savepoint_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_stmt

	return p
}

func (s *Savepoint_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Savepoint_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Savepoint_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSavepoint_stmt(s)
	}
}

func (s *Savepoint_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSavepoint_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_stmt() (localctx ISavepoint_stmtContext) {
	localctx = NewSavepoint_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SQLiteParserRULE_savepoint_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(482)
		p.Match(SQLiteParserSAVEPOINT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(483)
		p.Savepoint_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRelease_stmtContext is an interface to support dynamic dispatch.
type IRelease_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RELEASE_() antlr.TerminalNode
	Savepoint_name() ISavepoint_nameContext
	SAVEPOINT_() antlr.TerminalNode

	// IsRelease_stmtContext differentiates from other interfaces.
	IsRelease_stmtContext()
}

type Release_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_stmtContext() *Release_stmtContext {
	var p = new(Release_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
	return p
}

func InitEmptyRelease_stmtContext(p *Release_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_release_stmt
}

func (*Release_stmtContext) IsRelease_stmtContext() {}

func NewRelease_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_stmtContext {
	var p = new(Release_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_release_stmt

	return p
}

func (s *Release_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_stmtContext) RELEASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRELEASE_, 0)
}

func (s *Release_stmtContext) Savepoint_name() ISavepoint_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISavepoint_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISavepoint_nameContext)
}

func (s *Release_stmtContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *Release_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRelease_stmt(s)
	}
}

func (s *Release_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRelease_stmt(s)
	}
}

func (s *Release_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRelease_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Release_stmt() (localctx IRelease_stmtContext) {
	localctx = NewRelease_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLiteParserRULE_release_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Match(SQLiteParserRELEASE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(486)
			p.Match(SQLiteParserSAVEPOINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(489)
		p.Savepoint_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_index_stmtContext is an interface to support dynamic dispatch.
type ICreate_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	INDEX_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	ON_() antlr.TerminalNode
	Table_name() ITable_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	If_not_exists() IIf_not_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	Expr() IExprContext

	// IsCreate_index_stmtContext differentiates from other interfaces.
	IsCreate_index_stmtContext()
}

type Create_index_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_index_stmtContext() *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
	return p
}

func InitEmptyCreate_index_stmtContext(p *Create_index_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_index_stmt
}

func (*Create_index_stmtContext) IsCreate_index_stmtContext() {}

func NewCreate_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_index_stmtContext {
	var p = new(Create_index_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_index_stmt

	return p
}

func (s *Create_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_index_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_index_stmtContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *Create_index_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Create_index_stmtContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Create_index_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_index_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_index_stmtContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Create_index_stmtContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Create_index_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_index_stmtContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Create_index_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_index_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_index_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_index_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_index_stmtContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Create_index_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_index_stmt(s)
	}
}

func (s *Create_index_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_index_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_index_stmt() (localctx ICreate_index_stmtContext) {
	localctx = NewCreate_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLiteParserRULE_create_index_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(491)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(493)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserUNIQUE_ {
		{
			p.SetState(492)
			p.Match(SQLiteParserUNIQUE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(495)
		p.Match(SQLiteParserINDEX_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(496)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(499)
			p.Schema_name()
		}
		{
			p.SetState(500)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(504)
		p.Index_name()
	}
	{
		p.SetState(505)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(506)
		p.Table_name()
	}
	{
		p.SetState(507)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(508)
		p.Indexed_column()
	}
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(509)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(510)
			p.Indexed_column()
		}

		p.SetState(515)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(516)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(517)
			p.Match(SQLiteParserWHERE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(518)
			p.expr(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndexed_columnContext is an interface to support dynamic dispatch.
type IIndexed_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_name() IColumn_nameContext
	Expr() IExprContext
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Asc_desc() IAsc_descContext

	// IsIndexed_columnContext differentiates from other interfaces.
	IsIndexed_columnContext()
}

type Indexed_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexed_columnContext() *Indexed_columnContext {
	var p = new(Indexed_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
	return p
}

func InitEmptyIndexed_columnContext(p *Indexed_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_indexed_column
}

func (*Indexed_columnContext) IsIndexed_columnContext() {}

func NewIndexed_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Indexed_columnContext {
	var p = new(Indexed_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_indexed_column

	return p
}

func (s *Indexed_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Indexed_columnContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Indexed_columnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Indexed_columnContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Indexed_columnContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Indexed_columnContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Indexed_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Indexed_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Indexed_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIndexed_column(s)
	}
}

func (s *Indexed_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIndexed_column(s)
	}
}

func (s *Indexed_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIndexed_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Indexed_column() (localctx IIndexed_columnContext) {
	localctx = NewIndexed_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLiteParserRULE_indexed_column)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(521)
			p.Column_name()
		}

	case 2:
		{
			p.SetState(522)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOLLATE_ {
		{
			p.SetState(525)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(526)
			p.Collation_name()
		}

	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(529)
			p.Asc_desc()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_database_stmtContext is an interface to support dynamic dispatch.
type ICreate_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	DATABASE_() antlr.TerminalNode
	Database_name() IDatabase_nameContext
	If_not_exists() IIf_not_existsContext

	// IsCreate_database_stmtContext differentiates from other interfaces.
	IsCreate_database_stmtContext()
}

type Create_database_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_stmtContext() *Create_database_stmtContext {
	var p = new(Create_database_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_database_stmt
	return p
}

func InitEmptyCreate_database_stmtContext(p *Create_database_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_database_stmt
}

func (*Create_database_stmtContext) IsCreate_database_stmtContext() {}

func NewCreate_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_stmtContext {
	var p = new(Create_database_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_database_stmt

	return p
}

func (s *Create_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_database_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Create_database_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Create_database_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_database_stmt(s)
	}
}

func (s *Create_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_database_stmt(s)
	}
}

func (s *Create_database_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_database_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_database_stmt() (localctx ICreate_database_stmtContext) {
	localctx = NewCreate_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLiteParserRULE_create_database_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(532)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(533)
		p.Match(SQLiteParserDATABASE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(534)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(537)
		p.Database_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_not_existsContext is an interface to support dynamic dispatch.
type IIf_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode

	// IsIf_not_existsContext differentiates from other interfaces.
	IsIf_not_existsContext()
}

type If_not_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_not_existsContext() *If_not_existsContext {
	var p = new(If_not_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_if_not_exists
	return p
}

func InitEmptyIf_not_existsContext(p *If_not_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_if_not_exists
}

func (*If_not_existsContext) IsIf_not_existsContext() {}

func NewIf_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_not_existsContext {
	var p = new(If_not_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_if_not_exists

	return p
}

func (s *If_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_not_existsContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *If_not_existsContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *If_not_existsContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *If_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIf_not_exists(s)
	}
}

func (s *If_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIf_not_exists(s)
	}
}

func (s *If_not_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIf_not_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) If_not_exists() (localctx IIf_not_existsContext) {
	localctx = NewIf_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLiteParserRULE_if_not_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(539)
		p.Match(SQLiteParserIF_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(540)
		p.Match(SQLiteParserNOT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(541)
		p.Match(SQLiteParserEXISTS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRow_ROW_ID returns the row_ROW_ID token.
	GetRow_ROW_ID() antlr.Token

	// SetRow_ROW_ID sets the row_ROW_ID token.
	SetRow_ROW_ID(antlr.Token)

	// Getter signatures
	CREATE_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	Table_name() ITable_nameContext
	AllOPEN_PAR() []antlr.TerminalNode
	OPEN_PAR(i int) antlr.TerminalNode
	AllColumn_def() []IColumn_defContext
	Column_def(i int) IColumn_defContext
	AllCLOSE_PAR() []antlr.TerminalNode
	CLOSE_PAR(i int) antlr.TerminalNode
	AS_() antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	If_not_exists() IIf_not_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllTable_constraint() []ITable_constraintContext
	Table_constraint(i int) ITable_constraintContext
	WITHOUT_() antlr.TerminalNode
	WITH_() antlr.TerminalNode
	With_param() IWith_paramContext
	IDENTIFIER() antlr.TerminalNode

	// IsCreate_table_stmtContext differentiates from other interfaces.
	IsCreate_table_stmtContext()
}

type Create_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser     antlr.Parser
	row_ROW_ID antlr.Token
}

func NewEmptyCreate_table_stmtContext() *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
	return p
}

func InitEmptyCreate_table_stmtContext(p *Create_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_table_stmt
}

func (*Create_table_stmtContext) IsCreate_table_stmtContext() {}

func NewCreate_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_table_stmtContext {
	var p = new(Create_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_table_stmt

	return p
}

func (s *Create_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_table_stmtContext) GetRow_ROW_ID() antlr.Token { return s.row_ROW_ID }

func (s *Create_table_stmtContext) SetRow_ROW_ID(v antlr.Token) { s.row_ROW_ID = v }

func (s *Create_table_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Create_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_table_stmtContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Create_table_stmtContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Create_table_stmtContext) AllColumn_def() []IColumn_defContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_defContext); ok {
			len++
		}
	}

	tst := make([]IColumn_defContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_defContext); ok {
			tst[i] = t.(IColumn_defContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Column_def(i int) IColumn_defContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Create_table_stmtContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Create_table_stmtContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Create_table_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Create_table_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_table_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_table_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_table_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_table_stmtContext) AllTable_constraint() []ITable_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_constraintContext); ok {
			len++
		}
	}

	tst := make([]ITable_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_constraintContext); ok {
			tst[i] = t.(ITable_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Create_table_stmtContext) Table_constraint(i int) ITable_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Create_table_stmtContext) WITHOUT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITHOUT_, 0)
}

func (s *Create_table_stmtContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *Create_table_stmtContext) With_param() IWith_paramContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_paramContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_paramContext)
}

func (s *Create_table_stmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Create_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_table_stmt(s)
	}
}

func (s *Create_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_table_stmt() (localctx ICreate_table_stmtContext) {
	localctx = NewCreate_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLiteParserRULE_create_table_stmt)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(544)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(547)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(548)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(554)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(551)
			p.Schema_name()
		}
		{
			p.SetState(552)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(556)
		p.Table_name()
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR:
		{
			p.SetState(557)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(558)
			p.Column_def()
		}
		p.SetState(563)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1+1 {
				{
					p.SetState(559)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(560)
					p.Column_def()
				}

			}
			p.SetState(565)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(570)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(566)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(567)
				p.Table_constraint()
			}

			p.SetState(572)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(573)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(588)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(574)
				p.Match(SQLiteParserWITHOUT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(575)

				var _m = p.Match(SQLiteParserIDENTIFIER)

				localctx.(*Create_table_stmtContext).row_ROW_ID = _m
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(576)
				p.Match(SQLiteParserWITH_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(577)
				p.Match(SQLiteParserOPEN_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(578)
				p.With_param()
			}
			p.SetState(583)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1+1 {
					{
						p.SetState(579)
						p.Match(SQLiteParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(580)
						p.Column_def()
					}

				}
				p.SetState(585)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}
			{
				p.SetState(586)
				p.Match(SQLiteParserCLOSE_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case SQLiteParserAS_:
		{
			p.SetState(590)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(591)
			p.Select_stmt()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_defContext is an interface to support dynamic dispatch.
type IColumn_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Column_name() IColumn_nameContext
	Type_name() IType_nameContext
	AllColumn_constraint() []IColumn_constraintContext
	Column_constraint(i int) IColumn_constraintContext

	// IsColumn_defContext differentiates from other interfaces.
	IsColumn_defContext()
}

type Column_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_defContext() *Column_defContext {
	var p = new(Column_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
	return p
}

func InitEmptyColumn_defContext(p *Column_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_def
}

func (*Column_defContext) IsColumn_defContext() {}

func NewColumn_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_defContext {
	var p = new(Column_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_def

	return p
}

func (s *Column_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_defContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_defContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *Column_defContext) AllColumn_constraint() []IColumn_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			len++
		}
	}

	tst := make([]IColumn_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_constraintContext); ok {
			tst[i] = t.(IColumn_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Column_defContext) Column_constraint(i int) IColumn_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_def(s)
	}
}

func (s *Column_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_def(s)
	}
}

func (s *Column_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_def() (localctx IColumn_defContext) {
	localctx = NewColumn_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLiteParserRULE_column_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.Column_name()
	}
	p.SetState(596)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(595)
			p.Type_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(601)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&577692213916467200) != 0) || ((int64((_la-106)) & ^0x3f) == 0 && ((int64(1)<<(_la-106))&1099511662597) != 0) || _la == SQLiteParserGENERATED_ {
		{
			p.SetState(598)
			p.Column_constraint()
		}

		p.SetState(603)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_paramContext is an interface to support dynamic dispatch.
type IWith_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext

	// IsWith_paramContext differentiates from other interfaces.
	IsWith_paramContext()
}

type With_paramContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_paramContext() *With_paramContext {
	var p = new(With_paramContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_param
	return p
}

func InitEmptyWith_paramContext(p *With_paramContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_param
}

func (*With_paramContext) IsWith_paramContext() {}

func NewWith_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_paramContext {
	var p = new(With_paramContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_with_param

	return p
}

func (s *With_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *With_paramContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *With_paramContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *With_paramContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *With_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWith_param(s)
	}
}

func (s *With_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWith_param(s)
	}
}

func (s *With_paramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWith_param(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) With_param() (localctx IWith_paramContext) {
	localctx = NewWith_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SQLiteParserRULE_with_param)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(604)
		p.Match(SQLiteParserIDENTIFIER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(605)
		p.Match(SQLiteParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(606)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IType_nameContext is an interface to support dynamic dispatch.
type IType_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllName() []INameContext
	Name(i int) INameContext
	OPEN_PAR() antlr.TerminalNode
	AllSigned_number() []ISigned_numberContext
	Signed_number(i int) ISigned_numberContext
	CLOSE_PAR() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsType_nameContext differentiates from other interfaces.
	IsType_nameContext()
}

type Type_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_nameContext() *Type_nameContext {
	var p = new(Type_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
	return p
}

func InitEmptyType_nameContext(p *Type_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_type_name
}

func (*Type_nameContext) IsType_nameContext() {}

func NewType_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_nameContext {
	var p = new(Type_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_type_name

	return p
}

func (s *Type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_nameContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Type_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Type_nameContext) AllSigned_number() []ISigned_numberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISigned_numberContext); ok {
			len++
		}
	}

	tst := make([]ISigned_numberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISigned_numberContext); ok {
			tst[i] = t.(ISigned_numberContext)
			i++
		}
	}

	return tst
}

func (s *Type_nameContext) Signed_number(i int) ISigned_numberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Type_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Type_nameContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterType_name(s)
	}
}

func (s *Type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitType_name(s)
	}
}

func (s *Type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitType_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Type_name() (localctx IType_nameContext) {
	localctx = NewType_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLiteParserRULE_type_name)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(609)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1 + 1
	for ok := true; ok; ok = _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1 + 1:
			{
				p.SetState(608)
				p.Name()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(611)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 46, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(623)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(613)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(614)
			p.Signed_number()
		}
		{
			p.SetState(615)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(617)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(618)
			p.Signed_number()
		}
		{
			p.SetState(619)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(620)
			p.Signed_number()
		}
		{
			p.SetState(621)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_constraint() IPrimary_key_constraintContext
	CHECK_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Expr() IExprContext
	CLOSE_PAR() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Foreign_key_clause() IForeign_key_clauseContext
	AS_() antlr.TerminalNode
	CONSTRAINT_() antlr.TerminalNode
	Name() INameContext
	NULL_() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	Signed_number() ISigned_numberContext
	Literal_value() ILiteral_valueContext
	Conflict_clause() IConflict_clauseContext
	GENERATED_() antlr.TerminalNode
	ALWAYS_() antlr.TerminalNode
	STORED_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	NOT_() antlr.TerminalNode

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
	return p
}

func InitEmptyColumn_constraintContext(p *Column_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_constraint
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) Primary_key_constraint() IPrimary_key_constraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_constraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_constraintContext)
}

func (s *Column_constraintContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *Column_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Column_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Column_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Column_constraintContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *Column_constraintContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Column_constraintContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Column_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Column_constraintContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Column_constraintContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *Column_constraintContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Column_constraintContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *Column_constraintContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Column_constraintContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Column_constraintContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Column_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Column_constraintContext) GENERATED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGENERATED_, 0)
}

func (s *Column_constraintContext) ALWAYS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALWAYS_, 0)
}

func (s *Column_constraintContext) STORED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTORED_, 0)
}

func (s *Column_constraintContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *Column_constraintContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (s *Column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLiteParserRULE_column_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCONSTRAINT_ {
		{
			p.SetState(625)
			p.Match(SQLiteParserCONSTRAINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(626)
			p.Name()
		}

	}
	p.SetState(668)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPRIMARY_:
		{
			p.SetState(629)
			p.Primary_key_constraint()
		}

	case SQLiteParserNOT_, SQLiteParserNULL_, SQLiteParserUNIQUE_:
		p.SetState(635)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserNOT_, SQLiteParserNULL_:
			p.SetState(631)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserNOT_ {
				{
					p.SetState(630)
					p.Match(SQLiteParserNOT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(633)
				p.Match(SQLiteParserNULL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserUNIQUE_:
			{
				p.SetState(634)
				p.Match(SQLiteParserUNIQUE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		p.SetState(638)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(637)
				p.Conflict_clause()
			}

		}

	case SQLiteParserCHECK_:
		{
			p.SetState(640)
			p.Match(SQLiteParserCHECK_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(641)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(642)
			p.expr(0)
		}
		{
			p.SetState(643)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserDEFAULT_:
		{
			p.SetState(645)
			p.Match(SQLiteParserDEFAULT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(646)
				p.Signed_number()
			}

		case 2:
			{
				p.SetState(647)
				p.Literal_value()
			}

		case 3:
			{
				p.SetState(648)
				p.Match(SQLiteParserOPEN_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(649)
				p.expr(0)
			}
			{
				p.SetState(650)
				p.Match(SQLiteParserCLOSE_PAR)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	case SQLiteParserCOLLATE_:
		{
			p.SetState(654)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(655)
			p.Collation_name()
		}

	case SQLiteParserREFERENCES_:
		{
			p.SetState(656)
			p.Foreign_key_clause()
		}

	case SQLiteParserAS_, SQLiteParserGENERATED_:
		p.SetState(659)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserGENERATED_ {
			{
				p.SetState(657)
				p.Match(SQLiteParserGENERATED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(658)
				p.Match(SQLiteParserALWAYS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(661)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(662)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(663)
			p.expr(0)
		}
		{
			p.SetState(664)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserVIRTUAL_ || _la == SQLiteParserSTORED_ {
			{
				p.SetState(665)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserVIRTUAL_ || _la == SQLiteParserSTORED_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_constraintContext is an interface to support dynamic dispatch.
type IPrimary_key_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	Asc_desc() IAsc_descContext
	Conflict_clause() IConflict_clauseContext
	AUTOINCREMENT_() antlr.TerminalNode

	// IsPrimary_key_constraintContext differentiates from other interfaces.
	IsPrimary_key_constraintContext()
}

type Primary_key_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_constraintContext() *Primary_key_constraintContext {
	var p = new(Primary_key_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_primary_key_constraint
	return p
}

func InitEmptyPrimary_key_constraintContext(p *Primary_key_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_primary_key_constraint
}

func (*Primary_key_constraintContext) IsPrimary_key_constraintContext() {}

func NewPrimary_key_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_constraintContext {
	var p = new(Primary_key_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_primary_key_constraint

	return p
}

func (s *Primary_key_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_constraintContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *Primary_key_constraintContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *Primary_key_constraintContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Primary_key_constraintContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Primary_key_constraintContext) AUTOINCREMENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAUTOINCREMENT_, 0)
}

func (s *Primary_key_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPrimary_key_constraint(s)
	}
}

func (s *Primary_key_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPrimary_key_constraint(s)
	}
}

func (s *Primary_key_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPrimary_key_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Primary_key_constraint() (localctx IPrimary_key_constraintContext) {
	localctx = NewPrimary_key_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SQLiteParserRULE_primary_key_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Match(SQLiteParserPRIMARY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(671)
		p.Match(SQLiteParserKEY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(673)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(672)
			p.Asc_desc()
		}

	}
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserON_ {
		{
			p.SetState(675)
			p.Conflict_clause()
		}

	}
	p.SetState(679)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserAUTOINCREMENT_ {
		{
			p.SetState(678)
			p.Match(SQLiteParserAUTOINCREMENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISigned_numberContext is an interface to support dynamic dispatch.
type ISigned_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NUMERIC_LITERAL() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode

	// IsSigned_numberContext differentiates from other interfaces.
	IsSigned_numberContext()
}

type Signed_numberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySigned_numberContext() *Signed_numberContext {
	var p = new(Signed_numberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
	return p
}

func InitEmptySigned_numberContext(p *Signed_numberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_signed_number
}

func (*Signed_numberContext) IsSigned_numberContext() {}

func NewSigned_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Signed_numberContext {
	var p = new(Signed_numberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_signed_number

	return p
}

func (s *Signed_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Signed_numberContext) NUMERIC_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNUMERIC_LITERAL, 0)
}

func (s *Signed_numberContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Signed_numberContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Signed_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Signed_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Signed_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSigned_number(s)
	}
}

func (s *Signed_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSigned_number(s)
	}
}

func (s *Signed_numberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSigned_number(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Signed_number() (localctx ISigned_numberContext) {
	localctx = NewSigned_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SQLiteParserRULE_signed_number)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPLUS || _la == SQLiteParserMINUS {
		{
			p.SetState(681)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserPLUS || _la == SQLiteParserMINUS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(684)
		p.Match(SQLiteParserNUMERIC_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary_key_def() IPrimary_key_defContext
	Unique_key_def() IUnique_key_defContext
	CHECK_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Expr() IExprContext
	CLOSE_PAR() antlr.TerminalNode
	FOREIGN_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	Foreign_key_clause() IForeign_key_clauseContext
	CONSTRAINT_() antlr.TerminalNode
	Name() INameContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
	return p
}

func InitEmptyTable_constraintContext(p *Table_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_constraint
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) Primary_key_def() IPrimary_key_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimary_key_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimary_key_defContext)
}

func (s *Table_constraintContext) Unique_key_def() IUnique_key_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnique_key_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnique_key_defContext)
}

func (s *Table_constraintContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *Table_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_constraintContext) FOREIGN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOREIGN_, 0)
}

func (s *Table_constraintContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *Table_constraintContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Table_constraintContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Table_constraintContext) Foreign_key_clause() IForeign_key_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_key_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_key_clauseContext)
}

func (s *Table_constraintContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *Table_constraintContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Table_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (s *Table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLiteParserRULE_table_constraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCONSTRAINT_ {
		{
			p.SetState(686)
			p.Match(SQLiteParserCONSTRAINT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(687)
			p.Name()
		}

	}
	p.SetState(711)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPRIMARY_:
		{
			p.SetState(690)
			p.Primary_key_def()
		}

	case SQLiteParserUNIQUE_:
		{
			p.SetState(691)
			p.Unique_key_def()
		}

	case SQLiteParserCHECK_:
		{
			p.SetState(692)
			p.Match(SQLiteParserCHECK_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(693)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(694)
			p.expr(0)
		}
		{
			p.SetState(695)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserFOREIGN_:
		{
			p.SetState(697)
			p.Match(SQLiteParserFOREIGN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(698)
			p.Match(SQLiteParserKEY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(699)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(700)
			p.Column_name()
		}
		p.SetState(705)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(701)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(702)
				p.Column_name()
			}

			p.SetState(707)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(708)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(709)
			p.Foreign_key_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimary_key_defContext is an interface to support dynamic dispatch.
type IPrimary_key_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRIMARY_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Conflict_clause() IConflict_clauseContext

	// IsPrimary_key_defContext differentiates from other interfaces.
	IsPrimary_key_defContext()
}

type Primary_key_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimary_key_defContext() *Primary_key_defContext {
	var p = new(Primary_key_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_primary_key_def
	return p
}

func InitEmptyPrimary_key_defContext(p *Primary_key_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_primary_key_def
}

func (*Primary_key_defContext) IsPrimary_key_defContext() {}

func NewPrimary_key_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primary_key_defContext {
	var p = new(Primary_key_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_primary_key_def

	return p
}

func (s *Primary_key_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Primary_key_defContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *Primary_key_defContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *Primary_key_defContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Primary_key_defContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Primary_key_defContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Primary_key_defContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Primary_key_defContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Primary_key_defContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Primary_key_defContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Primary_key_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primary_key_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primary_key_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPrimary_key_def(s)
	}
}

func (s *Primary_key_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPrimary_key_def(s)
	}
}

func (s *Primary_key_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPrimary_key_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Primary_key_def() (localctx IPrimary_key_defContext) {
	localctx = NewPrimary_key_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLiteParserRULE_primary_key_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(713)
		p.Match(SQLiteParserPRIMARY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(714)
		p.Match(SQLiteParserKEY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(715)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(716)
		p.Indexed_column()
	}
	p.SetState(721)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(717)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(718)
			p.Indexed_column()
		}

		p.SetState(723)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(724)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserON_ {
		{
			p.SetState(725)
			p.Conflict_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnique_key_defContext is an interface to support dynamic dispatch.
type IUnique_key_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNIQUE_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Conflict_clause() IConflict_clauseContext

	// IsUnique_key_defContext differentiates from other interfaces.
	IsUnique_key_defContext()
}

type Unique_key_defContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnique_key_defContext() *Unique_key_defContext {
	var p = new(Unique_key_defContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unique_key_def
	return p
}

func InitEmptyUnique_key_defContext(p *Unique_key_defContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unique_key_def
}

func (*Unique_key_defContext) IsUnique_key_defContext() {}

func NewUnique_key_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unique_key_defContext {
	var p = new(Unique_key_defContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_unique_key_def

	return p
}

func (s *Unique_key_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Unique_key_defContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *Unique_key_defContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Unique_key_defContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Unique_key_defContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Unique_key_defContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Unique_key_defContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Unique_key_defContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Unique_key_defContext) Conflict_clause() IConflict_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConflict_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConflict_clauseContext)
}

func (s *Unique_key_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unique_key_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unique_key_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUnique_key_def(s)
	}
}

func (s *Unique_key_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUnique_key_def(s)
	}
}

func (s *Unique_key_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUnique_key_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Unique_key_def() (localctx IUnique_key_defContext) {
	localctx = NewUnique_key_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLiteParserRULE_unique_key_def)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(728)
		p.Match(SQLiteParserUNIQUE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(729)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(730)
		p.Indexed_column()
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(731)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(732)
			p.Indexed_column()
		}

		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(738)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(740)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserON_ {
		{
			p.SetState(739)
			p.Conflict_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_key_clauseContext is an interface to support dynamic dispatch.
type IForeign_key_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REFERENCES_() antlr.TerminalNode
	Foreign_table() IForeign_tableContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllON_() []antlr.TerminalNode
	ON_(i int) antlr.TerminalNode
	AllMATCH_() []antlr.TerminalNode
	MATCH_(i int) antlr.TerminalNode
	AllName() []INameContext
	Name(i int) INameContext
	DEFERRABLE_() antlr.TerminalNode
	AllDELETE_() []antlr.TerminalNode
	DELETE_(i int) antlr.TerminalNode
	AllUPDATE_() []antlr.TerminalNode
	UPDATE_(i int) antlr.TerminalNode
	AllSET_() []antlr.TerminalNode
	SET_(i int) antlr.TerminalNode
	AllCASCADE_() []antlr.TerminalNode
	CASCADE_(i int) antlr.TerminalNode
	AllRESTRICT_() []antlr.TerminalNode
	RESTRICT_(i int) antlr.TerminalNode
	AllNO_() []antlr.TerminalNode
	NO_(i int) antlr.TerminalNode
	AllACTION_() []antlr.TerminalNode
	ACTION_(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllNULL_() []antlr.TerminalNode
	NULL_(i int) antlr.TerminalNode
	AllDEFAULT_() []antlr.TerminalNode
	DEFAULT_(i int) antlr.TerminalNode
	NOT_() antlr.TerminalNode
	INITIALLY_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode

	// IsForeign_key_clauseContext differentiates from other interfaces.
	IsForeign_key_clauseContext()
}

type Foreign_key_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_key_clauseContext() *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
	return p
}

func InitEmptyForeign_key_clauseContext(p *Foreign_key_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause
}

func (*Foreign_key_clauseContext) IsForeign_key_clauseContext() {}

func NewForeign_key_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_key_clauseContext {
	var p = new(Foreign_key_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_key_clause

	return p
}

func (s *Foreign_key_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_key_clauseContext) REFERENCES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREFERENCES_, 0)
}

func (s *Foreign_key_clauseContext) Foreign_table() IForeign_tableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForeign_tableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForeign_tableContext)
}

func (s *Foreign_key_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Foreign_key_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Foreign_key_clauseContext) AllON_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserON_)
}

func (s *Foreign_key_clauseContext) ON_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, i)
}

func (s *Foreign_key_clauseContext) AllMATCH_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserMATCH_)
}

func (s *Foreign_key_clauseContext) MATCH_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, i)
}

func (s *Foreign_key_clauseContext) AllName() []INameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INameContext); ok {
			len++
		}
	}

	tst := make([]INameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INameContext); ok {
			tst[i] = t.(INameContext)
			i++
		}
	}

	return tst
}

func (s *Foreign_key_clauseContext) Name(i int) INameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Foreign_key_clauseContext) DEFERRABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRABLE_, 0)
}

func (s *Foreign_key_clauseContext) AllDELETE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDELETE_)
}

func (s *Foreign_key_clauseContext) DELETE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, i)
}

func (s *Foreign_key_clauseContext) AllUPDATE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserUPDATE_)
}

func (s *Foreign_key_clauseContext) UPDATE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, i)
}

func (s *Foreign_key_clauseContext) AllSET_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSET_)
}

func (s *Foreign_key_clauseContext) SET_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, i)
}

func (s *Foreign_key_clauseContext) AllCASCADE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCASCADE_)
}

func (s *Foreign_key_clauseContext) CASCADE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASCADE_, i)
}

func (s *Foreign_key_clauseContext) AllRESTRICT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserRESTRICT_)
}

func (s *Foreign_key_clauseContext) RESTRICT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserRESTRICT_, i)
}

func (s *Foreign_key_clauseContext) AllNO_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserNO_)
}

func (s *Foreign_key_clauseContext) NO_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, i)
}

func (s *Foreign_key_clauseContext) AllACTION_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserACTION_)
}

func (s *Foreign_key_clauseContext) ACTION_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserACTION_, i)
}

func (s *Foreign_key_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Foreign_key_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Foreign_key_clauseContext) AllNULL_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserNULL_)
}

func (s *Foreign_key_clauseContext) NULL_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, i)
}

func (s *Foreign_key_clauseContext) AllDEFAULT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDEFAULT_)
}

func (s *Foreign_key_clauseContext) DEFAULT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, i)
}

func (s *Foreign_key_clauseContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Foreign_key_clauseContext) INITIALLY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINITIALLY_, 0)
}

func (s *Foreign_key_clauseContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *Foreign_key_clauseContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *Foreign_key_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_key_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_key_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitForeign_key_clause(s)
	}
}

func (s *Foreign_key_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitForeign_key_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_key_clause() (localctx IForeign_key_clauseContext) {
	localctx = NewForeign_key_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLiteParserRULE_foreign_key_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(742)
		p.Match(SQLiteParserREFERENCES_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(743)
		p.Foreign_table()
	}
	p.SetState(755)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(744)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(745)
			p.Column_name()
		}
		p.SetState(750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(746)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(747)
				p.Column_name()
			}

			p.SetState(752)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(753)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserMATCH_ || _la == SQLiteParserON_ {
		p.SetState(769)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserON_:
			{
				p.SetState(757)
				p.Match(SQLiteParserON_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(758)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserDELETE_ || _la == SQLiteParserUPDATE_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(765)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetTokenStream().LA(1) {
			case SQLiteParserSET_:
				{
					p.SetState(759)
					p.Match(SQLiteParserSET_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(760)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SQLiteParserDEFAULT_ || _la == SQLiteParserNULL_) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case SQLiteParserCASCADE_:
				{
					p.SetState(761)
					p.Match(SQLiteParserCASCADE_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case SQLiteParserRESTRICT_:
				{
					p.SetState(762)
					p.Match(SQLiteParserRESTRICT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case SQLiteParserNO_:
				{
					p.SetState(763)
					p.Match(SQLiteParserNO_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(764)
					p.Match(SQLiteParserACTION_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			default:
				p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				goto errorExit
			}

		case SQLiteParserMATCH_:
			{
				p.SetState(767)
				p.Match(SQLiteParserMATCH_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(768)
				p.Name()
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserNOT_ {
			{
				p.SetState(774)
				p.Match(SQLiteParserNOT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(777)
			p.Match(SQLiteParserDEFERRABLE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(780)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserINITIALLY_ {
			{
				p.SetState(778)
				p.Match(SQLiteParserINITIALLY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(779)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserDEFERRED_ || _la == SQLiteParserIMMEDIATE_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConflict_clauseContext is an interface to support dynamic dispatch.
type IConflict_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode

	// IsConflict_clauseContext differentiates from other interfaces.
	IsConflict_clauseContext()
}

type Conflict_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConflict_clauseContext() *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
	return p
}

func InitEmptyConflict_clauseContext(p *Conflict_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_conflict_clause
}

func (*Conflict_clauseContext) IsConflict_clauseContext() {}

func NewConflict_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conflict_clauseContext {
	var p = new(Conflict_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_conflict_clause

	return p
}

func (s *Conflict_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Conflict_clauseContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Conflict_clauseContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *Conflict_clauseContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Conflict_clauseContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Conflict_clauseContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Conflict_clauseContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Conflict_clauseContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Conflict_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conflict_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conflict_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitConflict_clause(s)
	}
}

func (s *Conflict_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitConflict_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Conflict_clause() (localctx IConflict_clauseContext) {
	localctx = NewConflict_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLiteParserRULE_conflict_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(784)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(785)
		p.Match(SQLiteParserCONFLICT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(786)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserABORT_ || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&38280596832650241) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_trigger_stmtContext is an interface to support dynamic dispatch.
type ICreate_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	Trigger_name() ITrigger_nameContext
	ON_() antlr.TerminalNode
	Table_name() ITable_nameContext
	BEGIN_() antlr.TerminalNode
	END_() antlr.TerminalNode
	DELETE_() antlr.TerminalNode
	INSERT_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	If_not_exists() IIf_not_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	BEFORE_() antlr.TerminalNode
	AFTER_() antlr.TerminalNode
	INSTEAD_() antlr.TerminalNode
	AllOF_() []antlr.TerminalNode
	OF_(i int) antlr.TerminalNode
	FOR_() antlr.TerminalNode
	EACH_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	WHEN_() antlr.TerminalNode
	Expr() IExprContext
	AllSCOL() []antlr.TerminalNode
	SCOL(i int) antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllUpdate_stmt() []IUpdate_stmtContext
	Update_stmt(i int) IUpdate_stmtContext
	AllInsert_stmt() []IInsert_stmtContext
	Insert_stmt(i int) IInsert_stmtContext
	AllDelete_stmt() []IDelete_stmtContext
	Delete_stmt(i int) IDelete_stmtContext
	AllSelect_stmt() []ISelect_stmtContext
	Select_stmt(i int) ISelect_stmtContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_trigger_stmtContext differentiates from other interfaces.
	IsCreate_trigger_stmtContext()
}

type Create_trigger_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_trigger_stmtContext() *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
	return p
}

func InitEmptyCreate_trigger_stmtContext(p *Create_trigger_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt
}

func (*Create_trigger_stmtContext) IsCreate_trigger_stmtContext() {}

func NewCreate_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_trigger_stmtContext {
	var p = new(Create_trigger_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_trigger_stmt

	return p
}

func (s *Create_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_trigger_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_trigger_stmtContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *Create_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Create_trigger_stmtContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Create_trigger_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_trigger_stmtContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *Create_trigger_stmtContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *Create_trigger_stmtContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *Create_trigger_stmtContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *Create_trigger_stmtContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Create_trigger_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_trigger_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_trigger_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_trigger_stmtContext) BEFORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEFORE_, 0)
}

func (s *Create_trigger_stmtContext) AFTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAFTER_, 0)
}

func (s *Create_trigger_stmtContext) INSTEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSTEAD_, 0)
}

func (s *Create_trigger_stmtContext) AllOF_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOF_)
}

func (s *Create_trigger_stmtContext) OF_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOF_, i)
}

func (s *Create_trigger_stmtContext) FOR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOR_, 0)
}

func (s *Create_trigger_stmtContext) EACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEACH_, 0)
}

func (s *Create_trigger_stmtContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Create_trigger_stmtContext) WHEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, 0)
}

func (s *Create_trigger_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Create_trigger_stmtContext) AllSCOL() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserSCOL)
}

func (s *Create_trigger_stmtContext) SCOL(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserSCOL, i)
}

func (s *Create_trigger_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_trigger_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_trigger_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_trigger_stmtContext) AllUpdate_stmt() []IUpdate_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_stmtContext); ok {
			tst[i] = t.(IUpdate_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Update_stmt(i int) IUpdate_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_stmtContext)
}

func (s *Create_trigger_stmtContext) AllInsert_stmt() []IInsert_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			len++
		}
	}

	tst := make([]IInsert_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInsert_stmtContext); ok {
			tst[i] = t.(IInsert_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Insert_stmt(i int) IInsert_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInsert_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInsert_stmtContext)
}

func (s *Create_trigger_stmtContext) AllDelete_stmt() []IDelete_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			len++
		}
	}

	tst := make([]IDelete_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDelete_stmtContext); ok {
			tst[i] = t.(IDelete_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Delete_stmt(i int) IDelete_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDelete_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDelete_stmtContext)
}

func (s *Create_trigger_stmtContext) AllSelect_stmt() []ISelect_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISelect_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_stmtContext); ok {
			tst[i] = t.(ISelect_stmtContext)
			i++
		}
	}

	return tst
}

func (s *Create_trigger_stmtContext) Select_stmt(i int) ISelect_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_trigger_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_trigger_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_trigger_stmt(s)
	}
}

func (s *Create_trigger_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_trigger_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_trigger_stmt() (localctx ICreate_trigger_stmtContext) {
	localctx = NewCreate_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SQLiteParserRULE_create_trigger_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(788)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(790)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(789)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(792)
		p.Match(SQLiteParserTRIGGER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(794)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(793)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(799)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 77, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(796)
			p.Schema_name()
		}
		{
			p.SetState(797)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(801)
		p.Trigger_name()
	}
	p.SetState(806)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserBEFORE_:
		{
			p.SetState(802)
			p.Match(SQLiteParserBEFORE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserAFTER_:
		{
			p.SetState(803)
			p.Match(SQLiteParserAFTER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserINSTEAD_:
		{
			p.SetState(804)
			p.Match(SQLiteParserINSTEAD_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(805)
			p.Match(SQLiteParserOF_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserDELETE_, SQLiteParserINSERT_, SQLiteParserUPDATE_:

	default:
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserDELETE_:
		{
			p.SetState(808)
			p.Match(SQLiteParserDELETE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserINSERT_:
		{
			p.SetState(809)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserUPDATE_:
		{
			p.SetState(810)
			p.Match(SQLiteParserUPDATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserOF_ {
			{
				p.SetState(811)
				p.Match(SQLiteParserOF_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(812)
				p.Column_name()
			}
			p.SetState(817)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(813)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(814)
					p.Column_name()
				}

				p.SetState(819)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(824)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(825)
		p.Table_name()
	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFOR_ {
		{
			p.SetState(826)
			p.Match(SQLiteParserFOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(827)
			p.Match(SQLiteParserEACH_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(828)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHEN_ {
		{
			p.SetState(831)
			p.Match(SQLiteParserWHEN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(832)
			p.expr(0)
		}

	}
	{
		p.SetState(835)
		p.Match(SQLiteParserBEGIN_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserDELETE_ || ((int64((_la-92)) & ^0x3f) == 0 && ((int64(1)<<(_la-92))&-8899108448457719807) != 0) {
		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(836)
				p.Update_stmt()
			}

		case 2:
			{
				p.SetState(837)
				p.Insert_stmt()
			}

		case 3:
			{
				p.SetState(838)
				p.Delete_stmt()
			}

		case 4:
			{
				p.SetState(839)
				p.Select_stmt()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(842)
			p.Match(SQLiteParserSCOL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(846)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(848)
		p.Match(SQLiteParserEND_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_view_stmtContext is an interface to support dynamic dispatch.
type ICreate_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	View_name() IView_nameContext
	AS_() antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	If_not_exists() IIf_not_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_view_stmtContext differentiates from other interfaces.
	IsCreate_view_stmtContext()
}

type Create_view_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_view_stmtContext() *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
	return p
}

func InitEmptyCreate_view_stmtContext(p *Create_view_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_view_stmt
}

func (*Create_view_stmtContext) IsCreate_view_stmtContext() {}

func NewCreate_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_view_stmtContext {
	var p = new(Create_view_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_view_stmt

	return p
}

func (s *Create_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_view_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_view_stmtContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *Create_view_stmtContext) View_name() IView_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Create_view_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Create_view_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Create_view_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_view_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_view_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_view_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Create_view_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Create_view_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_view_stmtContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *Create_view_stmtContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *Create_view_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_view_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_view_stmt(s)
	}
}

func (s *Create_view_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_view_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_view_stmt() (localctx ICreate_view_stmtContext) {
	localctx = NewCreate_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLiteParserRULE_create_view_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(850)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(852)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_ {
		{
			p.SetState(851)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserTEMP_ || _la == SQLiteParserTEMPORARY_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(854)
		p.Match(SQLiteParserVIEW_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(856)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(855)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(861)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(858)
			p.Schema_name()
		}
		{
			p.SetState(859)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(863)
		p.View_name()
	}
	p.SetState(875)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(864)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(865)
			p.Column_name()
		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(866)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(867)
				p.Column_name()
			}

			p.SetState(872)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(873)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(877)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(878)
		p.Select_stmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICreate_virtual_table_stmtContext is an interface to support dynamic dispatch.
type ICreate_virtual_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CREATE_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	Table_name() ITable_nameContext
	USING_() antlr.TerminalNode
	Module_name() IModule_nameContext
	If_not_exists() IIf_not_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllModule_argument() []IModule_argumentContext
	Module_argument(i int) IModule_argumentContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCreate_virtual_table_stmtContext differentiates from other interfaces.
	IsCreate_virtual_table_stmtContext()
}

type Create_virtual_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_virtual_table_stmtContext() *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
	return p
}

func InitEmptyCreate_virtual_table_stmtContext(p *Create_virtual_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt
}

func (*Create_virtual_table_stmtContext) IsCreate_virtual_table_stmtContext() {}

func NewCreate_virtual_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_virtual_table_stmtContext {
	var p = new(Create_virtual_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_create_virtual_table_stmt

	return p
}

func (s *Create_virtual_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_virtual_table_stmtContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *Create_virtual_table_stmtContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *Create_virtual_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Create_virtual_table_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_virtual_table_stmtContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *Create_virtual_table_stmtContext) Module_name() IModule_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_nameContext)
}

func (s *Create_virtual_table_stmtContext) If_not_exists() IIf_not_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_not_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_virtual_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Create_virtual_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Create_virtual_table_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllModule_argument() []IModule_argumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IModule_argumentContext); ok {
			len++
		}
	}

	tst := make([]IModule_argumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IModule_argumentContext); ok {
			tst[i] = t.(IModule_argumentContext)
			i++
		}
	}

	return tst
}

func (s *Create_virtual_table_stmtContext) Module_argument(i int) IModule_argumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModule_argumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModule_argumentContext)
}

func (s *Create_virtual_table_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Create_virtual_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Create_virtual_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Create_virtual_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_virtual_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_virtual_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCreate_virtual_table_stmt(s)
	}
}

func (s *Create_virtual_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCreate_virtual_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Create_virtual_table_stmt() (localctx ICreate_virtual_table_stmtContext) {
	localctx = NewCreate_virtual_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLiteParserRULE_create_virtual_table_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(880)
		p.Match(SQLiteParserCREATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(881)
		p.Match(SQLiteParserVIRTUAL_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(882)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(884)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(883)
			p.If_not_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(886)
			p.Schema_name()
		}
		{
			p.SetState(887)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(891)
		p.Table_name()
	}
	{
		p.SetState(892)
		p.Match(SQLiteParserUSING_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(893)
		p.Module_name()
	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(894)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(895)
			p.Module_argument()
		}
		p.SetState(900)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(896)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(897)
				p.Module_argument()
			}

			p.SetState(902)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(903)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWith_clauseContext is an interface to support dynamic dispatch.
type IWith_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_() antlr.TerminalNode
	AllCte_table_name() []ICte_table_nameContext
	Cte_table_name(i int) ICte_table_nameContext
	AllAS_() []antlr.TerminalNode
	AS_(i int) antlr.TerminalNode
	AllOPEN_PAR() []antlr.TerminalNode
	OPEN_PAR(i int) antlr.TerminalNode
	AllSelect_stmt() []ISelect_stmtContext
	Select_stmt(i int) ISelect_stmtContext
	AllCLOSE_PAR() []antlr.TerminalNode
	CLOSE_PAR(i int) antlr.TerminalNode
	RECURSIVE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWith_clauseContext differentiates from other interfaces.
	IsWith_clauseContext()
}

type With_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_clauseContext() *With_clauseContext {
	var p = new(With_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
	return p
}

func InitEmptyWith_clauseContext(p *With_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_with_clause
}

func (*With_clauseContext) IsWith_clauseContext() {}

func NewWith_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_clauseContext {
	var p = new(With_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_with_clause

	return p
}

func (s *With_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *With_clauseContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *With_clauseContext) AllCte_table_name() []ICte_table_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICte_table_nameContext); ok {
			len++
		}
	}

	tst := make([]ICte_table_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICte_table_nameContext); ok {
			tst[i] = t.(ICte_table_nameContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Cte_table_name(i int) ICte_table_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_table_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_table_nameContext)
}

func (s *With_clauseContext) AllAS_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserAS_)
}

func (s *With_clauseContext) AS_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, i)
}

func (s *With_clauseContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *With_clauseContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *With_clauseContext) AllSelect_stmt() []ISelect_stmtContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			len++
		}
	}

	tst := make([]ISelect_stmtContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_stmtContext); ok {
			tst[i] = t.(ISelect_stmtContext)
			i++
		}
	}

	return tst
}

func (s *With_clauseContext) Select_stmt(i int) ISelect_stmtContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *With_clauseContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *With_clauseContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *With_clauseContext) RECURSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRECURSIVE_, 0)
}

func (s *With_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *With_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *With_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWith_clause(s)
	}
}

func (s *With_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWith_clause(s)
	}
}

func (s *With_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWith_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) With_clause() (localctx IWith_clauseContext) {
	localctx = NewWith_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLiteParserRULE_with_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(907)
		p.Match(SQLiteParserWITH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(908)
			p.Match(SQLiteParserRECURSIVE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(911)
		p.Cte_table_name()
	}
	{
		p.SetState(912)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(913)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(914)
		p.Select_stmt()
	}
	{
		p.SetState(915)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(916)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(917)
			p.Cte_table_name()
		}
		{
			p.SetState(918)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(919)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(920)
			p.Select_stmt()
		}
		{
			p.SetState(921)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(927)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICte_table_nameContext is an interface to support dynamic dispatch.
type ICte_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCte_table_nameContext differentiates from other interfaces.
	IsCte_table_nameContext()
}

type Cte_table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCte_table_nameContext() *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_cte_table_name
	return p
}

func InitEmptyCte_table_nameContext(p *Cte_table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_cte_table_name
}

func (*Cte_table_nameContext) IsCte_table_nameContext() {}

func NewCte_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cte_table_nameContext {
	var p = new(Cte_table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_cte_table_name

	return p
}

func (s *Cte_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cte_table_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Cte_table_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Cte_table_nameContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Cte_table_nameContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Cte_table_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Cte_table_nameContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Cte_table_nameContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Cte_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cte_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cte_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCte_table_name(s)
	}
}

func (s *Cte_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCte_table_name(s)
	}
}

func (s *Cte_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCte_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Cte_table_name() (localctx ICte_table_nameContext) {
	localctx = NewCte_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SQLiteParserRULE_cte_table_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(928)
		p.Table_name()
	}
	p.SetState(940)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(929)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(930)
			p.Column_name()
		}
		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(931)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(932)
				p.Column_name()
			}

			p.SetState(937)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(938)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursive_cteContext is an interface to support dynamic dispatch.
type IRecursive_cteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Cte_table_name() ICte_table_nameContext
	AS_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Initial_select() IInitial_selectContext
	UNION_() antlr.TerminalNode
	Recursive_select() IRecursive_selectContext
	CLOSE_PAR() antlr.TerminalNode
	ALL_() antlr.TerminalNode

	// IsRecursive_cteContext differentiates from other interfaces.
	IsRecursive_cteContext()
}

type Recursive_cteContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursive_cteContext() *Recursive_cteContext {
	var p = new(Recursive_cteContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_recursive_cte
	return p
}

func InitEmptyRecursive_cteContext(p *Recursive_cteContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_recursive_cte
}

func (*Recursive_cteContext) IsRecursive_cteContext() {}

func NewRecursive_cteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursive_cteContext {
	var p = new(Recursive_cteContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_recursive_cte

	return p
}

func (s *Recursive_cteContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursive_cteContext) Cte_table_name() ICte_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICte_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICte_table_nameContext)
}

func (s *Recursive_cteContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Recursive_cteContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Recursive_cteContext) Initial_select() IInitial_selectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitial_selectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitial_selectContext)
}

func (s *Recursive_cteContext) UNION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, 0)
}

func (s *Recursive_cteContext) Recursive_select() IRecursive_selectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRecursive_selectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRecursive_selectContext)
}

func (s *Recursive_cteContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Recursive_cteContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *Recursive_cteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursive_cteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursive_cteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRecursive_cte(s)
	}
}

func (s *Recursive_cteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRecursive_cte(s)
	}
}

func (s *Recursive_cteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRecursive_cte(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Recursive_cte() (localctx IRecursive_cteContext) {
	localctx = NewRecursive_cteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SQLiteParserRULE_recursive_cte)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(942)
		p.Cte_table_name()
	}
	{
		p.SetState(943)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(944)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(945)
		p.Initial_select()
	}
	{
		p.SetState(946)
		p.Match(SQLiteParserUNION_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(948)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserALL_ {
		{
			p.SetState(947)
			p.Match(SQLiteParserALL_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(950)
		p.Recursive_select()
	}
	{
		p.SetState(951)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	AS_() antlr.TerminalNode
	AllOPEN_PAR() []antlr.TerminalNode
	OPEN_PAR(i int) antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	AllCLOSE_PAR() []antlr.TerminalNode
	CLOSE_PAR(i int) antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
	return p
}

func InitEmptyCommon_table_expressionContext(p *Common_table_expressionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_expression
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Common_table_expressionContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Common_table_expressionContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Common_table_expressionContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Common_table_expressionContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Common_table_expressionContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Common_table_expressionContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Common_table_expressionContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_expressionContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Common_table_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Common_table_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLiteParserRULE_common_table_expression)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(953)
		p.Table_name()
	}
	p.SetState(965)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(954)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(955)
			p.Column_name()
		}
		p.SetState(960)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(956)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(957)
				p.Column_name()
			}

			p.SetState(962)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(963)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(967)
		p.Match(SQLiteParserAS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(968)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(969)
		p.Select_stmt()
	}
	{
		p.SetState(970)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_stmtContext is an interface to support dynamic dispatch.
type IDelete_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable returns the table rule contexts.
	GetTable() IQualified_table_nameContext

	// GetWhereExpr returns the whereExpr rule contexts.
	GetWhereExpr() IExprContext

	// SetTable sets the table rule contexts.
	SetTable(IQualified_table_nameContext)

	// SetWhereExpr sets the whereExpr rule contexts.
	SetWhereExpr(IExprContext)

	// Getter signatures
	DELETE_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	Qualified_table_name() IQualified_table_nameContext
	With_clause() IWith_clauseContext
	WHERE_() antlr.TerminalNode
	Returning_clause() IReturning_clauseContext
	Expr() IExprContext

	// IsDelete_stmtContext differentiates from other interfaces.
	IsDelete_stmtContext()
}

type Delete_stmtContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	table     IQualified_table_nameContext
	whereExpr IExprContext
}

func NewEmptyDelete_stmtContext() *Delete_stmtContext {
	var p = new(Delete_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
	return p
}

func InitEmptyDelete_stmtContext(p *Delete_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt
}

func (*Delete_stmtContext) IsDelete_stmtContext() {}

func NewDelete_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmtContext {
	var p = new(Delete_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt

	return p
}

func (s *Delete_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmtContext) GetTable() IQualified_table_nameContext { return s.table }

func (s *Delete_stmtContext) GetWhereExpr() IExprContext { return s.whereExpr }

func (s *Delete_stmtContext) SetTable(v IQualified_table_nameContext) { s.table = v }

func (s *Delete_stmtContext) SetWhereExpr(v IExprContext) { s.whereExpr = v }

func (s *Delete_stmtContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *Delete_stmtContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Delete_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmtContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Delete_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Delete_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDelete_stmt(s)
	}
}

func (s *Delete_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDelete_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Delete_stmt() (localctx IDelete_stmtContext) {
	localctx = NewDelete_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLiteParserRULE_delete_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(973)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(972)
			p.With_clause()
		}

	}
	{
		p.SetState(975)
		p.Match(SQLiteParserDELETE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(976)
		p.Match(SQLiteParserFROM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(977)

		var _x = p.Qualified_table_name()

		localctx.(*Delete_stmtContext).table = _x
	}
	p.SetState(980)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(978)
			p.Match(SQLiteParserWHERE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(979)

			var _x = p.expr(0)

			localctx.(*Delete_stmtContext).whereExpr = _x
		}

	}
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(982)
			p.Returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDelete_stmt_limitedContext is an interface to support dynamic dispatch.
type IDelete_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DELETE_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	Qualified_table_name() IQualified_table_nameContext
	With_clause() IWith_clauseContext
	WHERE_() antlr.TerminalNode
	Expr() IExprContext
	Returning_clause() IReturning_clauseContext
	Limit_stmt() ILimit_stmtContext
	Order_by_stmt() IOrder_by_stmtContext

	// IsDelete_stmt_limitedContext differentiates from other interfaces.
	IsDelete_stmt_limitedContext()
}

type Delete_stmt_limitedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_stmt_limitedContext() *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited
	return p
}

func InitEmptyDelete_stmt_limitedContext(p *Delete_stmt_limitedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited
}

func (*Delete_stmt_limitedContext) IsDelete_stmt_limitedContext() {}

func NewDelete_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_stmt_limitedContext {
	var p = new(Delete_stmt_limitedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_delete_stmt_limited

	return p
}

func (s *Delete_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_stmt_limitedContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *Delete_stmt_limitedContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Delete_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Delete_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Delete_stmt_limitedContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Delete_stmt_limitedContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Delete_stmt_limitedContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Delete_stmt_limitedContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Delete_stmt_limitedContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Delete_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDelete_stmt_limited(s)
	}
}

func (s *Delete_stmt_limitedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDelete_stmt_limited(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Delete_stmt_limited() (localctx IDelete_stmt_limitedContext) {
	localctx = NewDelete_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLiteParserRULE_delete_stmt_limited)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(985)
			p.With_clause()
		}

	}
	{
		p.SetState(988)
		p.Match(SQLiteParserDELETE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(989)
		p.Match(SQLiteParserFROM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(990)
		p.Qualified_table_name()
	}
	p.SetState(993)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(991)
			p.Match(SQLiteParserWHERE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(992)
			p.expr(0)
		}

	}
	p.SetState(996)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(995)
			p.Returning_clause()
		}

	}
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ || _la == SQLiteParserORDER_ {
		p.SetState(999)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(998)
				p.Order_by_stmt()
			}

		}
		{
			p.SetState(1001)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDetach_stmtContext is an interface to support dynamic dispatch.
type IDetach_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DETACH_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DATABASE_() antlr.TerminalNode

	// IsDetach_stmtContext differentiates from other interfaces.
	IsDetach_stmtContext()
}

type Detach_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDetach_stmtContext() *Detach_stmtContext {
	var p = new(Detach_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
	return p
}

func InitEmptyDetach_stmtContext(p *Detach_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_detach_stmt
}

func (*Detach_stmtContext) IsDetach_stmtContext() {}

func NewDetach_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Detach_stmtContext {
	var p = new(Detach_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_detach_stmt

	return p
}

func (s *Detach_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Detach_stmtContext) DETACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDETACH_, 0)
}

func (s *Detach_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Detach_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Detach_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Detach_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Detach_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDetach_stmt(s)
	}
}

func (s *Detach_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDetach_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Detach_stmt() (localctx IDetach_stmtContext) {
	localctx = NewDetach_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLiteParserRULE_detach_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1004)
		p.Match(SQLiteParserDETACH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1006)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1005)
			p.Match(SQLiteParserDATABASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1008)
		p.Schema_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_stmtContext is an interface to support dynamic dispatch.
type IDrop_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetObject returns the object token.
	GetObject() antlr.Token

	// SetObject sets the object token.
	SetObject(antlr.Token)

	// Getter signatures
	DROP_() antlr.TerminalNode
	Any_name() IAny_nameContext
	INDEX_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	If_exists() IIf_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsDrop_stmtContext differentiates from other interfaces.
	IsDrop_stmtContext()
}

type Drop_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	object antlr.Token
}

func NewEmptyDrop_stmtContext() *Drop_stmtContext {
	var p = new(Drop_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_stmt
	return p
}

func InitEmptyDrop_stmtContext(p *Drop_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_stmt
}

func (*Drop_stmtContext) IsDrop_stmtContext() {}

func NewDrop_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_stmtContext {
	var p = new(Drop_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_stmt

	return p
}

func (s *Drop_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_stmtContext) GetObject() antlr.Token { return s.object }

func (s *Drop_stmtContext) SetObject(v antlr.Token) { s.object = v }

func (s *Drop_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_stmtContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Drop_stmtContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *Drop_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Drop_stmtContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *Drop_stmtContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *Drop_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_stmt(s)
	}
}

func (s *Drop_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_stmt(s)
	}
}

func (s *Drop_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_stmt() (localctx IDrop_stmtContext) {
	localctx = NewDrop_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLiteParserRULE_drop_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1010)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1011)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Drop_stmtContext).object = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-88)) & ^0x3f) == 0 && ((int64(1)<<(_la-88))&-9187061764859101183) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Drop_stmtContext).object = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1013)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1012)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1018)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1015)
			p.Schema_name()
		}
		{
			p.SetState(1016)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1020)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_database_stmtContext is an interface to support dynamic dispatch.
type IDrop_database_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	DATABASE_() antlr.TerminalNode
	Database_name() IDatabase_nameContext
	If_exists() IIf_existsContext

	// IsDrop_database_stmtContext differentiates from other interfaces.
	IsDrop_database_stmtContext()
}

type Drop_database_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_database_stmtContext() *Drop_database_stmtContext {
	var p = new(Drop_database_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_database_stmt
	return p
}

func InitEmptyDrop_database_stmtContext(p *Drop_database_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_database_stmt
}

func (*Drop_database_stmtContext) IsDrop_database_stmtContext() {}

func NewDrop_database_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_database_stmtContext {
	var p = new(Drop_database_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_database_stmt

	return p
}

func (s *Drop_database_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_database_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_database_stmtContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *Drop_database_stmtContext) Database_name() IDatabase_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDatabase_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDatabase_nameContext)
}

func (s *Drop_database_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_database_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_database_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_database_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_database_stmt(s)
	}
}

func (s *Drop_database_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_database_stmt(s)
	}
}

func (s *Drop_database_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_database_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_database_stmt() (localctx IDrop_database_stmtContext) {
	localctx = NewDrop_database_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLiteParserRULE_drop_database_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1022)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1023)
		p.Match(SQLiteParserDATABASE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1025)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1024)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1027)
		p.Database_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_index_stmtContext is an interface to support dynamic dispatch.
type IDrop_index_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	INDEX_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	If_exists() IIf_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsDrop_index_stmtContext differentiates from other interfaces.
	IsDrop_index_stmtContext()
}

type Drop_index_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_index_stmtContext() *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt
	return p
}

func InitEmptyDrop_index_stmtContext(p *Drop_index_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt
}

func (*Drop_index_stmtContext) IsDrop_index_stmtContext() {}

func NewDrop_index_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_index_stmtContext {
	var p = new(Drop_index_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_index_stmt

	return p
}

func (s *Drop_index_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_index_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_index_stmtContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *Drop_index_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Drop_index_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_index_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_index_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_index_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_index_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_index_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_index_stmt(s)
	}
}

func (s *Drop_index_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_index_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_index_stmt() (localctx IDrop_index_stmtContext) {
	localctx = NewDrop_index_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SQLiteParserRULE_drop_index_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1030)
		p.Match(SQLiteParserINDEX_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1031)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1034)
			p.Schema_name()
		}
		{
			p.SetState(1035)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1039)
		p.Index_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_table_stmtContext is an interface to support dynamic dispatch.
type IDrop_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	AllTable_name() []ITable_nameContext
	Table_name(i int) ITable_nameContext
	If_exists() IIf_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsDrop_table_stmtContext differentiates from other interfaces.
	IsDrop_table_stmtContext()
}

type Drop_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_table_stmtContext() *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt
	return p
}

func InitEmptyDrop_table_stmtContext(p *Drop_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt
}

func (*Drop_table_stmtContext) IsDrop_table_stmtContext() {}

func NewDrop_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_table_stmtContext {
	var p = new(Drop_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_table_stmt

	return p
}

func (s *Drop_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_table_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_table_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Drop_table_stmtContext) AllTable_name() []ITable_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_nameContext); ok {
			len++
		}
	}

	tst := make([]ITable_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_nameContext); ok {
			tst[i] = t.(ITable_nameContext)
			i++
		}
	}

	return tst
}

func (s *Drop_table_stmtContext) Table_name(i int) ITable_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_table_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_table_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_table_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Drop_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Drop_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_table_stmt(s)
	}
}

func (s *Drop_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_table_stmt() (localctx IDrop_table_stmtContext) {
	localctx = NewDrop_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SQLiteParserRULE_drop_table_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1041)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1042)
		p.Match(SQLiteParserTABLE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1043)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1046)
			p.Schema_name()
		}
		{
			p.SetState(1047)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	{
		p.SetState(1051)
		p.Table_name()
	}
	p.SetState(1056)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1052)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1053)
			p.Table_name()
		}

		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_trigger_stmtContext is an interface to support dynamic dispatch.
type IDrop_trigger_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	Trigger_name() ITrigger_nameContext
	If_exists() IIf_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsDrop_trigger_stmtContext differentiates from other interfaces.
	IsDrop_trigger_stmtContext()
}

type Drop_trigger_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_trigger_stmtContext() *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt
	return p
}

func InitEmptyDrop_trigger_stmtContext(p *Drop_trigger_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt
}

func (*Drop_trigger_stmtContext) IsDrop_trigger_stmtContext() {}

func NewDrop_trigger_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_trigger_stmtContext {
	var p = new(Drop_trigger_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_trigger_stmt

	return p
}

func (s *Drop_trigger_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_trigger_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_trigger_stmtContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *Drop_trigger_stmtContext) Trigger_name() ITrigger_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrigger_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrigger_nameContext)
}

func (s *Drop_trigger_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_trigger_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_trigger_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_trigger_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_trigger_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_trigger_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_trigger_stmt(s)
	}
}

func (s *Drop_trigger_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_trigger_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_trigger_stmt() (localctx IDrop_trigger_stmtContext) {
	localctx = NewDrop_trigger_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SQLiteParserRULE_drop_trigger_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1059)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1060)
		p.Match(SQLiteParserTRIGGER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1061)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1067)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1064)
			p.Schema_name()
		}
		{
			p.SetState(1065)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1069)
		p.Trigger_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDrop_view_stmtContext is an interface to support dynamic dispatch.
type IDrop_view_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DROP_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	View_name() IView_nameContext
	If_exists() IIf_existsContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsDrop_view_stmtContext differentiates from other interfaces.
	IsDrop_view_stmtContext()
}

type Drop_view_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_view_stmtContext() *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt
	return p
}

func InitEmptyDrop_view_stmtContext(p *Drop_view_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt
}

func (*Drop_view_stmtContext) IsDrop_view_stmtContext() {}

func NewDrop_view_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_view_stmtContext {
	var p = new(Drop_view_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_drop_view_stmt

	return p
}

func (s *Drop_view_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_view_stmtContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *Drop_view_stmtContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *Drop_view_stmtContext) View_name() IView_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IView_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IView_nameContext)
}

func (s *Drop_view_stmtContext) If_exists() IIf_existsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIf_existsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_view_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Drop_view_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Drop_view_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_view_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_view_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDrop_view_stmt(s)
	}
}

func (s *Drop_view_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDrop_view_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Drop_view_stmt() (localctx IDrop_view_stmtContext) {
	localctx = NewDrop_view_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SQLiteParserRULE_drop_view_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1071)
		p.Match(SQLiteParserDROP_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1072)
		p.Match(SQLiteParserVIEW_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1074)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1073)
			p.If_exists()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1079)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1076)
			p.Schema_name()
		}
		{
			p.SetState(1077)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1081)
		p.View_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIf_existsContext is an interface to support dynamic dispatch.
type IIf_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IF_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode

	// IsIf_existsContext differentiates from other interfaces.
	IsIf_existsContext()
}

type If_existsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_existsContext() *If_existsContext {
	var p = new(If_existsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_if_exists
	return p
}

func InitEmptyIf_existsContext(p *If_existsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_if_exists
}

func (*If_existsContext) IsIf_existsContext() {}

func NewIf_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_existsContext {
	var p = new(If_existsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_if_exists

	return p
}

func (s *If_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_existsContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *If_existsContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *If_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIf_exists(s)
	}
}

func (s *If_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIf_exists(s)
	}
}

func (s *If_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIf_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) If_exists() (localctx IIf_existsContext) {
	localctx = NewIf_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SQLiteParserRULE_if_exists)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1083)
		p.Match(SQLiteParserIF_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1084)
		p.Match(SQLiteParserEXISTS_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICopy_stmtContext is an interface to support dynamic dispatch.
type ICopy_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable returns the table rule contexts.
	GetTable() IQualified_table_nameContext

	// SetTable sets the table rule contexts.
	SetTable(IQualified_table_nameContext)

	// Getter signatures
	COPY_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	Source_name() ISource_nameContext
	Qualified_table_name() IQualified_table_nameContext
	Copy_column_list() ICopy_column_listContext
	WITH_() antlr.TerminalNode
	Copy_format() ICopy_formatContext

	// IsCopy_stmtContext differentiates from other interfaces.
	IsCopy_stmtContext()
}

type Copy_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	table  IQualified_table_nameContext
}

func NewEmptyCopy_stmtContext() *Copy_stmtContext {
	var p = new(Copy_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_stmt
	return p
}

func InitEmptyCopy_stmtContext(p *Copy_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_stmt
}

func (*Copy_stmtContext) IsCopy_stmtContext() {}

func NewCopy_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_stmtContext {
	var p = new(Copy_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_copy_stmt

	return p
}

func (s *Copy_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_stmtContext) GetTable() IQualified_table_nameContext { return s.table }

func (s *Copy_stmtContext) SetTable(v IQualified_table_nameContext) { s.table = v }

func (s *Copy_stmtContext) COPY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOPY_, 0)
}

func (s *Copy_stmtContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Copy_stmtContext) Source_name() ISource_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISource_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISource_nameContext)
}

func (s *Copy_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Copy_stmtContext) Copy_column_list() ICopy_column_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_column_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_column_listContext)
}

func (s *Copy_stmtContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *Copy_stmtContext) Copy_format() ICopy_formatContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICopy_formatContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICopy_formatContext)
}

func (s *Copy_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Copy_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCopy_stmt(s)
	}
}

func (s *Copy_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCopy_stmt(s)
	}
}

func (s *Copy_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCopy_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Copy_stmt() (localctx ICopy_stmtContext) {
	localctx = NewCopy_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SQLiteParserRULE_copy_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1086)
		p.Match(SQLiteParserCOPY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1087)

		var _x = p.Qualified_table_name()

		localctx.(*Copy_stmtContext).table = _x
	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1088)
			p.Copy_column_list()
		}

	}
	{
		p.SetState(1091)
		p.Match(SQLiteParserFROM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1092)
		p.Source_name()
	}
	p.SetState(1094)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1093)
			p.Match(SQLiteParserWITH_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1097)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserBINARY_ || _la == SQLiteParserCSV_ || _la == SQLiteParserFORMAT_ || _la == SQLiteParserTEXT_ {
		{
			p.SetState(1096)
			p.Copy_format()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICopy_column_listContext is an interface to support dynamic dispatch.
type ICopy_column_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCopy_column_listContext differentiates from other interfaces.
	IsCopy_column_listContext()
}

type Copy_column_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCopy_column_listContext() *Copy_column_listContext {
	var p = new(Copy_column_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_column_list
	return p
}

func InitEmptyCopy_column_listContext(p *Copy_column_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_column_list
}

func (*Copy_column_listContext) IsCopy_column_listContext() {}

func NewCopy_column_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_column_listContext {
	var p = new(Copy_column_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_copy_column_list

	return p
}

func (s *Copy_column_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_column_listContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Copy_column_listContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Copy_column_listContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Copy_column_listContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Copy_column_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Copy_column_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Copy_column_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_column_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Copy_column_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCopy_column_list(s)
	}
}

func (s *Copy_column_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCopy_column_list(s)
	}
}

func (s *Copy_column_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCopy_column_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Copy_column_list() (localctx ICopy_column_listContext) {
	localctx = NewCopy_column_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SQLiteParserRULE_copy_column_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1100)
		p.Column_name()
	}
	p.SetState(1105)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1101)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1102)
			p.Column_name()
		}

		p.SetState(1107)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1108)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICopy_formatContext is an interface to support dynamic dispatch.
type ICopy_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFormat_type returns the format_type token.
	GetFormat_type() antlr.Token

	// SetFormat_type sets the format_type token.
	SetFormat_type(antlr.Token)

	// Getter signatures
	TEXT_() antlr.TerminalNode
	CSV_() antlr.TerminalNode
	BINARY_() antlr.TerminalNode
	FORMAT_() antlr.TerminalNode

	// IsCopy_formatContext differentiates from other interfaces.
	IsCopy_formatContext()
}

type Copy_formatContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	format_type antlr.Token
}

func NewEmptyCopy_formatContext() *Copy_formatContext {
	var p = new(Copy_formatContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_format
	return p
}

func InitEmptyCopy_formatContext(p *Copy_formatContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_copy_format
}

func (*Copy_formatContext) IsCopy_formatContext() {}

func NewCopy_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Copy_formatContext {
	var p = new(Copy_formatContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_copy_format

	return p
}

func (s *Copy_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Copy_formatContext) GetFormat_type() antlr.Token { return s.format_type }

func (s *Copy_formatContext) SetFormat_type(v antlr.Token) { s.format_type = v }

func (s *Copy_formatContext) TEXT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEXT_, 0)
}

func (s *Copy_formatContext) CSV_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCSV_, 0)
}

func (s *Copy_formatContext) BINARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBINARY_, 0)
}

func (s *Copy_formatContext) FORMAT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFORMAT_, 0)
}

func (s *Copy_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Copy_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Copy_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCopy_format(s)
	}
}

func (s *Copy_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCopy_format(s)
	}
}

func (s *Copy_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCopy_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Copy_format() (localctx ICopy_formatContext) {
	localctx = NewCopy_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SQLiteParserRULE_copy_format)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1111)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFORMAT_ {
		{
			p.SetState(1110)
			p.Match(SQLiteParserFORMAT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1113)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Copy_formatContext).format_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserBINARY_ || _la == SQLiteParserCSV_ || _la == SQLiteParserTEXT_) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Copy_formatContext).format_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISource_nameContext is an interface to support dynamic dispatch.
type ISource_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsSource_nameContext differentiates from other interfaces.
	IsSource_nameContext()
}

type Source_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySource_nameContext() *Source_nameContext {
	var p = new(Source_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_source_name
	return p
}

func InitEmptySource_nameContext(p *Source_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_source_name
}

func (*Source_nameContext) IsSource_nameContext() {}

func NewSource_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Source_nameContext {
	var p = new(Source_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_source_name

	return p
}

func (s *Source_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Source_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Source_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Source_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Source_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSource_name(s)
	}
}

func (s *Source_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSource_name(s)
	}
}

func (s *Source_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSource_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Source_name() (localctx ISource_nameContext) {
	localctx = NewSource_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SQLiteParserRULE_source_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1115)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITruncate_stmtContext is an interface to support dynamic dispatch.
type ITruncate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRUNCATE_() antlr.TerminalNode
	AllTable_name() []ITable_nameContext
	Table_name(i int) ITable_nameContext
	TABLE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTruncate_stmtContext differentiates from other interfaces.
	IsTruncate_stmtContext()
}

type Truncate_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_stmtContext() *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_truncate_stmt
	return p
}

func InitEmptyTruncate_stmtContext(p *Truncate_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_truncate_stmt
}

func (*Truncate_stmtContext) IsTruncate_stmtContext() {}

func NewTruncate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_stmtContext {
	var p = new(Truncate_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_truncate_stmt

	return p
}

func (s *Truncate_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_stmtContext) TRUNCATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRUNCATE_, 0)
}

func (s *Truncate_stmtContext) AllTable_name() []ITable_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_nameContext); ok {
			len++
		}
	}

	tst := make([]ITable_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_nameContext); ok {
			tst[i] = t.(ITable_nameContext)
			i++
		}
	}

	return tst
}

func (s *Truncate_stmtContext) Table_name(i int) ITable_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Truncate_stmtContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *Truncate_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Truncate_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Truncate_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Truncate_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTruncate_stmt(s)
	}
}

func (s *Truncate_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTruncate_stmt(s)
	}
}

func (s *Truncate_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTruncate_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Truncate_stmt() (localctx ITruncate_stmtContext) {
	localctx = NewTruncate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SQLiteParserRULE_truncate_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1117)
		p.Match(SQLiteParserTRUNCATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1119)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1118)
			p.Match(SQLiteParserTABLE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

	{
		p.SetState(1121)
		p.Table_name()
	}
	p.SetState(1126)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1122)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1123)
			p.Table_name()
		}

		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Literal_value() ILiteral_valueContext
	Arithmetic_expr() IArithmetic_exprContext
	Bind_param() IBind_paramContext
	Column_name() IColumn_nameContext
	Table_name() ITable_nameContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode
	Schema_name() ISchema_nameContext
	Unary_operator() IUnary_operatorContext
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	Comparison_expr() IComparison_exprContext
	Function() IFunctionContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	CAST_() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Type_name() IType_nameContext
	Select_stmt() ISelect_stmtContext
	EXISTS_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	CASE_() antlr.TerminalNode
	END_() antlr.TerminalNode
	AllWHEN_() []antlr.TerminalNode
	WHEN_(i int) antlr.TerminalNode
	AllTHEN_() []antlr.TerminalNode
	THEN_(i int) antlr.TerminalNode
	ELSE_() antlr.TerminalNode
	Raise_function() IRaise_functionContext
	PIPE2() antlr.TerminalNode
	LT2() antlr.TerminalNode
	GT2() antlr.TerminalNode
	AMP() antlr.TerminalNode
	PIPE() antlr.TerminalNode
	EQ() antlr.TerminalNode
	IS_() antlr.TerminalNode
	IN_() antlr.TerminalNode
	LIKE_() antlr.TerminalNode
	GLOB_() antlr.TerminalNode
	MATCH_() antlr.TerminalNode
	REGEXP_() antlr.TerminalNode
	AND_() antlr.TerminalNode
	OR_() antlr.TerminalNode
	BETWEEN_() antlr.TerminalNode
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	ESCAPE_() antlr.TerminalNode
	ISNULL_() antlr.TerminalNode
	NOTNULL_() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	Table_function_name() ITable_function_nameContext

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *ExprContext) Arithmetic_expr() IArithmetic_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArithmetic_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArithmetic_exprContext)
}

func (s *ExprContext) Bind_param() IBind_paramContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBind_paramContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBind_paramContext)
}

func (s *ExprContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *ExprContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ExprContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserDOT)
}

func (s *ExprContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, i)
}

func (s *ExprContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *ExprContext) Unary_operator() IUnary_operatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUnary_operatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) Comparison_expr() IComparison_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IComparison_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IComparison_exprContext)
}

func (s *ExprContext) Function() IFunctionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *ExprContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *ExprContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *ExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *ExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *ExprContext) CAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCAST_, 0)
}

func (s *ExprContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *ExprContext) Type_name() IType_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_nameContext)
}

func (s *ExprContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *ExprContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *ExprContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *ExprContext) CASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASE_, 0)
}

func (s *ExprContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *ExprContext) AllWHEN_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserWHEN_)
}

func (s *ExprContext) WHEN_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, i)
}

func (s *ExprContext) AllTHEN_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserTHEN_)
}

func (s *ExprContext) THEN_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserTHEN_, i)
}

func (s *ExprContext) ELSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserELSE_, 0)
}

func (s *ExprContext) Raise_function() IRaise_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRaise_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRaise_functionContext)
}

func (s *ExprContext) PIPE2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE2, 0)
}

func (s *ExprContext) LT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT2, 0)
}

func (s *ExprContext) GT2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT2, 0)
}

func (s *ExprContext) AMP() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAMP, 0)
}

func (s *ExprContext) PIPE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPIPE, 0)
}

func (s *ExprContext) EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEQ, 0)
}

func (s *ExprContext) IS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIS_, 0)
}

func (s *ExprContext) IN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIN_, 0)
}

func (s *ExprContext) LIKE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIKE_, 0)
}

func (s *ExprContext) GLOB_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGLOB_, 0)
}

func (s *ExprContext) MATCH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, 0)
}

func (s *ExprContext) REGEXP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREGEXP_, 0)
}

func (s *ExprContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *ExprContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *ExprContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *ExprContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *ExprContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *ExprContext) ESCAPE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserESCAPE_, 0)
}

func (s *ExprContext) ISNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserISNULL_, 0)
}

func (s *ExprContext) NOTNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTNULL_, 0)
}

func (s *ExprContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *ExprContext) Table_function_name() ITable_function_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_function_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *SQLiteParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 112
	p.EnterRecursionRule(localctx, 112, SQLiteParserRULE_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1130)
			p.Literal_value()
		}

	case 2:
		{
			p.SetState(1131)
			p.Arithmetic_expr()
		}

	case 3:
		{
			p.SetState(1132)
			p.Bind_param()
		}

	case 4:
		p.SetState(1141)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 131, p.GetParserRuleContext()) == 1 {
			p.SetState(1136)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1133)
					p.Schema_name()
				}
				{
					p.SetState(1134)
					p.Match(SQLiteParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1138)
				p.Table_name()
			}
			{
				p.SetState(1139)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1143)
			p.Column_name()
		}

	case 5:
		{
			p.SetState(1144)
			p.Unary_operator()
		}
		{
			p.SetState(1145)
			p.expr(19)
		}

	case 6:
		{
			p.SetState(1147)
			p.Comparison_expr()
		}

	case 7:
		{
			p.SetState(1148)
			p.Function()
		}

	case 8:
		{
			p.SetState(1149)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1150)
			p.expr(0)
		}
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1151)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1152)
				p.expr(0)
			}

			p.SetState(1157)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1158)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 9:
		{
			p.SetState(1160)
			p.Match(SQLiteParserCAST_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1161)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1162)
			p.expr(0)
		}
		{
			p.SetState(1163)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1164)
			p.Type_name()
		}
		{
			p.SetState(1165)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 10:
		p.SetState(1171)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserEXISTS_ || _la == SQLiteParserNOT_ {
			p.SetState(1168)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserNOT_ {
				{
					p.SetState(1167)
					p.Match(SQLiteParserNOT_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1170)
				p.Match(SQLiteParserEXISTS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(1173)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1174)
			p.Select_stmt()
		}
		{
			p.SetState(1175)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 11:
		{
			p.SetState(1177)
			p.Match(SQLiteParserCASE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1179)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1178)
				p.expr(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1186)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLiteParserWHEN_ {
			{
				p.SetState(1181)
				p.Match(SQLiteParserWHEN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1182)
				p.expr(0)
			}
			{
				p.SetState(1183)
				p.Match(SQLiteParserTHEN_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1184)
				p.expr(0)
			}

			p.SetState(1188)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1192)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserELSE_ {
			{
				p.SetState(1190)
				p.Match(SQLiteParserELSE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1191)
				p.expr(0)
			}

		}
		{
			p.SetState(1194)
			p.Match(SQLiteParserEND_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 12:
		{
			p.SetState(1196)
			p.Raise_function()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1304)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 153, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1199)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
					goto errorExit
				}
				{
					p.SetState(1200)
					p.Match(SQLiteParserPIPE2)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1201)
					p.expr(19)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1202)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
					goto errorExit
				}
				{
					p.SetState(1203)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&245760) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1204)
					p.expr(18)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1205)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				p.SetState(1215)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1206)
						p.Match(SQLiteParserEQ)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 2:
					{
						p.SetState(1207)
						p.Match(SQLiteParserIS_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 3:
					{
						p.SetState(1208)
						p.Match(SQLiteParserIS_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1209)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 4:
					{
						p.SetState(1210)
						p.Match(SQLiteParserIN_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 5:
					{
						p.SetState(1211)
						p.Match(SQLiteParserLIKE_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 6:
					{
						p.SetState(1212)
						p.Match(SQLiteParserGLOB_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 7:
					{
						p.SetState(1213)
						p.Match(SQLiteParserMATCH_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 8:
					{
						p.SetState(1214)
						p.Match(SQLiteParserREGEXP_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}
				{
					p.SetState(1217)
					p.expr(16)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1218)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(1219)
					p.Match(SQLiteParserAND_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1220)
					p.expr(15)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1221)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(1222)
					p.Match(SQLiteParserOR_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1223)
					p.expr(14)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1224)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(1225)
					p.Match(SQLiteParserIS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1227)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1226)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}
				{
					p.SetState(1229)
					p.expr(7)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1230)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				p.SetState(1232)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(1231)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1234)
					p.Match(SQLiteParserBETWEEN_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1235)
					p.expr(0)
				}
				{
					p.SetState(1236)
					p.Match(SQLiteParserAND_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1237)
					p.expr(6)
				}

			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1239)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(1240)
					p.Match(SQLiteParserCOLLATE_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1241)
					p.Collation_name()
				}

			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1242)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				p.SetState(1244)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(1243)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1246)
					_la = p.GetTokenStream().LA(1)

					if !((int64((_la-81)) & ^0x3f) == 0 && ((int64(1)<<(_la-81))&2199028498433) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(1247)
					p.expr(0)
				}
				p.SetState(1250)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 143, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1248)
						p.Match(SQLiteParserESCAPE_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1249)
						p.expr(0)
					}

				} else if p.HasError() { // JIM
					goto errorExit
				}

			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1252)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				p.SetState(1257)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetTokenStream().LA(1) {
				case SQLiteParserISNULL_:
					{
						p.SetState(1253)
						p.Match(SQLiteParserISNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case SQLiteParserNOTNULL_:
					{
						p.SetState(1254)
						p.Match(SQLiteParserNOTNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case SQLiteParserNOT_:
					{
						p.SetState(1255)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1256)
						p.Match(SQLiteParserNULL_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				default:
					p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					goto errorExit
				}

			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SQLiteParserRULE_expr)
				p.SetState(1259)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
					goto errorExit
				}
				p.SetState(1261)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if _la == SQLiteParserNOT_ {
					{
						p.SetState(1260)
						p.Match(SQLiteParserNOT_)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				{
					p.SetState(1263)
					p.Match(SQLiteParserIN_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(1302)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}

				switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1264)
						p.Match(SQLiteParserOPEN_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(1274)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1265)
							p.Select_stmt()
						}

					} else if p.HasError() { // JIM
						goto errorExit
					} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext()) == 2 {
						{
							p.SetState(1266)
							p.expr(0)
						}
						p.SetState(1271)
						p.GetErrorHandler().Sync(p)
						if p.HasError() {
							goto errorExit
						}
						_la = p.GetTokenStream().LA(1)

						for _la == SQLiteParserCOMMA {
							{
								p.SetState(1267)
								p.Match(SQLiteParserCOMMA)
								if p.HasError() {
									// Recognition error - abort rule
									goto errorExit
								}
							}
							{
								p.SetState(1268)
								p.expr(0)
							}

							p.SetState(1273)
							p.GetErrorHandler().Sync(p)
							if p.HasError() {
								goto errorExit
							}
							_la = p.GetTokenStream().LA(1)
						}

					} else if p.HasError() { // JIM
						goto errorExit
					}
					{
						p.SetState(1276)
						p.Match(SQLiteParserCLOSE_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case 2:
					p.SetState(1280)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1277)
							p.Schema_name()
						}
						{
							p.SetState(1278)
							p.Match(SQLiteParserDOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					} else if p.HasError() { // JIM
						goto errorExit
					}
					{
						p.SetState(1282)
						p.Table_name()
					}

				case 3:
					p.SetState(1286)
					p.GetErrorHandler().Sync(p)

					if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext()) == 1 {
						{
							p.SetState(1283)
							p.Schema_name()
						}
						{
							p.SetState(1284)
							p.Match(SQLiteParserDOT)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}

					} else if p.HasError() { // JIM
						goto errorExit
					}
					{
						p.SetState(1288)
						p.Table_function_name()
					}
					{
						p.SetState(1289)
						p.Match(SQLiteParserOPEN_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					p.SetState(1298)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)

					if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-20266335795673336) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-16385) != 0) || ((int64((_la-129)) & ^0x3f) == 0 && ((int64(1)<<(_la-129))&-4323455642275708929) != 0) || ((int64((_la-193)) & ^0x3f) == 0 && ((int64(1)<<(_la-193))&7) != 0) {
						{
							p.SetState(1290)
							p.expr(0)
						}
						p.SetState(1295)
						p.GetErrorHandler().Sync(p)
						if p.HasError() {
							goto errorExit
						}
						_la = p.GetTokenStream().LA(1)

						for _la == SQLiteParserCOMMA {
							{
								p.SetState(1291)
								p.Match(SQLiteParserCOMMA)
								if p.HasError() {
									// Recognition error - abort rule
									goto errorExit
								}
							}
							{
								p.SetState(1292)
								p.expr(0)
							}

							p.SetState(1297)
							p.GetErrorHandler().Sync(p)
							if p.HasError() {
								goto errorExit
							}
							_la = p.GetTokenStream().LA(1)
						}

					}
					{
						p.SetState(1300)
						p.Match(SQLiteParserCLOSE_PAR)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				case antlr.ATNInvalidAltNumber:
					goto errorExit
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1308)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 154, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionContext is an interface to support dynamic dispatch.
type IFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Function_name() IFunction_nameContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	STAR() antlr.TerminalNode
	Filter_clause() IFilter_clauseContext
	Over_clause() IOver_clauseContext
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	DISTINCT_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsFunctionContext differentiates from other interfaces.
	IsFunctionContext()
}

type FunctionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionContext() *FunctionContext {
	var p = new(FunctionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function
	return p
}

func InitEmptyFunctionContext(p *FunctionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function
}

func (*FunctionContext) IsFunctionContext() {}

func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionContext {
	var p = new(FunctionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_function

	return p
}

func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionContext) Function_name() IFunction_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunction_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunction_nameContext)
}

func (s *FunctionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *FunctionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *FunctionContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *FunctionContext) Filter_clause() IFilter_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *FunctionContext) Over_clause() IOver_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOver_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *FunctionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *FunctionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FunctionContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *FunctionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *FunctionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *FunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFunction(s)
	}
}

func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFunction(s)
	}
}

func (s *FunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Function() (localctx IFunctionContext) {
	localctx = NewFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SQLiteParserRULE_function)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1309)
		p.Function_name()
	}
	{
		p.SetState(1310)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1323)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserABORT_, SQLiteParserACTION_, SQLiteParserADD_, SQLiteParserAFTER_, SQLiteParserALL_, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserAND_, SQLiteParserAS_, SQLiteParserASC_, SQLiteParserATTACH_, SQLiteParserAUTOINCREMENT_, SQLiteParserBEFORE_, SQLiteParserBEGIN_, SQLiteParserBETWEEN_, SQLiteParserBY_, SQLiteParserCASCADE_, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCHECK_, SQLiteParserCOLLATE_, SQLiteParserCOLUMN_, SQLiteParserCOMMIT_, SQLiteParserCONFLICT_, SQLiteParserCONSTRAINT_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDATABASE_, SQLiteParserDEFAULT_, SQLiteParserDEFERRABLE_, SQLiteParserDEFERRED_, SQLiteParserDELETE_, SQLiteParserDESC_, SQLiteParserDETACH_, SQLiteParserDISTINCT_, SQLiteParserDROP_, SQLiteParserEACH_, SQLiteParserELSE_, SQLiteParserEND_, SQLiteParserESCAPE_, SQLiteParserEXCEPT_, SQLiteParserEXCLUSIVE_, SQLiteParserEXISTS_, SQLiteParserEXPLAIN_, SQLiteParserFAIL_, SQLiteParserFOR_, SQLiteParserFOREIGN_, SQLiteParserFROM_, SQLiteParserFULL_, SQLiteParserGLOB_, SQLiteParserGROUP_, SQLiteParserHAVING_, SQLiteParserIF_, SQLiteParserIGNORE_, SQLiteParserIMMEDIATE_, SQLiteParserIN_, SQLiteParserINDEX_, SQLiteParserINDEXED_, SQLiteParserINITIALLY_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINSTEAD_, SQLiteParserINTERSECT_, SQLiteParserINTO_, SQLiteParserIS_, SQLiteParserISNULL_, SQLiteParserJOIN_, SQLiteParserKEY_, SQLiteParserLEFT_, SQLiteParserLIKE_, SQLiteParserLIMIT_, SQLiteParserMATCH_, SQLiteParserNATURAL_, SQLiteParserNO_, SQLiteParserNOT_, SQLiteParserNOTNULL_, SQLiteParserNULL_, SQLiteParserOF_, SQLiteParserOFFSET_, SQLiteParserON_, SQLiteParserOR_, SQLiteParserORDER_, SQLiteParserOUTER_, SQLiteParserPLAN_, SQLiteParserPRAGMA_, SQLiteParserPRIMARY_, SQLiteParserQUERY_, SQLiteParserRAISE_, SQLiteParserRECURSIVE_, SQLiteParserREFERENCES_, SQLiteParserREGEXP_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserRENAME_, SQLiteParserREPLACE_, SQLiteParserRESTRICT_, SQLiteParserRIGHT_, SQLiteParserROLLBACK_, SQLiteParserROW_, SQLiteParserROWS_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTABLE_, SQLiteParserTEMP_, SQLiteParserTEMPORARY_, SQLiteParserTEXT_, SQLiteParserTHEN_, SQLiteParserTO_, SQLiteParserTRANSACTION_, SQLiteParserTRIGGER_, SQLiteParserUNION_, SQLiteParserUNIQUE_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserVIEW_, SQLiteParserVIRTUAL_, SQLiteParserWHEN_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWITHOUT_, SQLiteParserFIRST_VALUE_, SQLiteParserOVER_, SQLiteParserPARTITION_, SQLiteParserRANGE_, SQLiteParserPRECEDING_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserFOLLOWING_, SQLiteParserCUME_DIST_, SQLiteParserDENSE_RANK_, SQLiteParserLAG_, SQLiteParserLAST_VALUE_, SQLiteParserLEAD_, SQLiteParserNTH_VALUE_, SQLiteParserNTILE_, SQLiteParserPERCENT_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_, SQLiteParserGENERATED_, SQLiteParserALWAYS_, SQLiteParserSTORED_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserWINDOW_, SQLiteParserNULLS_, SQLiteParserFIRST_, SQLiteParserLAST_, SQLiteParserFILTER_, SQLiteParserGROUPS_, SQLiteParserEXCLUDE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		p.SetState(1312)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 155, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1311)
				p.Match(SQLiteParserDISTINCT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1314)
			p.expr(0)
		}
		p.SetState(1319)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1315)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1316)
				p.expr(0)
			}

			p.SetState(1321)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case SQLiteParserSTAR:
		{
			p.SetState(1322)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCLOSE_PAR:

	default:
	}
	{
		p.SetState(1325)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1327)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1326)
			p.Filter_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1330)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 159, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1329)
			p.Over_clause()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IComparison_exprContext is an interface to support dynamic dispatch.
type IComparison_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOpe returns the ope token.
	GetOpe() antlr.Token

	// SetOpe sets the ope token.
	SetOpe(antlr.Token)

	// Getter signatures
	Column_name() IColumn_nameContext
	Literal_value() ILiteral_valueContext
	ASSIGN() antlr.TerminalNode
	NOT_EQ1() antlr.TerminalNode
	NOT_EQ2() antlr.TerminalNode
	LT() antlr.TerminalNode
	LT_EQ() antlr.TerminalNode
	GT() antlr.TerminalNode
	GT_EQ() antlr.TerminalNode

	// IsComparison_exprContext differentiates from other interfaces.
	IsComparison_exprContext()
}

type Comparison_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	ope    antlr.Token
}

func NewEmptyComparison_exprContext() *Comparison_exprContext {
	var p = new(Comparison_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_comparison_expr
	return p
}

func InitEmptyComparison_exprContext(p *Comparison_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_comparison_expr
}

func (*Comparison_exprContext) IsComparison_exprContext() {}

func NewComparison_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_exprContext {
	var p = new(Comparison_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_comparison_expr

	return p
}

func (s *Comparison_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Comparison_exprContext) GetOpe() antlr.Token { return s.ope }

func (s *Comparison_exprContext) SetOpe(v antlr.Token) { s.ope = v }

func (s *Comparison_exprContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Comparison_exprContext) Literal_value() ILiteral_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteral_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteral_valueContext)
}

func (s *Comparison_exprContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *Comparison_exprContext) NOT_EQ1() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ1, 0)
}

func (s *Comparison_exprContext) NOT_EQ2() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_EQ2, 0)
}

func (s *Comparison_exprContext) LT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT, 0)
}

func (s *Comparison_exprContext) LT_EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLT_EQ, 0)
}

func (s *Comparison_exprContext) GT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT, 0)
}

func (s *Comparison_exprContext) GT_EQ() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGT_EQ, 0)
}

func (s *Comparison_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparison_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterComparison_expr(s)
	}
}

func (s *Comparison_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitComparison_expr(s)
	}
}

func (s *Comparison_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitComparison_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Comparison_expr() (localctx IComparison_exprContext) {
	localctx = NewComparison_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SQLiteParserRULE_comparison_expr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.Column_name()
	}
	{
		p.SetState(1333)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Comparison_exprContext).ope = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&29098048) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Comparison_exprContext).ope = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1334)
		p.Literal_value()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArithmetic_exprContext is an interface to support dynamic dispatch.
type IArithmetic_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOpe returns the ope token.
	GetOpe() antlr.Token

	// SetOpe sets the ope token.
	SetOpe(antlr.Token)

	// Getter signatures
	Column_name() IColumn_nameContext
	Expr() IExprContext
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode
	STAR() antlr.TerminalNode
	DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode

	// IsArithmetic_exprContext differentiates from other interfaces.
	IsArithmetic_exprContext()
}

type Arithmetic_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
	ope    antlr.Token
}

func NewEmptyArithmetic_exprContext() *Arithmetic_exprContext {
	var p = new(Arithmetic_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_arithmetic_expr
	return p
}

func InitEmptyArithmetic_exprContext(p *Arithmetic_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_arithmetic_expr
}

func (*Arithmetic_exprContext) IsArithmetic_exprContext() {}

func NewArithmetic_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Arithmetic_exprContext {
	var p = new(Arithmetic_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_arithmetic_expr

	return p
}

func (s *Arithmetic_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Arithmetic_exprContext) GetOpe() antlr.Token { return s.ope }

func (s *Arithmetic_exprContext) SetOpe(v antlr.Token) { s.ope = v }

func (s *Arithmetic_exprContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Arithmetic_exprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Arithmetic_exprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Arithmetic_exprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Arithmetic_exprContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Arithmetic_exprContext) DIV() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDIV, 0)
}

func (s *Arithmetic_exprContext) MOD() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMOD, 0)
}

func (s *Arithmetic_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Arithmetic_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Arithmetic_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterArithmetic_expr(s)
	}
}

func (s *Arithmetic_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitArithmetic_expr(s)
	}
}

func (s *Arithmetic_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitArithmetic_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Arithmetic_expr() (localctx IArithmetic_exprContext) {
	localctx = NewArithmetic_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SQLiteParserRULE_arithmetic_expr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1336)
		p.Column_name()
	}
	{
		p.SetState(1337)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Arithmetic_exprContext).ope = _lt

		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&13184) != 0) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Arithmetic_exprContext).ope = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1338)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRaise_functionContext is an interface to support dynamic dispatch.
type IRaise_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RAISE_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	COMMA() antlr.TerminalNode
	Error_message() IError_messageContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode

	// IsRaise_functionContext differentiates from other interfaces.
	IsRaise_functionContext()
}

type Raise_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRaise_functionContext() *Raise_functionContext {
	var p = new(Raise_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
	return p
}

func InitEmptyRaise_functionContext(p *Raise_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_raise_function
}

func (*Raise_functionContext) IsRaise_functionContext() {}

func NewRaise_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raise_functionContext {
	var p = new(Raise_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_raise_function

	return p
}

func (s *Raise_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Raise_functionContext) RAISE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRAISE_, 0)
}

func (s *Raise_functionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Raise_functionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Raise_functionContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Raise_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Raise_functionContext) Error_message() IError_messageContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IError_messageContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IError_messageContext)
}

func (s *Raise_functionContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Raise_functionContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Raise_functionContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Raise_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raise_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raise_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRaise_function(s)
	}
}

func (s *Raise_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRaise_function(s)
	}
}

func (s *Raise_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRaise_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Raise_function() (localctx IRaise_functionContext) {
	localctx = NewRaise_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SQLiteParserRULE_raise_function)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1340)
		p.Match(SQLiteParserRAISE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1341)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIGNORE_:
		{
			p.SetState(1342)
			p.Match(SQLiteParserIGNORE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserABORT_, SQLiteParserFAIL_, SQLiteParserROLLBACK_:
		{
			p.SetState(1343)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || _la == SQLiteParserFAIL_ || _la == SQLiteParserROLLBACK_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(1344)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1345)
			p.Error_message()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(1348)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteral_valueContext is an interface to support dynamic dispatch.
type ILiteral_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Signed_number() ISigned_numberContext
	String_literal() IString_literalContext
	BLOB_LITERAL() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	TRUE_() antlr.TerminalNode
	FALSE_() antlr.TerminalNode
	CURRENT_TIME_() antlr.TerminalNode
	CURRENT_DATE_() antlr.TerminalNode
	CURRENT_TIMESTAMP_() antlr.TerminalNode

	// IsLiteral_valueContext differentiates from other interfaces.
	IsLiteral_valueContext()
}

type Literal_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteral_valueContext() *Literal_valueContext {
	var p = new(Literal_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
	return p
}

func InitEmptyLiteral_valueContext(p *Literal_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_literal_value
}

func (*Literal_valueContext) IsLiteral_valueContext() {}

func NewLiteral_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Literal_valueContext {
	var p = new(Literal_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_literal_value

	return p
}

func (s *Literal_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Literal_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Literal_valueContext) String_literal() IString_literalContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IString_literalContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Literal_valueContext) BLOB_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBLOB_LITERAL, 0)
}

func (s *Literal_valueContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *Literal_valueContext) TRUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRUE_, 0)
}

func (s *Literal_valueContext) FALSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFALSE_, 0)
}

func (s *Literal_valueContext) CURRENT_TIME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIME_, 0)
}

func (s *Literal_valueContext) CURRENT_DATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_DATE_, 0)
}

func (s *Literal_valueContext) CURRENT_TIMESTAMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIMESTAMP_, 0)
}

func (s *Literal_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Literal_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Literal_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterLiteral_value(s)
	}
}

func (s *Literal_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitLiteral_value(s)
	}
}

func (s *Literal_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitLiteral_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Literal_value() (localctx ILiteral_valueContext) {
	localctx = NewLiteral_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SQLiteParserRULE_literal_value)
	p.SetState(1359)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserNUMERIC_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1350)
			p.Signed_number()
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1351)
			p.String_literal()
		}

	case SQLiteParserBLOB_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1352)
			p.Match(SQLiteParserBLOB_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserNULL_:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1353)
			p.Match(SQLiteParserNULL_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserTRUE_:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1354)
			p.Match(SQLiteParserTRUE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserFALSE_:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1355)
			p.Match(SQLiteParserFALSE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCURRENT_TIME_:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1356)
			p.Match(SQLiteParserCURRENT_TIME_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCURRENT_DATE_:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1357)
			p.Match(SQLiteParserCURRENT_DATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCURRENT_TIMESTAMP_:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1358)
			p.Match(SQLiteParserCURRENT_TIMESTAMP_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBind_paramContext is an interface to support dynamic dispatch.
type IBind_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BIND_PARAMETER() antlr.TerminalNode

	// IsBind_paramContext differentiates from other interfaces.
	IsBind_paramContext()
}

type Bind_paramContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBind_paramContext() *Bind_paramContext {
	var p = new(Bind_paramContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_bind_param
	return p
}

func InitEmptyBind_paramContext(p *Bind_paramContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_bind_param
}

func (*Bind_paramContext) IsBind_paramContext() {}

func NewBind_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bind_paramContext {
	var p = new(Bind_paramContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_bind_param

	return p
}

func (s *Bind_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Bind_paramContext) BIND_PARAMETER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBIND_PARAMETER, 0)
}

func (s *Bind_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bind_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bind_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterBind_param(s)
	}
}

func (s *Bind_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitBind_param(s)
	}
}

func (s *Bind_paramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitBind_param(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Bind_param() (localctx IBind_paramContext) {
	localctx = NewBind_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SQLiteParserRULE_bind_param)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1361)
		p.Match(SQLiteParserBIND_PARAMETER)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_string_literal
	return p
}

func InitEmptyString_literalContext(p *String_literalContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_string_literal
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) String_literal() (localctx IString_literalContext) {
	localctx = NewString_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SQLiteParserRULE_string_literal)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1363)
		p.Match(SQLiteParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValue_rowContext is an interface to support dynamic dispatch.
type IValue_rowContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValue_rowContext differentiates from other interfaces.
	IsValue_rowContext()
}

type Value_rowContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValue_rowContext() *Value_rowContext {
	var p = new(Value_rowContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_value_row
	return p
}

func InitEmptyValue_rowContext(p *Value_rowContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_value_row
}

func (*Value_rowContext) IsValue_rowContext() {}

func NewValue_rowContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_rowContext {
	var p = new(Value_rowContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_value_row

	return p
}

func (s *Value_rowContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_rowContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Value_rowContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Value_rowContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Value_rowContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Value_rowContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Value_rowContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Value_rowContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_rowContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Value_rowContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterValue_row(s)
	}
}

func (s *Value_rowContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitValue_row(s)
	}
}

func (s *Value_rowContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitValue_row(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Value_row() (localctx IValue_rowContext) {
	localctx = NewValue_rowContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SQLiteParserRULE_value_row)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1365)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1366)
		p.expr(0)
	}
	p.SetState(1371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1367)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1368)
			p.expr(0)
		}

		p.SetState(1373)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1374)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IValues_clauseContext is an interface to support dynamic dispatch.
type IValues_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VALUES_() antlr.TerminalNode
	AllValue_row() []IValue_rowContext
	Value_row(i int) IValue_rowContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsValues_clauseContext differentiates from other interfaces.
	IsValues_clauseContext()
}

type Values_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValues_clauseContext() *Values_clauseContext {
	var p = new(Values_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_values_clause
	return p
}

func InitEmptyValues_clauseContext(p *Values_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_values_clause
}

func (*Values_clauseContext) IsValues_clauseContext() {}

func NewValues_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Values_clauseContext {
	var p = new(Values_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_values_clause

	return p
}

func (s *Values_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Values_clauseContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *Values_clauseContext) AllValue_row() []IValue_rowContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IValue_rowContext); ok {
			len++
		}
	}

	tst := make([]IValue_rowContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IValue_rowContext); ok {
			tst[i] = t.(IValue_rowContext)
			i++
		}
	}

	return tst
}

func (s *Values_clauseContext) Value_row(i int) IValue_rowContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValue_rowContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValue_rowContext)
}

func (s *Values_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Values_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Values_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Values_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Values_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterValues_clause(s)
	}
}

func (s *Values_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitValues_clause(s)
	}
}

func (s *Values_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitValues_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Values_clause() (localctx IValues_clauseContext) {
	localctx = NewValues_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SQLiteParserRULE_values_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1376)
		p.Match(SQLiteParserVALUES_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1377)
		p.Value_row()
	}
	p.SetState(1382)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1378)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1379)
			p.Value_row()
		}

		p.SetState(1384)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInsert_stmtContext is an interface to support dynamic dispatch.
type IInsert_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTO_() antlr.TerminalNode
	Table_name() ITable_nameContext
	INSERT_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	OR_() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	VALUES_() antlr.TerminalNode
	With_clause() IWith_clauseContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	Returning_clause() IReturning_clauseContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Values_clause() IValues_clauseContext
	Select_stmt() ISelect_stmtContext
	Upsert_clause() IUpsert_clauseContext

	// IsInsert_stmtContext differentiates from other interfaces.
	IsInsert_stmtContext()
}

type Insert_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_stmtContext() *Insert_stmtContext {
	var p = new(Insert_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
	return p
}

func InitEmptyInsert_stmtContext(p *Insert_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_insert_stmt
}

func (*Insert_stmtContext) IsInsert_stmtContext() {}

func NewInsert_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_stmtContext {
	var p = new(Insert_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_insert_stmt

	return p
}

func (s *Insert_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_stmtContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *Insert_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_stmtContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *Insert_stmtContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Insert_stmtContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Insert_stmtContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *Insert_stmtContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *Insert_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Insert_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Insert_stmtContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Insert_stmtContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Insert_stmtContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Insert_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Insert_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Insert_stmtContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Insert_stmtContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Insert_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Insert_stmtContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Insert_stmtContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Insert_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Insert_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Insert_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Insert_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Insert_stmtContext) Values_clause() IValues_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_clauseContext)
}

func (s *Insert_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Insert_stmtContext) Upsert_clause() IUpsert_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpsert_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpsert_clauseContext)
}

func (s *Insert_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitInsert_stmt(s)
	}
}

func (s *Insert_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitInsert_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Insert_stmt() (localctx IInsert_stmtContext) {
	localctx = NewInsert_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SQLiteParserRULE_insert_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1386)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1385)
			p.With_clause()
		}

	}
	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1388)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1389)
			p.Match(SQLiteParserREPLACE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(1390)
			p.Match(SQLiteParserINSERT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1391)
			p.Match(SQLiteParserOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1392)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&38280596832650241) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1395)
		p.Match(SQLiteParserINTO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1399)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1396)
			p.Schema_name()
		}
		{
			p.SetState(1397)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1401)
		p.Table_name()
	}
	p.SetState(1404)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserAS_ {
		{
			p.SetState(1402)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1403)
			p.Table_alias()
		}

	}
	p.SetState(1417)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1406)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1407)
			p.Column_name()
		}
		p.SetState(1412)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1408)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1409)
				p.Column_name()
			}

			p.SetState(1414)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1415)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	p.SetState(1428)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserSELECT_, SQLiteParserVALUES_, SQLiteParserWITH_:
		p.SetState(1421)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1419)
				p.Values_clause()
			}

		case 2:
			{
				p.SetState(1420)
				p.Select_stmt()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		p.SetState(1424)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserON_ {
			{
				p.SetState(1423)
				p.Upsert_clause()
			}

		}

	case SQLiteParserDEFAULT_:
		{
			p.SetState(1426)
			p.Match(SQLiteParserDEFAULT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1427)
			p.Match(SQLiteParserVALUES_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1431)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(1430)
			p.Returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturning_clauseContext is an interface to support dynamic dispatch.
type IReturning_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURNING_() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsReturning_clauseContext differentiates from other interfaces.
	IsReturning_clauseContext()
}

type Returning_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturning_clauseContext() *Returning_clauseContext {
	var p = new(Returning_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_returning_clause
	return p
}

func InitEmptyReturning_clauseContext(p *Returning_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_returning_clause
}

func (*Returning_clauseContext) IsReturning_clauseContext() {}

func NewReturning_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Returning_clauseContext {
	var p = new(Returning_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_returning_clause

	return p
}

func (s *Returning_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Returning_clauseContext) RETURNING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRETURNING_, 0)
}

func (s *Returning_clauseContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Returning_clauseContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Returning_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Returning_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Returning_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Returning_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Returning_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterReturning_clause(s)
	}
}

func (s *Returning_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitReturning_clause(s)
	}
}

func (s *Returning_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitReturning_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Returning_clause() (localctx IReturning_clauseContext) {
	localctx = NewReturning_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SQLiteParserRULE_returning_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Match(SQLiteParserRETURNING_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1434)
		p.Result_column()
	}
	p.SetState(1439)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1435)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1436)
			p.Result_column()
		}

		p.SetState(1441)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpsert_clauseContext is an interface to support dynamic dispatch.
type IUpsert_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	DO_() antlr.TerminalNode
	NOTHING_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	SET_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllIndexed_column() []IIndexed_columnContext
	Indexed_column(i int) IIndexed_columnContext
	CLOSE_PAR() antlr.TerminalNode
	AllASSIGN() []antlr.TerminalNode
	ASSIGN(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllWHERE_() []antlr.TerminalNode
	WHERE_(i int) antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllColumn_name_list() []IColumn_name_listContext
	Column_name_list(i int) IColumn_name_listContext

	// IsUpsert_clauseContext differentiates from other interfaces.
	IsUpsert_clauseContext()
}

type Upsert_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpsert_clauseContext() *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_upsert_clause
	return p
}

func InitEmptyUpsert_clauseContext(p *Upsert_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_upsert_clause
}

func (*Upsert_clauseContext) IsUpsert_clauseContext() {}

func NewUpsert_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Upsert_clauseContext {
	var p = new(Upsert_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_upsert_clause

	return p
}

func (s *Upsert_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Upsert_clauseContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Upsert_clauseContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *Upsert_clauseContext) DO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDO_, 0)
}

func (s *Upsert_clauseContext) NOTHING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTHING_, 0)
}

func (s *Upsert_clauseContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Upsert_clauseContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *Upsert_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Upsert_clauseContext) AllIndexed_column() []IIndexed_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			len++
		}
	}

	tst := make([]IIndexed_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIndexed_columnContext); ok {
			tst[i] = t.(IIndexed_columnContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Indexed_column(i int) IIndexed_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndexed_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndexed_columnContext)
}

func (s *Upsert_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Upsert_clauseContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserASSIGN)
}

func (s *Upsert_clauseContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, i)
}

func (s *Upsert_clauseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Upsert_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Upsert_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Upsert_clauseContext) AllWHERE_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserWHERE_)
}

func (s *Upsert_clauseContext) WHERE_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, i)
}

func (s *Upsert_clauseContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Upsert_clauseContext) AllColumn_name_list() []IColumn_name_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_name_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_name_listContext); ok {
			tst[i] = t.(IColumn_name_listContext)
			i++
		}
	}

	return tst
}

func (s *Upsert_clauseContext) Column_name_list(i int) IColumn_name_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Upsert_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Upsert_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Upsert_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpsert_clause(s)
	}
}

func (s *Upsert_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpsert_clause(s)
	}
}

func (s *Upsert_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpsert_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Upsert_clause() (localctx IUpsert_clauseContext) {
	localctx = NewUpsert_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SQLiteParserRULE_upsert_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1442)
		p.Match(SQLiteParserON_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1443)
		p.Match(SQLiteParserCONFLICT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1458)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserOPEN_PAR {
		{
			p.SetState(1444)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1445)
			p.Indexed_column()
		}
		p.SetState(1450)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1446)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1447)
				p.Indexed_column()
			}

			p.SetState(1452)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1453)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1456)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1454)
				p.Match(SQLiteParserWHERE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1455)
				p.expr(0)
			}

		}

	}
	{
		p.SetState(1460)
		p.Match(SQLiteParserDO_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1487)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserNOTHING_:
		{
			p.SetState(1461)
			p.Match(SQLiteParserNOTHING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserUPDATE_:
		{
			p.SetState(1462)
			p.Match(SQLiteParserUPDATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1463)
			p.Match(SQLiteParserSET_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1466)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 178, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1464)
				p.Column_name()
			}

		case 2:
			{
				p.SetState(1465)
				p.Column_name_list()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1468)
			p.Match(SQLiteParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1469)
			p.expr(0)
		}
		p.SetState(1480)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1470)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1473)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 179, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1471)
					p.Column_name()
				}

			case 2:
				{
					p.SetState(1472)
					p.Column_name_list()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}
			{
				p.SetState(1475)
				p.Match(SQLiteParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1476)
				p.expr(0)
			}

			p.SetState(1482)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1485)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1483)
				p.Match(SQLiteParserWHERE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1484)
				p.expr(0)
			}

		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_stmtContext is an interface to support dynamic dispatch.
type IPragma_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PRAGMA_() antlr.TerminalNode
	Pragma_name() IPragma_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	Pragma_value() IPragma_valueContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode

	// IsPragma_stmtContext differentiates from other interfaces.
	IsPragma_stmtContext()
}

type Pragma_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_stmtContext() *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
	return p
}

func InitEmptyPragma_stmtContext(p *Pragma_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_stmt
}

func (*Pragma_stmtContext) IsPragma_stmtContext() {}

func NewPragma_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_stmtContext {
	var p = new(Pragma_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_stmt

	return p
}

func (s *Pragma_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_stmtContext) PRAGMA_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRAGMA_, 0)
}

func (s *Pragma_stmtContext) Pragma_name() IPragma_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_nameContext)
}

func (s *Pragma_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Pragma_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Pragma_stmtContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *Pragma_stmtContext) Pragma_value() IPragma_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPragma_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPragma_valueContext)
}

func (s *Pragma_stmtContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Pragma_stmtContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Pragma_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_stmt(s)
	}
}

func (s *Pragma_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_stmt() (localctx IPragma_stmtContext) {
	localctx = NewPragma_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SQLiteParserRULE_pragma_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1489)
		p.Match(SQLiteParserPRAGMA_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1493)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1490)
			p.Schema_name()
		}
		{
			p.SetState(1491)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1495)
		p.Pragma_name()
	}
	p.SetState(1502)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserASSIGN:
		{
			p.SetState(1496)
			p.Match(SQLiteParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1497)
			p.Pragma_value()
		}

	case SQLiteParserOPEN_PAR:
		{
			p.SetState(1498)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1499)
			p.Pragma_value()
		}
		{
			p.SetState(1500)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserATTACH_, SQLiteParserBEGIN_, SQLiteParserCOMMIT_, SQLiteParserCOPY_, SQLiteParserCREATE_, SQLiteParserDELETE_, SQLiteParserDETACH_, SQLiteParserDROP_, SQLiteParserEND_, SQLiteParserEXPLAIN_, SQLiteParserINSERT_, SQLiteParserPRAGMA_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserREPLACE_, SQLiteParserROLLBACK_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserTRUNCATE_, SQLiteParserUPDATE_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserWITH_:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_valueContext is an interface to support dynamic dispatch.
type IPragma_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Signed_number() ISigned_numberContext
	Name() INameContext
	STRING_LITERAL() antlr.TerminalNode

	// IsPragma_valueContext differentiates from other interfaces.
	IsPragma_valueContext()
}

type Pragma_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_valueContext() *Pragma_valueContext {
	var p = new(Pragma_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
	return p
}

func InitEmptyPragma_valueContext(p *Pragma_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_value
}

func (*Pragma_valueContext) IsPragma_valueContext() {}

func NewPragma_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_valueContext {
	var p = new(Pragma_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_value

	return p
}

func (s *Pragma_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Pragma_valueContext) Name() INameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *Pragma_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Pragma_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_value(s)
	}
}

func (s *Pragma_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_value(s)
	}
}

func (s *Pragma_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_value() (localctx IPragma_valueContext) {
	localctx = NewPragma_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SQLiteParserRULE_pragma_value)
	p.SetState(1507)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 185, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1504)
			p.Signed_number()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1505)
			p.Name()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1506)
			p.Match(SQLiteParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReindex_stmtContext is an interface to support dynamic dispatch.
type IReindex_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REINDEX_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Table_name() ITable_nameContext
	Index_name() IIndex_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode

	// IsReindex_stmtContext differentiates from other interfaces.
	IsReindex_stmtContext()
}

type Reindex_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReindex_stmtContext() *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
	return p
}

func InitEmptyReindex_stmtContext(p *Reindex_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_reindex_stmt
}

func (*Reindex_stmtContext) IsReindex_stmtContext() {}

func NewReindex_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reindex_stmtContext {
	var p = new(Reindex_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_reindex_stmt

	return p
}

func (s *Reindex_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Reindex_stmtContext) REINDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREINDEX_, 0)
}

func (s *Reindex_stmtContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Reindex_stmtContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reindex_stmtContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Reindex_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Reindex_stmtContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Reindex_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reindex_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reindex_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitReindex_stmt(s)
	}
}

func (s *Reindex_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitReindex_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Reindex_stmt() (localctx IReindex_stmtContext) {
	localctx = NewReindex_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SQLiteParserRULE_reindex_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1509)
		p.Match(SQLiteParserREINDEX_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1520)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 188, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1510)
			p.Collation_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	} else if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 188, p.GetParserRuleContext()) == 2 {
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1511)
				p.Schema_name()
			}
			{
				p.SetState(1512)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1518)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1516)
				p.Table_name()
			}

		case 2:
			{
				p.SetState(1517)
				p.Index_name()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_stmtContext is an interface to support dynamic dispatch.
type ISelect_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParentQuery returns the parentQuery rule contexts.
	GetParentQuery() ISelect_coreContext

	// SetParentQuery sets the parentQuery rule contexts.
	SetParentQuery(ISelect_coreContext)

	// Getter signatures
	AllSelect_core() []ISelect_coreContext
	Select_core(i int) ISelect_coreContext
	Common_table_stmt() ICommon_table_stmtContext
	AllCompound_operator() []ICompound_operatorContext
	Compound_operator(i int) ICompound_operatorContext
	Order_by_stmt() IOrder_by_stmtContext
	Limit_stmt() ILimit_stmtContext

	// IsSelect_stmtContext differentiates from other interfaces.
	IsSelect_stmtContext()
}

type Select_stmtContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	parentQuery ISelect_coreContext
}

func NewEmptySelect_stmtContext() *Select_stmtContext {
	var p = new(Select_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
	return p
}

func InitEmptySelect_stmtContext(p *Select_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_stmt
}

func (*Select_stmtContext) IsSelect_stmtContext() {}

func NewSelect_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_stmtContext {
	var p = new(Select_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_stmt

	return p
}

func (s *Select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_stmtContext) GetParentQuery() ISelect_coreContext { return s.parentQuery }

func (s *Select_stmtContext) SetParentQuery(v ISelect_coreContext) { s.parentQuery = v }

func (s *Select_stmtContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Select_stmtContext) Common_table_stmt() ICommon_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_stmtContext)
}

func (s *Select_stmtContext) AllCompound_operator() []ICompound_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			len++
		}
	}

	tst := make([]ICompound_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICompound_operatorContext); ok {
			tst[i] = t.(ICompound_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Select_stmtContext) Compound_operator(i int) ICompound_operatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICompound_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICompound_operatorContext)
}

func (s *Select_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Select_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSelect_stmt(s)
	}
}

func (s *Select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSelect_stmt(s)
	}
}

func (s *Select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSelect_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_stmt() (localctx ISelect_stmtContext) {
	localctx = NewSelect_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SQLiteParserRULE_select_stmt)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1523)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1522)
			p.Common_table_stmt()
		}

	}
	{
		p.SetState(1525)

		var _x = p.Select_core()

		localctx.(*Select_stmtContext).parentQuery = _x
	}
	p.SetState(1531)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1526)
				p.Compound_operator()
			}
			{
				p.SetState(1527)
				p.Select_core()
			}

		}
		p.SetState(1533)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserORDER_ {
		{
			p.SetState(1534)
			p.Order_by_stmt()
		}

	}
	p.SetState(1538)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ {
		{
			p.SetState(1537)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_clauseContext is an interface to support dynamic dispatch.
type IJoin_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllTable_or_subquery() []ITable_or_subqueryContext
	Table_or_subquery(i int) ITable_or_subqueryContext
	AllJoin_operator() []IJoin_operatorContext
	Join_operator(i int) IJoin_operatorContext
	AllJoin_constraint() []IJoin_constraintContext
	Join_constraint(i int) IJoin_constraintContext

	// IsJoin_clauseContext differentiates from other interfaces.
	IsJoin_clauseContext()
}

type Join_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_clauseContext() *Join_clauseContext {
	var p = new(Join_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_clause
	return p
}

func InitEmptyJoin_clauseContext(p *Join_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_clause
}

func (*Join_clauseContext) IsJoin_clauseContext() {}

func NewJoin_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_clauseContext {
	var p = new(Join_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_clause

	return p
}

func (s *Join_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_clauseContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Join_clauseContext) AllJoin_operator() []IJoin_operatorContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			len++
		}
	}

	tst := make([]IJoin_operatorContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_operatorContext); ok {
			tst[i] = t.(IJoin_operatorContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_operator(i int) IJoin_operatorContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_operatorContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_operatorContext)
}

func (s *Join_clauseContext) AllJoin_constraint() []IJoin_constraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			len++
		}
	}

	tst := make([]IJoin_constraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IJoin_constraintContext); ok {
			tst[i] = t.(IJoin_constraintContext)
			i++
		}
	}

	return tst
}

func (s *Join_clauseContext) Join_constraint(i int) IJoin_constraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_constraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_constraintContext)
}

func (s *Join_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterJoin_clause(s)
	}
}

func (s *Join_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitJoin_clause(s)
	}
}

func (s *Join_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitJoin_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_clause() (localctx IJoin_clauseContext) {
	localctx = NewJoin_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SQLiteParserRULE_join_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1540)
		p.Table_or_subquery()
	}
	p.SetState(1548)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA || _la == SQLiteParserCROSS_ || ((int64((_la-91)) & ^0x3f) == 0 && ((int64(1)<<(_la-91))&8833) != 0) {
		{
			p.SetState(1541)
			p.Join_operator()
		}
		{
			p.SetState(1542)
			p.Table_or_subquery()
		}
		p.SetState(1544)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 193, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1543)
				p.Join_constraint()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

		p.SetState(1550)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISelect_coreContext is an interface to support dynamic dispatch.
type ISelect_coreContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhereExpr returns the whereExpr rule contexts.
	GetWhereExpr() IExprContext

	// Get_expr returns the _expr rule contexts.
	Get_expr() IExprContext

	// GetHavingExpr returns the havingExpr rule contexts.
	GetHavingExpr() IExprContext

	// SetWhereExpr sets the whereExpr rule contexts.
	SetWhereExpr(IExprContext)

	// Set_expr sets the _expr rule contexts.
	Set_expr(IExprContext)

	// SetHavingExpr sets the havingExpr rule contexts.
	SetHavingExpr(IExprContext)

	// GetGroupByExpr returns the groupByExpr rule context list.
	GetGroupByExpr() []IExprContext

	// SetGroupByExpr sets the groupByExpr rule context list.
	SetGroupByExpr([]IExprContext)

	// Getter signatures
	SELECT_() antlr.TerminalNode
	AllResult_column() []IResult_columnContext
	Result_column(i int) IResult_columnContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM_() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	GROUP_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	WINDOW_() antlr.TerminalNode
	AllWindow_name() []IWindow_nameContext
	Window_name(i int) IWindow_nameContext
	AllAS_() []antlr.TerminalNode
	AS_(i int) antlr.TerminalNode
	AllWindow_defn() []IWindow_defnContext
	Window_defn(i int) IWindow_defnContext
	DISTINCT_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllFrom() []IFromContext
	From(i int) IFromContext
	Join_clause() IJoin_clauseContext
	HAVING_() antlr.TerminalNode
	Values_clause() IValues_clauseContext

	// IsSelect_coreContext differentiates from other interfaces.
	IsSelect_coreContext()
}

type Select_coreContext struct {
	antlr.BaseParserRuleContext
	parser      antlr.Parser
	whereExpr   IExprContext
	_expr       IExprContext
	groupByExpr []IExprContext
	havingExpr  IExprContext
}

func NewEmptySelect_coreContext() *Select_coreContext {
	var p = new(Select_coreContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
	return p
}

func InitEmptySelect_coreContext(p *Select_coreContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_select_core
}

func (*Select_coreContext) IsSelect_coreContext() {}

func NewSelect_coreContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_coreContext {
	var p = new(Select_coreContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_select_core

	return p
}

func (s *Select_coreContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_coreContext) GetWhereExpr() IExprContext { return s.whereExpr }

func (s *Select_coreContext) Get_expr() IExprContext { return s._expr }

func (s *Select_coreContext) GetHavingExpr() IExprContext { return s.havingExpr }

func (s *Select_coreContext) SetWhereExpr(v IExprContext) { s.whereExpr = v }

func (s *Select_coreContext) Set_expr(v IExprContext) { s._expr = v }

func (s *Select_coreContext) SetHavingExpr(v IExprContext) { s.havingExpr = v }

func (s *Select_coreContext) GetGroupByExpr() []IExprContext { return s.groupByExpr }

func (s *Select_coreContext) SetGroupByExpr(v []IExprContext) { s.groupByExpr = v }

func (s *Select_coreContext) SELECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSELECT_, 0)
}

func (s *Select_coreContext) AllResult_column() []IResult_columnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResult_columnContext); ok {
			len++
		}
	}

	tst := make([]IResult_columnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResult_columnContext); ok {
			tst[i] = t.(IResult_columnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Result_column(i int) IResult_columnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResult_columnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResult_columnContext)
}

func (s *Select_coreContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Select_coreContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Select_coreContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Select_coreContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Select_coreContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *Select_coreContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Select_coreContext) WINDOW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWINDOW_, 0)
}

func (s *Select_coreContext) AllWindow_name() []IWindow_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_nameContext); ok {
			len++
		}
	}

	tst := make([]IWindow_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_nameContext); ok {
			tst[i] = t.(IWindow_nameContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Window_name(i int) IWindow_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Select_coreContext) AllAS_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserAS_)
}

func (s *Select_coreContext) AS_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, i)
}

func (s *Select_coreContext) AllWindow_defn() []IWindow_defnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWindow_defnContext); ok {
			len++
		}
	}

	tst := make([]IWindow_defnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWindow_defnContext); ok {
			tst[i] = t.(IWindow_defnContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Window_defn(i int) IWindow_defnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_defnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_defnContext)
}

func (s *Select_coreContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *Select_coreContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *Select_coreContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Select_coreContext) AllFrom() []IFromContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFromContext); ok {
			len++
		}
	}

	tst := make([]IFromContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFromContext); ok {
			tst[i] = t.(IFromContext)
			i++
		}
	}

	return tst
}

func (s *Select_coreContext) From(i int) IFromContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFromContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFromContext)
}

func (s *Select_coreContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Select_coreContext) HAVING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserHAVING_, 0)
}

func (s *Select_coreContext) Values_clause() IValues_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IValues_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IValues_clauseContext)
}

func (s *Select_coreContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_coreContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_coreContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSelect_core(s)
	}
}

func (s *Select_coreContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSelect_core(s)
	}
}

func (s *Select_coreContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSelect_core(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Select_core() (localctx ISelect_coreContext) {
	localctx = NewSelect_coreContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SQLiteParserRULE_select_core)
	var _la int

	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserSELECT_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1551)
			p.Match(SQLiteParserSELECT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1553)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1552)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLiteParserALL_ || _la == SQLiteParserDISTINCT_) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1555)
			p.Result_column()
		}
		p.SetState(1560)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1556)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1557)
				p.Result_column()
			}

			p.SetState(1562)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1575)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserFROM_ {
			{
				p.SetState(1563)
				p.Match(SQLiteParserFROM_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1573)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 198, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1564)
					p.From()
				}
				p.SetState(1569)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				for _la == SQLiteParserCOMMA {
					{
						p.SetState(1565)
						p.Match(SQLiteParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(1566)
						p.From()
					}

					p.SetState(1571)
					p.GetErrorHandler().Sync(p)
					if p.HasError() {
						goto errorExit
					}
					_la = p.GetTokenStream().LA(1)
				}

			case 2:
				{
					p.SetState(1572)
					p.Join_clause()
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(1579)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWHERE_ {
			{
				p.SetState(1577)
				p.Match(SQLiteParserWHERE_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1578)

				var _x = p.expr(0)

				localctx.(*Select_coreContext).whereExpr = _x
			}

		}
		p.SetState(1595)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserGROUP_ {
			{
				p.SetState(1581)
				p.Match(SQLiteParserGROUP_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1582)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1583)

				var _x = p.expr(0)

				localctx.(*Select_coreContext)._expr = _x
			}
			localctx.(*Select_coreContext).groupByExpr = append(localctx.(*Select_coreContext).groupByExpr, localctx.(*Select_coreContext)._expr)
			p.SetState(1588)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1584)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1585)

					var _x = p.expr(0)

					localctx.(*Select_coreContext)._expr = _x
				}
				localctx.(*Select_coreContext).groupByExpr = append(localctx.(*Select_coreContext).groupByExpr, localctx.(*Select_coreContext)._expr)

				p.SetState(1590)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(1593)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserHAVING_ {
				{
					p.SetState(1591)
					p.Match(SQLiteParserHAVING_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1592)

					var _x = p.expr(0)

					localctx.(*Select_coreContext).havingExpr = _x
				}

			}

		}
		p.SetState(1611)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserWINDOW_ {
			{
				p.SetState(1597)
				p.Match(SQLiteParserWINDOW_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1598)
				p.Window_name()
			}
			{
				p.SetState(1599)
				p.Match(SQLiteParserAS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1600)
				p.Window_defn()
			}
			p.SetState(1608)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1601)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1602)
					p.Window_name()
				}
				{
					p.SetState(1603)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1604)
					p.Window_defn()
				}

				p.SetState(1610)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}

	case SQLiteParserVALUES_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1613)
			p.Values_clause()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFactored_select_stmtContext is an interface to support dynamic dispatch.
type IFactored_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_stmt() ISelect_stmtContext

	// IsFactored_select_stmtContext differentiates from other interfaces.
	IsFactored_select_stmtContext()
}

type Factored_select_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFactored_select_stmtContext() *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt
	return p
}

func InitEmptyFactored_select_stmtContext(p *Factored_select_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt
}

func (*Factored_select_stmtContext) IsFactored_select_stmtContext() {}

func NewFactored_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Factored_select_stmtContext {
	var p = new(Factored_select_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_factored_select_stmt

	return p
}

func (s *Factored_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Factored_select_stmtContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Factored_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Factored_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Factored_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFactored_select_stmt(s)
	}
}

func (s *Factored_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFactored_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Factored_select_stmt() (localctx IFactored_select_stmtContext) {
	localctx = NewFactored_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SQLiteParserRULE_factored_select_stmt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1616)
		p.Select_stmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_select_stmtContext is an interface to support dynamic dispatch.
type ISimple_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_core() ISelect_coreContext
	Common_table_stmt() ICommon_table_stmtContext
	Order_by_stmt() IOrder_by_stmtContext
	Limit_stmt() ILimit_stmtContext

	// IsSimple_select_stmtContext differentiates from other interfaces.
	IsSimple_select_stmtContext()
}

type Simple_select_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_select_stmtContext() *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt
	return p
}

func InitEmptySimple_select_stmtContext(p *Simple_select_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt
}

func (*Simple_select_stmtContext) IsSimple_select_stmtContext() {}

func NewSimple_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_select_stmtContext {
	var p = new(Simple_select_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_select_stmt

	return p
}

func (s *Simple_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_select_stmtContext) Select_core() ISelect_coreContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Simple_select_stmtContext) Common_table_stmt() ICommon_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_stmtContext)
}

func (s *Simple_select_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Simple_select_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Simple_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSimple_select_stmt(s)
	}
}

func (s *Simple_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSimple_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Simple_select_stmt() (localctx ISimple_select_stmtContext) {
	localctx = NewSimple_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SQLiteParserRULE_simple_select_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1619)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1618)
			p.Common_table_stmt()
		}

	}
	{
		p.SetState(1621)
		p.Select_core()
	}
	p.SetState(1623)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserORDER_ {
		{
			p.SetState(1622)
			p.Order_by_stmt()
		}

	}
	p.SetState(1626)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ {
		{
			p.SetState(1625)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_select_stmtContext is an interface to support dynamic dispatch.
type ICompound_select_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSelect_core() []ISelect_coreContext
	Select_core(i int) ISelect_coreContext
	Common_table_stmt() ICommon_table_stmtContext
	Order_by_stmt() IOrder_by_stmtContext
	Limit_stmt() ILimit_stmtContext
	AllUNION_() []antlr.TerminalNode
	UNION_(i int) antlr.TerminalNode
	AllINTERSECT_() []antlr.TerminalNode
	INTERSECT_(i int) antlr.TerminalNode
	AllEXCEPT_() []antlr.TerminalNode
	EXCEPT_(i int) antlr.TerminalNode
	AllALL_() []antlr.TerminalNode
	ALL_(i int) antlr.TerminalNode

	// IsCompound_select_stmtContext differentiates from other interfaces.
	IsCompound_select_stmtContext()
}

type Compound_select_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_select_stmtContext() *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt
	return p
}

func InitEmptyCompound_select_stmtContext(p *Compound_select_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt
}

func (*Compound_select_stmtContext) IsCompound_select_stmtContext() {}

func NewCompound_select_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_select_stmtContext {
	var p = new(Compound_select_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_select_stmt

	return p
}

func (s *Compound_select_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_select_stmtContext) AllSelect_core() []ISelect_coreContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISelect_coreContext); ok {
			len++
		}
	}

	tst := make([]ISelect_coreContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISelect_coreContext); ok {
			tst[i] = t.(ISelect_coreContext)
			i++
		}
	}

	return tst
}

func (s *Compound_select_stmtContext) Select_core(i int) ISelect_coreContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_coreContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_coreContext)
}

func (s *Compound_select_stmtContext) Common_table_stmt() ICommon_table_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_stmtContext)
}

func (s *Compound_select_stmtContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Compound_select_stmtContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Compound_select_stmtContext) AllUNION_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserUNION_)
}

func (s *Compound_select_stmtContext) UNION_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, i)
}

func (s *Compound_select_stmtContext) AllINTERSECT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserINTERSECT_)
}

func (s *Compound_select_stmtContext) INTERSECT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTERSECT_, i)
}

func (s *Compound_select_stmtContext) AllEXCEPT_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserEXCEPT_)
}

func (s *Compound_select_stmtContext) EXCEPT_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCEPT_, i)
}

func (s *Compound_select_stmtContext) AllALL_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserALL_)
}

func (s *Compound_select_stmtContext) ALL_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, i)
}

func (s *Compound_select_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_select_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_select_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCompound_select_stmt(s)
	}
}

func (s *Compound_select_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCompound_select_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_select_stmt() (localctx ICompound_select_stmtContext) {
	localctx = NewCompound_select_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SQLiteParserRULE_compound_select_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1629)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1628)
			p.Common_table_stmt()
		}

	}
	{
		p.SetState(1631)
		p.Select_core()
	}
	p.SetState(1641)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SQLiteParserEXCEPT_ || _la == SQLiteParserINTERSECT_ || _la == SQLiteParserUNION_ {
		p.SetState(1638)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserUNION_:
			{
				p.SetState(1632)
				p.Match(SQLiteParserUNION_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1634)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserALL_ {
				{
					p.SetState(1633)
					p.Match(SQLiteParserALL_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case SQLiteParserINTERSECT_:
			{
				p.SetState(1636)
				p.Match(SQLiteParserINTERSECT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserEXCEPT_:
			{
				p.SetState(1637)
				p.Match(SQLiteParserEXCEPT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}
		{
			p.SetState(1640)
			p.Select_core()
		}

		p.SetState(1643)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1646)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserORDER_ {
		{
			p.SetState(1645)
			p.Order_by_stmt()
		}

	}
	p.SetState(1649)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ {
		{
			p.SetState(1648)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFromContext is an interface to support dynamic dispatch.
type IFromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	From_table() IFrom_tableContext
	From_function() IFrom_functionContext
	From_select() IFrom_selectContext
	From_table_or_subquery() IFrom_table_or_subqueryContext

	// IsFromContext differentiates from other interfaces.
	IsFromContext()
}

type FromContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFromContext() *FromContext {
	var p = new(FromContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from
	return p
}

func InitEmptyFromContext(p *FromContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from
}

func (*FromContext) IsFromContext() {}

func NewFromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FromContext {
	var p = new(FromContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from

	return p
}

func (s *FromContext) GetParser() antlr.Parser { return s.parser }

func (s *FromContext) From_table() IFrom_tableContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_tableContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_tableContext)
}

func (s *FromContext) From_function() IFrom_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_functionContext)
}

func (s *FromContext) From_select() IFrom_selectContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_selectContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_selectContext)
}

func (s *FromContext) From_table_or_subquery() IFrom_table_or_subqueryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrom_table_or_subqueryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrom_table_or_subqueryContext)
}

func (s *FromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom(s)
	}
}

func (s *FromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom(s)
	}
}

func (s *FromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From() (localctx IFromContext) {
	localctx = NewFromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SQLiteParserRULE_from)
	p.SetState(1655)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 216, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1651)
			p.From_table()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1652)
			p.From_function()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1653)
			p.From_select()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1654)
			p.From_table_or_subquery()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_tableContext is an interface to support dynamic dispatch.
type IFrom_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	INDEXED_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	NOT_() antlr.TerminalNode
	AS_() antlr.TerminalNode

	// IsFrom_tableContext differentiates from other interfaces.
	IsFrom_tableContext()
}

type From_tableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_tableContext() *From_tableContext {
	var p = new(From_tableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_table
	return p
}

func InitEmptyFrom_tableContext(p *From_tableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_table
}

func (*From_tableContext) IsFrom_tableContext() {}

func NewFrom_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_tableContext {
	var p = new(From_tableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from_table

	return p
}

func (s *From_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *From_tableContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *From_tableContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *From_tableContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *From_tableContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *From_tableContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *From_tableContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *From_tableContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *From_tableContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *From_tableContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *From_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom_table(s)
	}
}

func (s *From_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom_table(s)
	}
}

func (s *From_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From_table() (localctx IFrom_tableContext) {
	localctx = NewFrom_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SQLiteParserRULE_from_table)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1660)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 217, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1657)
			p.Schema_name()
		}
		{
			p.SetState(1658)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1662)
		p.Table_name()
	}
	p.SetState(1667)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
		p.SetState(1664)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1663)
				p.Match(SQLiteParserAS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1666)
			p.Table_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1674)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserINDEXED_:
		{
			p.SetState(1669)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1670)
			p.Match(SQLiteParserBY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1671)
			p.Index_name()
		}

	case SQLiteParserNOT_:
		{
			p.SetState(1672)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1673)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserATTACH_, SQLiteParserBEGIN_, SQLiteParserCOMMIT_, SQLiteParserCOPY_, SQLiteParserCREATE_, SQLiteParserDELETE_, SQLiteParserDETACH_, SQLiteParserDROP_, SQLiteParserEND_, SQLiteParserEXCEPT_, SQLiteParserEXPLAIN_, SQLiteParserGROUP_, SQLiteParserINSERT_, SQLiteParserINTERSECT_, SQLiteParserLIMIT_, SQLiteParserON_, SQLiteParserORDER_, SQLiteParserPRAGMA_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserREPLACE_, SQLiteParserRETURNING_, SQLiteParserROLLBACK_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserTRUNCATE_, SQLiteParserUNION_, SQLiteParserUPDATE_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWINDOW_:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_functionContext is an interface to support dynamic dispatch.
type IFrom_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_function_name() ITable_function_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	CLOSE_PAR() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	Table_alias() ITable_aliasContext
	AS_() antlr.TerminalNode

	// IsFrom_functionContext differentiates from other interfaces.
	IsFrom_functionContext()
}

type From_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_functionContext() *From_functionContext {
	var p = new(From_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_function
	return p
}

func InitEmptyFrom_functionContext(p *From_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_function
}

func (*From_functionContext) IsFrom_functionContext() {}

func NewFrom_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_functionContext {
	var p = new(From_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from_function

	return p
}

func (s *From_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *From_functionContext) Table_function_name() ITable_function_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_function_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *From_functionContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *From_functionContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *From_functionContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *From_functionContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *From_functionContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *From_functionContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *From_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *From_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *From_functionContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *From_functionContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *From_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom_function(s)
	}
}

func (s *From_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom_function(s)
	}
}

func (s *From_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From_function() (localctx IFrom_functionContext) {
	localctx = NewFrom_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SQLiteParserRULE_from_function)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1679)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1676)
			p.Schema_name()
		}
		{
			p.SetState(1677)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1681)
		p.Table_function_name()
	}
	{
		p.SetState(1682)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1683)
		p.expr(0)
	}
	p.SetState(1688)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1684)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1685)
			p.expr(0)
		}

		p.SetState(1690)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1691)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1696)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 224, p.GetParserRuleContext()) == 1 {
		p.SetState(1693)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 223, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1692)
				p.Match(SQLiteParserAS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1695)
			p.Table_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_table_or_subqueryContext is an interface to support dynamic dispatch.
type IFrom_table_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	AllTable_or_subquery() []ITable_or_subqueryContext
	Table_or_subquery(i int) ITable_or_subqueryContext
	Join_clause() IJoin_clauseContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsFrom_table_or_subqueryContext differentiates from other interfaces.
	IsFrom_table_or_subqueryContext()
}

type From_table_or_subqueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_table_or_subqueryContext() *From_table_or_subqueryContext {
	var p = new(From_table_or_subqueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_table_or_subquery
	return p
}

func InitEmptyFrom_table_or_subqueryContext(p *From_table_or_subqueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_table_or_subquery
}

func (*From_table_or_subqueryContext) IsFrom_table_or_subqueryContext() {}

func NewFrom_table_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_table_or_subqueryContext {
	var p = new(From_table_or_subqueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from_table_or_subquery

	return p
}

func (s *From_table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *From_table_or_subqueryContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *From_table_or_subqueryContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *From_table_or_subqueryContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *From_table_or_subqueryContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *From_table_or_subqueryContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *From_table_or_subqueryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *From_table_or_subqueryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *From_table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom_table_or_subquery(s)
	}
}

func (s *From_table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom_table_or_subquery(s)
	}
}

func (s *From_table_or_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom_table_or_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From_table_or_subquery() (localctx IFrom_table_or_subqueryContext) {
	localctx = NewFrom_table_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SQLiteParserRULE_from_table_or_subquery)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1698)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1708)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 226, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1699)
			p.Table_or_subquery()
		}
		p.SetState(1704)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1700)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1701)
				p.Table_or_subquery()
			}

			p.SetState(1706)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(1707)
			p.Join_clause()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1710)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrom_selectContext is an interface to support dynamic dispatch.
type IFrom_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	Select_stmt() ISelect_stmtContext
	CLOSE_PAR() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	AS_() antlr.TerminalNode

	// IsFrom_selectContext differentiates from other interfaces.
	IsFrom_selectContext()
}

type From_selectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_selectContext() *From_selectContext {
	var p = new(From_selectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_select
	return p
}

func InitEmptyFrom_selectContext(p *From_selectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_from_select
}

func (*From_selectContext) IsFrom_selectContext() {}

func NewFrom_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_selectContext {
	var p = new(From_selectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_from_select

	return p
}

func (s *From_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *From_selectContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *From_selectContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *From_selectContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *From_selectContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *From_selectContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *From_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrom_select(s)
	}
}

func (s *From_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrom_select(s)
	}
}

func (s *From_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrom_select(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) From_select() (localctx IFrom_selectContext) {
	localctx = NewFrom_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SQLiteParserRULE_from_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1712)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1713)
		p.Select_stmt()
	}
	{
		p.SetState(1714)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1719)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 228, p.GetParserRuleContext()) == 1 {
		p.SetState(1716)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 227, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1715)
				p.Match(SQLiteParserAS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1718)
			p.Table_alias()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_subqueryContext is an interface to support dynamic dispatch.
type ITable_or_subqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	Table_alias() ITable_aliasContext
	INDEXED_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	NOT_() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Table_function_name() ITable_function_nameContext
	OPEN_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	AllTable_or_subquery() []ITable_or_subqueryContext
	Table_or_subquery(i int) ITable_or_subqueryContext
	Join_clause() IJoin_clauseContext
	Select_stmt() ISelect_stmtContext

	// IsTable_or_subqueryContext differentiates from other interfaces.
	IsTable_or_subqueryContext()
}

type Table_or_subqueryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_subqueryContext() *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
	return p
}

func InitEmptyTable_or_subqueryContext(p *Table_or_subqueryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_subquery
}

func (*Table_or_subqueryContext) IsTable_or_subqueryContext() {}

func NewTable_or_subqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_subqueryContext {
	var p = new(Table_or_subqueryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_subquery

	return p
}

func (s *Table_or_subqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_subqueryContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_or_subqueryContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Table_or_subqueryContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Table_or_subqueryContext) Table_alias() ITable_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Table_or_subqueryContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *Table_or_subqueryContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Table_or_subqueryContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Table_or_subqueryContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Table_or_subqueryContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Table_or_subqueryContext) Table_function_name() ITable_function_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_function_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_function_nameContext)
}

func (s *Table_or_subqueryContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Table_or_subqueryContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Table_or_subqueryContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Table_or_subqueryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Table_or_subqueryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Table_or_subqueryContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Table_or_subqueryContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Table_or_subqueryContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Table_or_subqueryContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Table_or_subqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_subqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_subqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_or_subquery(s)
	}
}

func (s *Table_or_subqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_or_subquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_subquery() (localctx ITable_or_subqueryContext) {
	localctx = NewTable_or_subqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SQLiteParserRULE_table_or_subquery)
	var _la int

	p.SetState(1785)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1724)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1721)
				p.Schema_name()
			}
			{
				p.SetState(1722)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1726)
			p.Table_name()
		}
		p.SetState(1731)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 231, p.GetParserRuleContext()) == 1 {
			p.SetState(1728)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1727)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1730)
				p.Table_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(1738)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case SQLiteParserINDEXED_:
			{
				p.SetState(1733)
				p.Match(SQLiteParserINDEXED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1734)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1735)
				p.Index_name()
			}

		case SQLiteParserNOT_:
			{
				p.SetState(1736)
				p.Match(SQLiteParserNOT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1737)
				p.Match(SQLiteParserINDEXED_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserCLOSE_PAR, SQLiteParserCOMMA, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserATTACH_, SQLiteParserBEGIN_, SQLiteParserCOMMIT_, SQLiteParserCOPY_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserDELETE_, SQLiteParserDETACH_, SQLiteParserDROP_, SQLiteParserEND_, SQLiteParserEXCEPT_, SQLiteParserEXPLAIN_, SQLiteParserGROUP_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINTERSECT_, SQLiteParserJOIN_, SQLiteParserLEFT_, SQLiteParserLIMIT_, SQLiteParserNATURAL_, SQLiteParserON_, SQLiteParserORDER_, SQLiteParserPRAGMA_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserREPLACE_, SQLiteParserRETURNING_, SQLiteParserROLLBACK_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserTRUNCATE_, SQLiteParserUNION_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWINDOW_:

		default:
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1743)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 233, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1740)
				p.Schema_name()
			}
			{
				p.SetState(1741)
				p.Match(SQLiteParserDOT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(1745)
			p.Table_function_name()
		}
		{
			p.SetState(1746)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1747)
			p.expr(0)
		}
		p.SetState(1752)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1748)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1749)
				p.expr(0)
			}

			p.SetState(1754)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1755)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 236, p.GetParserRuleContext()) == 1 {
			p.SetState(1757)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1756)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1759)
				p.Table_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1762)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1772)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 238, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1763)
				p.Table_or_subquery()
			}
			p.SetState(1768)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1764)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1765)
					p.Table_or_subquery()
				}

				p.SetState(1770)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(1771)
				p.Join_clause()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1774)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1776)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1777)
			p.Select_stmt()
		}
		{
			p.SetState(1778)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1783)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 240, p.GetParserRuleContext()) == 1 {
			p.SetState(1780)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(1779)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			} else if p.HasError() { // JIM
				goto errorExit
			}
			{
				p.SetState(1782)
				p.Table_alias()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResult_columnContext is an interface to support dynamic dispatch.
type IResult_columnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STAR() antlr.TerminalNode
	Table_name() ITable_nameContext
	DOT() antlr.TerminalNode
	Expr() IExprContext
	Column_alias() IColumn_aliasContext
	AS_() antlr.TerminalNode

	// IsResult_columnContext differentiates from other interfaces.
	IsResult_columnContext()
}

type Result_columnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResult_columnContext() *Result_columnContext {
	var p = new(Result_columnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
	return p
}

func InitEmptyResult_columnContext(p *Result_columnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_result_column
}

func (*Result_columnContext) IsResult_columnContext() {}

func NewResult_columnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Result_columnContext {
	var p = new(Result_columnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_result_column

	return p
}

func (s *Result_columnContext) GetParser() antlr.Parser { return s.parser }

func (s *Result_columnContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Result_columnContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Result_columnContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Result_columnContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Result_columnContext) Column_alias() IColumn_aliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_aliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Result_columnContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Result_columnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Result_columnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Result_columnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterResult_column(s)
	}
}

func (s *Result_columnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitResult_column(s)
	}
}

func (s *Result_columnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitResult_column(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Result_column() (localctx IResult_columnContext) {
	localctx = NewResult_columnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SQLiteParserRULE_result_column)
	var _la int

	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 244, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1787)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1788)
			p.Table_name()
		}
		{
			p.SetState(1789)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1790)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1792)
			p.expr(0)
		}
		p.SetState(1797)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserAS_ || _la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL {
			p.SetState(1794)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserAS_ {
				{
					p.SetState(1793)
					p.Match(SQLiteParserAS_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			{
				p.SetState(1796)
				p.Column_alias()
			}

		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_operatorContext is an interface to support dynamic dispatch.
type IJoin_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	JOIN_() antlr.TerminalNode
	NATURAL_() antlr.TerminalNode
	LEFT_() antlr.TerminalNode
	INNER_() antlr.TerminalNode
	CROSS_() antlr.TerminalNode
	OUTER_() antlr.TerminalNode

	// IsJoin_operatorContext differentiates from other interfaces.
	IsJoin_operatorContext()
}

type Join_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_operatorContext() *Join_operatorContext {
	var p = new(Join_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
	return p
}

func InitEmptyJoin_operatorContext(p *Join_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_operator
}

func (*Join_operatorContext) IsJoin_operatorContext() {}

func NewJoin_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_operatorContext {
	var p = new(Join_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_operator

	return p
}

func (s *Join_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_operatorContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Join_operatorContext) JOIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserJOIN_, 0)
}

func (s *Join_operatorContext) NATURAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNATURAL_, 0)
}

func (s *Join_operatorContext) LEFT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEFT_, 0)
}

func (s *Join_operatorContext) INNER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINNER_, 0)
}

func (s *Join_operatorContext) CROSS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCROSS_, 0)
}

func (s *Join_operatorContext) OUTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOUTER_, 0)
}

func (s *Join_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterJoin_operator(s)
	}
}

func (s *Join_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitJoin_operator(s)
	}
}

func (s *Join_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitJoin_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_operator() (localctx IJoin_operatorContext) {
	localctx = NewJoin_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SQLiteParserRULE_join_operator)
	var _la int

	p.SetState(1814)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1801)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCROSS_, SQLiteParserINNER_, SQLiteParserJOIN_, SQLiteParserLEFT_, SQLiteParserNATURAL_:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1803)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserNATURAL_ {
			{
				p.SetState(1802)
				p.Match(SQLiteParserNATURAL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1811)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		switch p.GetTokenStream().LA(1) {
		case SQLiteParserLEFT_:
			{
				p.SetState(1805)
				p.Match(SQLiteParserLEFT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(1807)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == SQLiteParserOUTER_ {
				{
					p.SetState(1806)
					p.Match(SQLiteParserOUTER_)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}

		case SQLiteParserINNER_:
			{
				p.SetState(1809)
				p.Match(SQLiteParserINNER_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCROSS_:
			{
				p.SetState(1810)
				p.Match(SQLiteParserCROSS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserJOIN_:

		default:
		}
		{
			p.SetState(1813)
			p.Match(SQLiteParserJOIN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IJoin_constraintContext is an interface to support dynamic dispatch.
type IJoin_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ON_() antlr.TerminalNode
	Expr() IExprContext
	USING_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsJoin_constraintContext differentiates from other interfaces.
	IsJoin_constraintContext()
}

type Join_constraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_constraintContext() *Join_constraintContext {
	var p = new(Join_constraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
	return p
}

func InitEmptyJoin_constraintContext(p *Join_constraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_join_constraint
}

func (*Join_constraintContext) IsJoin_constraintContext() {}

func NewJoin_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_constraintContext {
	var p = new(Join_constraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_join_constraint

	return p
}

func (s *Join_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_constraintContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *Join_constraintContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Join_constraintContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *Join_constraintContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Join_constraintContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Join_constraintContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Join_constraintContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Join_constraintContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Join_constraintContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Join_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterJoin_constraint(s)
	}
}

func (s *Join_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitJoin_constraint(s)
	}
}

func (s *Join_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitJoin_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Join_constraint() (localctx IJoin_constraintContext) {
	localctx = NewJoin_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SQLiteParserRULE_join_constraint)
	var _la int

	p.SetState(1830)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserON_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1816)
			p.Match(SQLiteParserON_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1817)
			p.expr(0)
		}

	case SQLiteParserUSING_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1818)
			p.Match(SQLiteParserUSING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1819)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1820)
			p.Column_name()
		}
		p.SetState(1825)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1821)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1822)
				p.Column_name()
			}

			p.SetState(1827)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1828)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICompound_operatorContext is an interface to support dynamic dispatch.
type ICompound_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UNION_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	INTERSECT_() antlr.TerminalNode
	EXCEPT_() antlr.TerminalNode

	// IsCompound_operatorContext differentiates from other interfaces.
	IsCompound_operatorContext()
}

type Compound_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_operatorContext() *Compound_operatorContext {
	var p = new(Compound_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
	return p
}

func InitEmptyCompound_operatorContext(p *Compound_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_compound_operator
}

func (*Compound_operatorContext) IsCompound_operatorContext() {}

func NewCompound_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_operatorContext {
	var p = new(Compound_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_compound_operator

	return p
}

func (s *Compound_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_operatorContext) UNION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, 0)
}

func (s *Compound_operatorContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *Compound_operatorContext) INTERSECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTERSECT_, 0)
}

func (s *Compound_operatorContext) EXCEPT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCEPT_, 0)
}

func (s *Compound_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCompound_operator(s)
	}
}

func (s *Compound_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCompound_operator(s)
	}
}

func (s *Compound_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCompound_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Compound_operator() (localctx ICompound_operatorContext) {
	localctx = NewCompound_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SQLiteParserRULE_compound_operator)
	var _la int

	p.SetState(1838)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserUNION_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1832)
			p.Match(SQLiteParserUNION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1834)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserALL_ {
			{
				p.SetState(1833)
				p.Match(SQLiteParserALL_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}

	case SQLiteParserINTERSECT_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1836)
			p.Match(SQLiteParserINTERSECT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEXCEPT_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1837)
			p.Match(SQLiteParserEXCEPT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_stmtContext is an interface to support dynamic dispatch.
type IUpdate_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable returns the table rule contexts.
	GetTable() IQualified_table_nameContext

	// GetWhereExpr returns the whereExpr rule contexts.
	GetWhereExpr() IExprContext

	// SetTable sets the table rule contexts.
	SetTable(IQualified_table_nameContext)

	// SetWhereExpr sets the whereExpr rule contexts.
	SetWhereExpr(IExprContext)

	// Getter signatures
	UPDATE_() antlr.TerminalNode
	SET_() antlr.TerminalNode
	AllUpdate_column_set() []IUpdate_column_setContext
	Update_column_set(i int) IUpdate_column_setContext
	Qualified_table_name() IQualified_table_nameContext
	With_clause() IWith_clauseContext
	OR_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FROM_() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	Returning_clause() IReturning_clauseContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	Expr() IExprContext
	AllTable_or_subquery() []ITable_or_subqueryContext
	Table_or_subquery(i int) ITable_or_subqueryContext
	Join_clause() IJoin_clauseContext

	// IsUpdate_stmtContext differentiates from other interfaces.
	IsUpdate_stmtContext()
}

type Update_stmtContext struct {
	antlr.BaseParserRuleContext
	parser    antlr.Parser
	table     IQualified_table_nameContext
	whereExpr IExprContext
}

func NewEmptyUpdate_stmtContext() *Update_stmtContext {
	var p = new(Update_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
	return p
}

func InitEmptyUpdate_stmtContext(p *Update_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt
}

func (*Update_stmtContext) IsUpdate_stmtContext() {}

func NewUpdate_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmtContext {
	var p = new(Update_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt

	return p
}

func (s *Update_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmtContext) GetTable() IQualified_table_nameContext { return s.table }

func (s *Update_stmtContext) GetWhereExpr() IExprContext { return s.whereExpr }

func (s *Update_stmtContext) SetTable(v IQualified_table_nameContext) { s.table = v }

func (s *Update_stmtContext) SetWhereExpr(v IExprContext) { s.whereExpr = v }

func (s *Update_stmtContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Update_stmtContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *Update_stmtContext) AllUpdate_column_set() []IUpdate_column_setContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IUpdate_column_setContext); ok {
			len++
		}
	}

	tst := make([]IUpdate_column_setContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IUpdate_column_setContext); ok {
			tst[i] = t.(IUpdate_column_setContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Update_column_set(i int) IUpdate_column_setContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IUpdate_column_setContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IUpdate_column_setContext)
}

func (s *Update_stmtContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmtContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmtContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Update_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Update_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Update_stmtContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *Update_stmtContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Update_stmtContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Update_stmtContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Update_stmtContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Update_stmtContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Update_stmtContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Update_stmtContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Update_stmtContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmtContext) AllTable_or_subquery() []ITable_or_subqueryContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			len++
		}
	}

	tst := make([]ITable_or_subqueryContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITable_or_subqueryContext); ok {
			tst[i] = t.(ITable_or_subqueryContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmtContext) Table_or_subquery(i int) ITable_or_subqueryContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_or_subqueryContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_or_subqueryContext)
}

func (s *Update_stmtContext) Join_clause() IJoin_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IJoin_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IJoin_clauseContext)
}

func (s *Update_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpdate_stmt(s)
	}
}

func (s *Update_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpdate_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_stmt() (localctx IUpdate_stmtContext) {
	localctx = NewUpdate_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SQLiteParserRULE_update_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1841)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1840)
			p.With_clause()
		}

	}
	{
		p.SetState(1843)
		p.Match(SQLiteParserUPDATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1846)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1844)
			p.Match(SQLiteParserOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1845)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&38280596832650241) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1848)

		var _x = p.Qualified_table_name()

		localctx.(*Update_stmtContext).table = _x
	}
	{
		p.SetState(1849)
		p.Match(SQLiteParserSET_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1850)
		p.Update_column_set()
	}
	p.SetState(1855)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1851)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1852)
			p.Update_column_set()
		}

		p.SetState(1857)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFROM_ {
		{
			p.SetState(1858)
			p.Match(SQLiteParserFROM_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1868)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 257, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1859)
				p.Table_or_subquery()
			}
			p.SetState(1864)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(1860)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1861)
					p.Table_or_subquery()
				}

				p.SetState(1866)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(1867)
				p.Join_clause()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}

	}
	p.SetState(1874)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(1872)
			p.Match(SQLiteParserWHERE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1873)

			var _x = p.expr(0)

			localctx.(*Update_stmtContext).whereExpr = _x
		}

	}
	p.SetState(1877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(1876)
			p.Returning_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_column_setContext is an interface to support dynamic dispatch.
type IUpdate_column_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext
	Column_name() IColumn_nameContext
	Column_name_list() IColumn_name_listContext

	// IsUpdate_column_setContext differentiates from other interfaces.
	IsUpdate_column_setContext()
}

type Update_column_setContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_column_setContext() *Update_column_setContext {
	var p = new(Update_column_setContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_column_set
	return p
}

func InitEmptyUpdate_column_setContext(p *Update_column_setContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_column_set
}

func (*Update_column_setContext) IsUpdate_column_setContext() {}

func NewUpdate_column_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_column_setContext {
	var p = new(Update_column_setContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_column_set

	return p
}

func (s *Update_column_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_column_setContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, 0)
}

func (s *Update_column_setContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_column_setContext) Column_name() IColumn_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_column_setContext) Column_name_list() IColumn_name_listContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Update_column_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_column_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_column_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpdate_column_set(s)
	}
}

func (s *Update_column_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpdate_column_set(s)
	}
}

func (s *Update_column_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpdate_column_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_column_set() (localctx IUpdate_column_setContext) {
	localctx = NewUpdate_column_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SQLiteParserRULE_update_column_set)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1881)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 261, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1879)
			p.Column_name()
		}

	case 2:
		{
			p.SetState(1880)
			p.Column_name_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1883)
		p.Match(SQLiteParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1884)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	CLOSE_PAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name_list
	return p
}

func InitEmptyColumn_name_listContext(p *Column_name_listContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name_list
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Column_name_listContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Column_name_listContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Column_name_listContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Column_name_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Column_name_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (s *Column_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SQLiteParserRULE_column_name_list)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1886)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1887)
		p.Column_name()
	}
	p.SetState(1892)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1888)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1889)
			p.Column_name()
		}

		p.SetState(1894)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1895)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUpdate_stmt_limitedContext is an interface to support dynamic dispatch.
type IUpdate_stmt_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	UPDATE_() antlr.TerminalNode
	Qualified_table_name() IQualified_table_nameContext
	SET_() antlr.TerminalNode
	AllASSIGN() []antlr.TerminalNode
	ASSIGN(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllColumn_name() []IColumn_nameContext
	Column_name(i int) IColumn_nameContext
	AllColumn_name_list() []IColumn_name_listContext
	Column_name_list(i int) IColumn_name_listContext
	With_clause() IWith_clauseContext
	OR_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	Returning_clause() IReturning_clauseContext
	Limit_stmt() ILimit_stmtContext
	ROLLBACK_() antlr.TerminalNode
	ABORT_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	Order_by_stmt() IOrder_by_stmtContext

	// IsUpdate_stmt_limitedContext differentiates from other interfaces.
	IsUpdate_stmt_limitedContext()
}

type Update_stmt_limitedContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_stmt_limitedContext() *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited
	return p
}

func InitEmptyUpdate_stmt_limitedContext(p *Update_stmt_limitedContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited
}

func (*Update_stmt_limitedContext) IsUpdate_stmt_limitedContext() {}

func NewUpdate_stmt_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_stmt_limitedContext {
	var p = new(Update_stmt_limitedContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_update_stmt_limited

	return p
}

func (s *Update_stmt_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_stmt_limitedContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *Update_stmt_limitedContext) Qualified_table_name() IQualified_table_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IQualified_table_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IQualified_table_nameContext)
}

func (s *Update_stmt_limitedContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *Update_stmt_limitedContext) AllASSIGN() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserASSIGN)
}

func (s *Update_stmt_limitedContext) ASSIGN(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserASSIGN, i)
}

func (s *Update_stmt_limitedContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Update_stmt_limitedContext) AllColumn_name() []IColumn_nameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_nameContext); ok {
			len++
		}
	}

	tst := make([]IColumn_nameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_nameContext); ok {
			tst[i] = t.(IColumn_nameContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Column_name(i int) IColumn_nameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_nameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_nameContext)
}

func (s *Update_stmt_limitedContext) AllColumn_name_list() []IColumn_name_listContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			len++
		}
	}

	tst := make([]IColumn_name_listContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IColumn_name_listContext); ok {
			tst[i] = t.(IColumn_name_listContext)
			i++
		}
	}

	return tst
}

func (s *Update_stmt_limitedContext) Column_name_list(i int) IColumn_name_listContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_name_listContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Update_stmt_limitedContext) With_clause() IWith_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWith_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWith_clauseContext)
}

func (s *Update_stmt_limitedContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *Update_stmt_limitedContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Update_stmt_limitedContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Update_stmt_limitedContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Update_stmt_limitedContext) Returning_clause() IReturning_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturning_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturning_clauseContext)
}

func (s *Update_stmt_limitedContext) Limit_stmt() ILimit_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILimit_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILimit_stmtContext)
}

func (s *Update_stmt_limitedContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *Update_stmt_limitedContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *Update_stmt_limitedContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *Update_stmt_limitedContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *Update_stmt_limitedContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *Update_stmt_limitedContext) Order_by_stmt() IOrder_by_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_stmtContext)
}

func (s *Update_stmt_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_stmt_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_stmt_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUpdate_stmt_limited(s)
	}
}

func (s *Update_stmt_limitedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUpdate_stmt_limited(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Update_stmt_limited() (localctx IUpdate_stmt_limitedContext) {
	localctx = NewUpdate_stmt_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SQLiteParserRULE_update_stmt_limited)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1898)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWITH_ {
		{
			p.SetState(1897)
			p.With_clause()
		}

	}
	{
		p.SetState(1900)
		p.Match(SQLiteParserUPDATE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1903)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1901)
			p.Match(SQLiteParserOR_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1902)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserABORT_ || ((int64((_la-75)) & ^0x3f) == 0 && ((int64(1)<<(_la-75))&38280596832650241) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1905)
		p.Qualified_table_name()
	}
	{
		p.SetState(1906)
		p.Match(SQLiteParserSET_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1909)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 265, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1907)
			p.Column_name()
		}

	case 2:
		{
			p.SetState(1908)
			p.Column_name_list()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	{
		p.SetState(1911)
		p.Match(SQLiteParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1912)
		p.expr(0)
	}
	p.SetState(1923)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1913)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1916)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 266, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1914)
				p.Column_name()
			}

		case 2:
			{
				p.SetState(1915)
				p.Column_name_list()
			}

		case antlr.ATNInvalidAltNumber:
			goto errorExit
		}
		{
			p.SetState(1918)
			p.Match(SQLiteParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1919)
			p.expr(0)
		}

		p.SetState(1925)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1928)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserWHERE_ {
		{
			p.SetState(1926)
			p.Match(SQLiteParserWHERE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1927)
			p.expr(0)
		}

	}
	p.SetState(1931)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserRETURNING_ {
		{
			p.SetState(1930)
			p.Returning_clause()
		}

	}
	p.SetState(1937)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserLIMIT_ || _la == SQLiteParserORDER_ {
		p.SetState(1934)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(1933)
				p.Order_by_stmt()
			}

		}
		{
			p.SetState(1936)
			p.Limit_stmt()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IQualified_table_nameContext is an interface to support dynamic dispatch.
type IQualified_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Table_name() ITable_nameContext
	Schema_name() ISchema_nameContext
	DOT() antlr.TerminalNode
	AS_() antlr.TerminalNode
	Alias() IAliasContext
	INDEXED_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Index_name() IIndex_nameContext
	NOT_() antlr.TerminalNode

	// IsQualified_table_nameContext differentiates from other interfaces.
	IsQualified_table_nameContext()
}

type Qualified_table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualified_table_nameContext() *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
	return p
}

func InitEmptyQualified_table_nameContext(p *Qualified_table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_qualified_table_name
}

func (*Qualified_table_nameContext) IsQualified_table_nameContext() {}

func NewQualified_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Qualified_table_nameContext {
	var p = new(Qualified_table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_qualified_table_name

	return p
}

func (s *Qualified_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Qualified_table_nameContext) Table_name() ITable_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITable_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Qualified_table_nameContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Qualified_table_nameContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDOT, 0)
}

func (s *Qualified_table_nameContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *Qualified_table_nameContext) Alias() IAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *Qualified_table_nameContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *Qualified_table_nameContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Qualified_table_nameContext) Index_name() IIndex_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIndex_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIndex_nameContext)
}

func (s *Qualified_table_nameContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Qualified_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Qualified_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Qualified_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitQualified_table_name(s)
	}
}

func (s *Qualified_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitQualified_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Qualified_table_name() (localctx IQualified_table_nameContext) {
	localctx = NewQualified_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SQLiteParserRULE_qualified_table_name)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1942)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 272, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1939)
			p.Schema_name()
		}
		{
			p.SetState(1940)
			p.Match(SQLiteParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1944)
		p.Table_name()
	}
	p.SetState(1947)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserAS_ {
		{
			p.SetState(1945)
			p.Match(SQLiteParserAS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1946)
			p.Alias()
		}

	}
	p.SetState(1954)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserINDEXED_:
		{
			p.SetState(1949)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1950)
			p.Match(SQLiteParserBY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1951)
			p.Index_name()
		}

	case SQLiteParserNOT_:
		{
			p.SetState(1952)
			p.Match(SQLiteParserNOT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1953)
			p.Match(SQLiteParserINDEXED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserEOF, SQLiteParserSCOL, SQLiteParserOPEN_PAR, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserATTACH_, SQLiteParserBEGIN_, SQLiteParserCOMMIT_, SQLiteParserCOPY_, SQLiteParserCREATE_, SQLiteParserDELETE_, SQLiteParserDETACH_, SQLiteParserDROP_, SQLiteParserEND_, SQLiteParserEXPLAIN_, SQLiteParserFROM_, SQLiteParserINSERT_, SQLiteParserLIMIT_, SQLiteParserORDER_, SQLiteParserPRAGMA_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserREPLACE_, SQLiteParserRETURNING_, SQLiteParserROLLBACK_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTRUNCATE_, SQLiteParserUPDATE_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserWHERE_, SQLiteParserWITH_:

	default:
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVacuum_stmtContext is an interface to support dynamic dispatch.
type IVacuum_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VACUUM_() antlr.TerminalNode
	ANALYZE_() antlr.TerminalNode
	Schema_name() ISchema_nameContext
	INTO_() antlr.TerminalNode
	Filename() IFilenameContext

	// IsVacuum_stmtContext differentiates from other interfaces.
	IsVacuum_stmtContext()
}

type Vacuum_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVacuum_stmtContext() *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
	return p
}

func InitEmptyVacuum_stmtContext(p *Vacuum_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt
}

func (*Vacuum_stmtContext) IsVacuum_stmtContext() {}

func NewVacuum_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Vacuum_stmtContext {
	var p = new(Vacuum_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_vacuum_stmt

	return p
}

func (s *Vacuum_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Vacuum_stmtContext) VACUUM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVACUUM_, 0)
}

func (s *Vacuum_stmtContext) ANALYZE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserANALYZE_, 0)
}

func (s *Vacuum_stmtContext) Schema_name() ISchema_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISchema_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISchema_nameContext)
}

func (s *Vacuum_stmtContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *Vacuum_stmtContext) Filename() IFilenameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilenameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilenameContext)
}

func (s *Vacuum_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Vacuum_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Vacuum_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitVacuum_stmt(s)
	}
}

func (s *Vacuum_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitVacuum_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Vacuum_stmt() (localctx IVacuum_stmtContext) {
	localctx = NewVacuum_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SQLiteParserRULE_vacuum_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1956)
		p.Match(SQLiteParserVACUUM_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1958)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 275, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1957)
			p.Match(SQLiteParserANALYZE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1961)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 276, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1960)
			p.Schema_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserINTO_ {
		{
			p.SetState(1963)
			p.Match(SQLiteParserINTO_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1964)
			p.Filename()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFilter_clauseContext is an interface to support dynamic dispatch.
type IFilter_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FILTER_() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	Expr() IExprContext
	CLOSE_PAR() antlr.TerminalNode

	// IsFilter_clauseContext differentiates from other interfaces.
	IsFilter_clauseContext()
}

type Filter_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilter_clauseContext() *Filter_clauseContext {
	var p = new(Filter_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filter_clause
	return p
}

func InitEmptyFilter_clauseContext(p *Filter_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filter_clause
}

func (*Filter_clauseContext) IsFilter_clauseContext() {}

func NewFilter_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Filter_clauseContext {
	var p = new(Filter_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_filter_clause

	return p
}

func (s *Filter_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Filter_clauseContext) FILTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFILTER_, 0)
}

func (s *Filter_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Filter_clauseContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *Filter_clauseContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Filter_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Filter_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Filter_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Filter_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFilter_clause(s)
	}
}

func (s *Filter_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFilter_clause(s)
	}
}

func (s *Filter_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFilter_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Filter_clause() (localctx IFilter_clauseContext) {
	localctx = NewFilter_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SQLiteParserRULE_filter_clause)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1967)
		p.Match(SQLiteParserFILTER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1968)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1969)
		p.Match(SQLiteParserWHERE_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1970)
		p.expr(0)
	}
	{
		p.SetState(1971)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_defnContext is an interface to support dynamic dispatch.
type IWindow_defnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	ORDER_() antlr.TerminalNode
	AllBY_() []antlr.TerminalNode
	BY_(i int) antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	Base_window_name() IBase_window_nameContext
	PARTITION_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	Frame_spec() IFrame_specContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindow_defnContext differentiates from other interfaces.
	IsWindow_defnContext()
}

type Window_defnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_defnContext() *Window_defnContext {
	var p = new(Window_defnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_defn
	return p
}

func InitEmptyWindow_defnContext(p *Window_defnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_defn
}

func (*Window_defnContext) IsWindow_defnContext() {}

func NewWindow_defnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_defnContext {
	var p = new(Window_defnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_defn

	return p
}

func (s *Window_defnContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_defnContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Window_defnContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Window_defnContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Window_defnContext) AllBY_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserBY_)
}

func (s *Window_defnContext) BY_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, i)
}

func (s *Window_defnContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Window_defnContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Window_defnContext) Base_window_name() IBase_window_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBase_window_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBase_window_nameContext)
}

func (s *Window_defnContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *Window_defnContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Window_defnContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Window_defnContext) Frame_spec() IFrame_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_specContext)
}

func (s *Window_defnContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Window_defnContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Window_defnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_defnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_defnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_defn(s)
	}
}

func (s *Window_defnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_defn(s)
	}
}

func (s *Window_defnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_defn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_defn() (localctx IWindow_defnContext) {
	localctx = NewWindow_defnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SQLiteParserRULE_window_defn)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1973)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1975)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 278, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1974)
			p.Base_window_name()
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	p.SetState(1987)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserPARTITION_ {
		{
			p.SetState(1977)
			p.Match(SQLiteParserPARTITION_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1978)
			p.Match(SQLiteParserBY_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1979)
			p.expr(0)
		}
		p.SetState(1984)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(1980)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(1981)
				p.expr(0)
			}

			p.SetState(1986)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	}

	{
		p.SetState(1989)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1990)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1991)
		p.Ordering_term()
	}
	p.SetState(1996)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(1992)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1993)
			p.Ordering_term()
		}

		p.SetState(1998)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

	p.SetState(2000)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if (int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&9007199523176449) != 0 {
		{
			p.SetState(1999)
			p.Frame_spec()
		}

	}
	{
		p.SetState(2002)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	OVER_() antlr.TerminalNode
	Window_name() IWindow_nameContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	Base_window_name() IBase_window_nameContext
	PARTITION_() antlr.TerminalNode
	AllBY_() []antlr.TerminalNode
	BY_(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	ORDER_() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	Frame_spec() IFrame_specContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_over_clause
	return p
}

func InitEmptyOver_clauseContext(p *Over_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_over_clause
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *Over_clauseContext) Window_name() IWindow_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Over_clauseContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Over_clauseContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Over_clauseContext) Base_window_name() IBase_window_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBase_window_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBase_window_nameContext)
}

func (s *Over_clauseContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *Over_clauseContext) AllBY_() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserBY_)
}

func (s *Over_clauseContext) BY_(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, i)
}

func (s *Over_clauseContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Over_clauseContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Over_clauseContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Over_clauseContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Over_clauseContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Over_clauseContext) Frame_spec() IFrame_specContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_specContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_specContext)
}

func (s *Over_clauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Over_clauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SQLiteParserRULE_over_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2004)
		p.Match(SQLiteParserOVER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2038)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 289, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2005)
			p.Window_name()
		}

	case 2:
		{
			p.SetState(2006)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2008)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 283, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2007)
				p.Base_window_name()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2020)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2010)
				p.Match(SQLiteParserPARTITION_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2011)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2012)
				p.expr(0)
			}
			p.SetState(2017)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(2013)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2014)
					p.expr(0)
				}

				p.SetState(2019)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(2032)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(2022)
				p.Match(SQLiteParserORDER_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2023)
				p.Match(SQLiteParserBY_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2024)
				p.Ordering_term()
			}
			p.SetState(2029)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == SQLiteParserCOMMA {
				{
					p.SetState(2025)
					p.Match(SQLiteParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(2026)
					p.Ordering_term()
				}

				p.SetState(2031)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(2035)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&9007199523176449) != 0 {
			{
				p.SetState(2034)
				p.Frame_spec()
			}

		}
		{
			p.SetState(2037)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_specContext is an interface to support dynamic dispatch.
type IFrame_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Frame_clause() IFrame_clauseContext
	EXCLUDE_() antlr.TerminalNode
	NO_() antlr.TerminalNode
	OTHERS_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	GROUP_() antlr.TerminalNode
	TIES_() antlr.TerminalNode

	// IsFrame_specContext differentiates from other interfaces.
	IsFrame_specContext()
}

type Frame_specContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_specContext() *Frame_specContext {
	var p = new(Frame_specContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_spec
	return p
}

func InitEmptyFrame_specContext(p *Frame_specContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_spec
}

func (*Frame_specContext) IsFrame_specContext() {}

func NewFrame_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_specContext {
	var p = new(Frame_specContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_spec

	return p
}

func (s *Frame_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_specContext) Frame_clause() IFrame_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_clauseContext)
}

func (s *Frame_specContext) EXCLUDE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUDE_, 0)
}

func (s *Frame_specContext) NO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, 0)
}

func (s *Frame_specContext) OTHERS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOTHERS_, 0)
}

func (s *Frame_specContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_specContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_specContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *Frame_specContext) TIES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTIES_, 0)
}

func (s *Frame_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_spec(s)
	}
}

func (s *Frame_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_spec(s)
	}
}

func (s *Frame_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_spec() (localctx IFrame_specContext) {
	localctx = NewFrame_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, SQLiteParserRULE_frame_spec)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2040)
		p.Frame_clause()
	}
	p.SetState(2050)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserEXCLUDE_ {
		{
			p.SetState(2041)
			p.Match(SQLiteParserEXCLUDE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2048)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}

		switch p.GetTokenStream().LA(1) {
		case SQLiteParserNO_:
			{
				p.SetState(2042)
				p.Match(SQLiteParserNO_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2043)
				p.Match(SQLiteParserOTHERS_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserCURRENT_:
			{
				p.SetState(2044)
				p.Match(SQLiteParserCURRENT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2045)
				p.Match(SQLiteParserROW_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserGROUP_:
			{
				p.SetState(2046)
				p.Match(SQLiteParserGROUP_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		case SQLiteParserTIES_:
			{
				p.SetState(2047)
				p.Match(SQLiteParserTIES_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_clauseContext is an interface to support dynamic dispatch.
type IFrame_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RANGE_() antlr.TerminalNode
	ROWS_() antlr.TerminalNode
	GROUPS_() antlr.TerminalNode
	Frame_single() IFrame_singleContext
	BETWEEN_() antlr.TerminalNode
	Frame_left() IFrame_leftContext
	AND_() antlr.TerminalNode
	Frame_right() IFrame_rightContext

	// IsFrame_clauseContext differentiates from other interfaces.
	IsFrame_clauseContext()
}

type Frame_clauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_clauseContext() *Frame_clauseContext {
	var p = new(Frame_clauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_clause
	return p
}

func InitEmptyFrame_clauseContext(p *Frame_clauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_clause
}

func (*Frame_clauseContext) IsFrame_clauseContext() {}

func NewFrame_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_clauseContext {
	var p = new(Frame_clauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_clause

	return p
}

func (s *Frame_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_clauseContext) RANGE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANGE_, 0)
}

func (s *Frame_clauseContext) ROWS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROWS_, 0)
}

func (s *Frame_clauseContext) GROUPS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUPS_, 0)
}

func (s *Frame_clauseContext) Frame_single() IFrame_singleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_singleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_singleContext)
}

func (s *Frame_clauseContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *Frame_clauseContext) Frame_left() IFrame_leftContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_leftContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_leftContext)
}

func (s *Frame_clauseContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *Frame_clauseContext) Frame_right() IFrame_rightContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_rightContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_rightContext)
}

func (s *Frame_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_clause(s)
	}
}

func (s *Frame_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_clause(s)
	}
}

func (s *Frame_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_clause() (localctx IFrame_clauseContext) {
	localctx = NewFrame_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, SQLiteParserRULE_frame_clause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2052)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&9007199523176449) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(2059)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 292, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2053)
			p.Frame_single()
		}

	case 2:
		{
			p.SetState(2054)
			p.Match(SQLiteParserBETWEEN_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2055)
			p.Frame_left()
		}
		{
			p.SetState(2056)
			p.Match(SQLiteParserAND_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2057)
			p.Frame_right()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_function_invocationContext is an interface to support dynamic dispatch.
type ISimple_function_invocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Simple_func() ISimple_funcContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	STAR() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSimple_function_invocationContext differentiates from other interfaces.
	IsSimple_function_invocationContext()
}

type Simple_function_invocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_function_invocationContext() *Simple_function_invocationContext {
	var p = new(Simple_function_invocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_function_invocation
	return p
}

func InitEmptySimple_function_invocationContext(p *Simple_function_invocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_function_invocation
}

func (*Simple_function_invocationContext) IsSimple_function_invocationContext() {}

func NewSimple_function_invocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_function_invocationContext {
	var p = new(Simple_function_invocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_function_invocation

	return p
}

func (s *Simple_function_invocationContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_function_invocationContext) Simple_func() ISimple_funcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISimple_funcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISimple_funcContext)
}

func (s *Simple_function_invocationContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Simple_function_invocationContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Simple_function_invocationContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Simple_function_invocationContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Simple_function_invocationContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Simple_function_invocationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Simple_function_invocationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Simple_function_invocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_function_invocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_function_invocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSimple_function_invocation(s)
	}
}

func (s *Simple_function_invocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSimple_function_invocation(s)
	}
}

func (s *Simple_function_invocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSimple_function_invocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Simple_function_invocation() (localctx ISimple_function_invocationContext) {
	localctx = NewSimple_function_invocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, SQLiteParserRULE_simple_function_invocation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2061)
		p.Simple_func()
	}
	{
		p.SetState(2062)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2072)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserABORT_, SQLiteParserACTION_, SQLiteParserADD_, SQLiteParserAFTER_, SQLiteParserALL_, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserAND_, SQLiteParserAS_, SQLiteParserASC_, SQLiteParserATTACH_, SQLiteParserAUTOINCREMENT_, SQLiteParserBEFORE_, SQLiteParserBEGIN_, SQLiteParserBETWEEN_, SQLiteParserBY_, SQLiteParserCASCADE_, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCHECK_, SQLiteParserCOLLATE_, SQLiteParserCOLUMN_, SQLiteParserCOMMIT_, SQLiteParserCONFLICT_, SQLiteParserCONSTRAINT_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDATABASE_, SQLiteParserDEFAULT_, SQLiteParserDEFERRABLE_, SQLiteParserDEFERRED_, SQLiteParserDELETE_, SQLiteParserDESC_, SQLiteParserDETACH_, SQLiteParserDISTINCT_, SQLiteParserDROP_, SQLiteParserEACH_, SQLiteParserELSE_, SQLiteParserEND_, SQLiteParserESCAPE_, SQLiteParserEXCEPT_, SQLiteParserEXCLUSIVE_, SQLiteParserEXISTS_, SQLiteParserEXPLAIN_, SQLiteParserFAIL_, SQLiteParserFOR_, SQLiteParserFOREIGN_, SQLiteParserFROM_, SQLiteParserFULL_, SQLiteParserGLOB_, SQLiteParserGROUP_, SQLiteParserHAVING_, SQLiteParserIF_, SQLiteParserIGNORE_, SQLiteParserIMMEDIATE_, SQLiteParserIN_, SQLiteParserINDEX_, SQLiteParserINDEXED_, SQLiteParserINITIALLY_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINSTEAD_, SQLiteParserINTERSECT_, SQLiteParserINTO_, SQLiteParserIS_, SQLiteParserISNULL_, SQLiteParserJOIN_, SQLiteParserKEY_, SQLiteParserLEFT_, SQLiteParserLIKE_, SQLiteParserLIMIT_, SQLiteParserMATCH_, SQLiteParserNATURAL_, SQLiteParserNO_, SQLiteParserNOT_, SQLiteParserNOTNULL_, SQLiteParserNULL_, SQLiteParserOF_, SQLiteParserOFFSET_, SQLiteParserON_, SQLiteParserOR_, SQLiteParserORDER_, SQLiteParserOUTER_, SQLiteParserPLAN_, SQLiteParserPRAGMA_, SQLiteParserPRIMARY_, SQLiteParserQUERY_, SQLiteParserRAISE_, SQLiteParserRECURSIVE_, SQLiteParserREFERENCES_, SQLiteParserREGEXP_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserRENAME_, SQLiteParserREPLACE_, SQLiteParserRESTRICT_, SQLiteParserRIGHT_, SQLiteParserROLLBACK_, SQLiteParserROW_, SQLiteParserROWS_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTABLE_, SQLiteParserTEMP_, SQLiteParserTEMPORARY_, SQLiteParserTEXT_, SQLiteParserTHEN_, SQLiteParserTO_, SQLiteParserTRANSACTION_, SQLiteParserTRIGGER_, SQLiteParserUNION_, SQLiteParserUNIQUE_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserVIEW_, SQLiteParserVIRTUAL_, SQLiteParserWHEN_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWITHOUT_, SQLiteParserFIRST_VALUE_, SQLiteParserOVER_, SQLiteParserPARTITION_, SQLiteParserRANGE_, SQLiteParserPRECEDING_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserFOLLOWING_, SQLiteParserCUME_DIST_, SQLiteParserDENSE_RANK_, SQLiteParserLAG_, SQLiteParserLAST_VALUE_, SQLiteParserLEAD_, SQLiteParserNTH_VALUE_, SQLiteParserNTILE_, SQLiteParserPERCENT_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_, SQLiteParserGENERATED_, SQLiteParserALWAYS_, SQLiteParserSTORED_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserWINDOW_, SQLiteParserNULLS_, SQLiteParserFIRST_, SQLiteParserLAST_, SQLiteParserFILTER_, SQLiteParserGROUPS_, SQLiteParserEXCLUDE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		{
			p.SetState(2063)
			p.expr(0)
		}
		p.SetState(2068)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(2064)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2065)
				p.expr(0)
			}

			p.SetState(2070)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case SQLiteParserSTAR:
		{
			p.SetState(2071)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(2074)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregate_function_invocationContext is an interface to support dynamic dispatch.
type IAggregate_function_invocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Aggregate_func() IAggregate_funcContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	STAR() antlr.TerminalNode
	Filter_clause() IFilter_clauseContext
	DISTINCT_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsAggregate_function_invocationContext differentiates from other interfaces.
	IsAggregate_function_invocationContext()
}

type Aggregate_function_invocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_function_invocationContext() *Aggregate_function_invocationContext {
	var p = new(Aggregate_function_invocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_function_invocation
	return p
}

func InitEmptyAggregate_function_invocationContext(p *Aggregate_function_invocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_function_invocation
}

func (*Aggregate_function_invocationContext) IsAggregate_function_invocationContext() {}

func NewAggregate_function_invocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_function_invocationContext {
	var p = new(Aggregate_function_invocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_aggregate_function_invocation

	return p
}

func (s *Aggregate_function_invocationContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_function_invocationContext) Aggregate_func() IAggregate_funcContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAggregate_funcContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAggregate_funcContext)
}

func (s *Aggregate_function_invocationContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Aggregate_function_invocationContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Aggregate_function_invocationContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Aggregate_function_invocationContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Aggregate_function_invocationContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Aggregate_function_invocationContext) Filter_clause() IFilter_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *Aggregate_function_invocationContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *Aggregate_function_invocationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Aggregate_function_invocationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Aggregate_function_invocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_function_invocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_function_invocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAggregate_function_invocation(s)
	}
}

func (s *Aggregate_function_invocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAggregate_function_invocation(s)
	}
}

func (s *Aggregate_function_invocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAggregate_function_invocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Aggregate_function_invocation() (localctx IAggregate_function_invocationContext) {
	localctx = NewAggregate_function_invocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, SQLiteParserRULE_aggregate_function_invocation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2076)
		p.Aggregate_func()
	}
	{
		p.SetState(2077)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2090)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserABORT_, SQLiteParserACTION_, SQLiteParserADD_, SQLiteParserAFTER_, SQLiteParserALL_, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserAND_, SQLiteParserAS_, SQLiteParserASC_, SQLiteParserATTACH_, SQLiteParserAUTOINCREMENT_, SQLiteParserBEFORE_, SQLiteParserBEGIN_, SQLiteParserBETWEEN_, SQLiteParserBY_, SQLiteParserCASCADE_, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCHECK_, SQLiteParserCOLLATE_, SQLiteParserCOLUMN_, SQLiteParserCOMMIT_, SQLiteParserCONFLICT_, SQLiteParserCONSTRAINT_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDATABASE_, SQLiteParserDEFAULT_, SQLiteParserDEFERRABLE_, SQLiteParserDEFERRED_, SQLiteParserDELETE_, SQLiteParserDESC_, SQLiteParserDETACH_, SQLiteParserDISTINCT_, SQLiteParserDROP_, SQLiteParserEACH_, SQLiteParserELSE_, SQLiteParserEND_, SQLiteParserESCAPE_, SQLiteParserEXCEPT_, SQLiteParserEXCLUSIVE_, SQLiteParserEXISTS_, SQLiteParserEXPLAIN_, SQLiteParserFAIL_, SQLiteParserFOR_, SQLiteParserFOREIGN_, SQLiteParserFROM_, SQLiteParserFULL_, SQLiteParserGLOB_, SQLiteParserGROUP_, SQLiteParserHAVING_, SQLiteParserIF_, SQLiteParserIGNORE_, SQLiteParserIMMEDIATE_, SQLiteParserIN_, SQLiteParserINDEX_, SQLiteParserINDEXED_, SQLiteParserINITIALLY_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINSTEAD_, SQLiteParserINTERSECT_, SQLiteParserINTO_, SQLiteParserIS_, SQLiteParserISNULL_, SQLiteParserJOIN_, SQLiteParserKEY_, SQLiteParserLEFT_, SQLiteParserLIKE_, SQLiteParserLIMIT_, SQLiteParserMATCH_, SQLiteParserNATURAL_, SQLiteParserNO_, SQLiteParserNOT_, SQLiteParserNOTNULL_, SQLiteParserNULL_, SQLiteParserOF_, SQLiteParserOFFSET_, SQLiteParserON_, SQLiteParserOR_, SQLiteParserORDER_, SQLiteParserOUTER_, SQLiteParserPLAN_, SQLiteParserPRAGMA_, SQLiteParserPRIMARY_, SQLiteParserQUERY_, SQLiteParserRAISE_, SQLiteParserRECURSIVE_, SQLiteParserREFERENCES_, SQLiteParserREGEXP_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserRENAME_, SQLiteParserREPLACE_, SQLiteParserRESTRICT_, SQLiteParserRIGHT_, SQLiteParserROLLBACK_, SQLiteParserROW_, SQLiteParserROWS_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTABLE_, SQLiteParserTEMP_, SQLiteParserTEMPORARY_, SQLiteParserTEXT_, SQLiteParserTHEN_, SQLiteParserTO_, SQLiteParserTRANSACTION_, SQLiteParserTRIGGER_, SQLiteParserUNION_, SQLiteParserUNIQUE_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserVIEW_, SQLiteParserVIRTUAL_, SQLiteParserWHEN_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWITHOUT_, SQLiteParserFIRST_VALUE_, SQLiteParserOVER_, SQLiteParserPARTITION_, SQLiteParserRANGE_, SQLiteParserPRECEDING_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserFOLLOWING_, SQLiteParserCUME_DIST_, SQLiteParserDENSE_RANK_, SQLiteParserLAG_, SQLiteParserLAST_VALUE_, SQLiteParserLEAD_, SQLiteParserNTH_VALUE_, SQLiteParserNTILE_, SQLiteParserPERCENT_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_, SQLiteParserGENERATED_, SQLiteParserALWAYS_, SQLiteParserSTORED_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserWINDOW_, SQLiteParserNULLS_, SQLiteParserFIRST_, SQLiteParserLAST_, SQLiteParserFILTER_, SQLiteParserGROUPS_, SQLiteParserEXCLUDE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		p.SetState(2079)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 295, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2078)
				p.Match(SQLiteParserDISTINCT_)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		{
			p.SetState(2081)
			p.expr(0)
		}
		p.SetState(2086)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(2082)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2083)
				p.expr(0)
			}

			p.SetState(2088)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case SQLiteParserSTAR:
		{
			p.SetState(2089)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCLOSE_PAR:

	default:
	}
	{
		p.SetState(2092)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2094)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFILTER_ {
		{
			p.SetState(2093)
			p.Filter_clause()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_function_invocationContext is an interface to support dynamic dispatch.
type IWindow_function_invocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Window_function() IWindow_functionContext
	OPEN_PAR() antlr.TerminalNode
	CLOSE_PAR() antlr.TerminalNode
	OVER_() antlr.TerminalNode
	Window_defn() IWindow_defnContext
	Window_name() IWindow_nameContext
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	STAR() antlr.TerminalNode
	Filter_clause() IFilter_clauseContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWindow_function_invocationContext differentiates from other interfaces.
	IsWindow_function_invocationContext()
}

type Window_function_invocationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_function_invocationContext() *Window_function_invocationContext {
	var p = new(Window_function_invocationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_function_invocation
	return p
}

func InitEmptyWindow_function_invocationContext(p *Window_function_invocationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_function_invocation
}

func (*Window_function_invocationContext) IsWindow_function_invocationContext() {}

func NewWindow_function_invocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_function_invocationContext {
	var p = new(Window_function_invocationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_function_invocation

	return p
}

func (s *Window_function_invocationContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_function_invocationContext) Window_function() IWindow_functionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_functionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_functionContext)
}

func (s *Window_function_invocationContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Window_function_invocationContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Window_function_invocationContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *Window_function_invocationContext) Window_defn() IWindow_defnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_defnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_defnContext)
}

func (s *Window_function_invocationContext) Window_name() IWindow_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWindow_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWindow_nameContext)
}

func (s *Window_function_invocationContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Window_function_invocationContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Window_function_invocationContext) STAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTAR, 0)
}

func (s *Window_function_invocationContext) Filter_clause() IFilter_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFilter_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFilter_clauseContext)
}

func (s *Window_function_invocationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Window_function_invocationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Window_function_invocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_function_invocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_function_invocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_function_invocation(s)
	}
}

func (s *Window_function_invocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_function_invocation(s)
	}
}

func (s *Window_function_invocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_function_invocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_function_invocation() (localctx IWindow_function_invocationContext) {
	localctx = NewWindow_function_invocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, SQLiteParserRULE_window_function_invocation)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2096)
		p.Window_function()
	}
	{
		p.SetState(2097)
		p.Match(SQLiteParserOPEN_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2107)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	switch p.GetTokenStream().LA(1) {
	case SQLiteParserOPEN_PAR, SQLiteParserPLUS, SQLiteParserMINUS, SQLiteParserTILDE, SQLiteParserABORT_, SQLiteParserACTION_, SQLiteParserADD_, SQLiteParserAFTER_, SQLiteParserALL_, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserAND_, SQLiteParserAS_, SQLiteParserASC_, SQLiteParserATTACH_, SQLiteParserAUTOINCREMENT_, SQLiteParserBEFORE_, SQLiteParserBEGIN_, SQLiteParserBETWEEN_, SQLiteParserBY_, SQLiteParserCASCADE_, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCHECK_, SQLiteParserCOLLATE_, SQLiteParserCOLUMN_, SQLiteParserCOMMIT_, SQLiteParserCONFLICT_, SQLiteParserCONSTRAINT_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDATABASE_, SQLiteParserDEFAULT_, SQLiteParserDEFERRABLE_, SQLiteParserDEFERRED_, SQLiteParserDELETE_, SQLiteParserDESC_, SQLiteParserDETACH_, SQLiteParserDISTINCT_, SQLiteParserDROP_, SQLiteParserEACH_, SQLiteParserELSE_, SQLiteParserEND_, SQLiteParserESCAPE_, SQLiteParserEXCEPT_, SQLiteParserEXCLUSIVE_, SQLiteParserEXISTS_, SQLiteParserEXPLAIN_, SQLiteParserFAIL_, SQLiteParserFOR_, SQLiteParserFOREIGN_, SQLiteParserFROM_, SQLiteParserFULL_, SQLiteParserGLOB_, SQLiteParserGROUP_, SQLiteParserHAVING_, SQLiteParserIF_, SQLiteParserIGNORE_, SQLiteParserIMMEDIATE_, SQLiteParserIN_, SQLiteParserINDEX_, SQLiteParserINDEXED_, SQLiteParserINITIALLY_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINSTEAD_, SQLiteParserINTERSECT_, SQLiteParserINTO_, SQLiteParserIS_, SQLiteParserISNULL_, SQLiteParserJOIN_, SQLiteParserKEY_, SQLiteParserLEFT_, SQLiteParserLIKE_, SQLiteParserLIMIT_, SQLiteParserMATCH_, SQLiteParserNATURAL_, SQLiteParserNO_, SQLiteParserNOT_, SQLiteParserNOTNULL_, SQLiteParserNULL_, SQLiteParserOF_, SQLiteParserOFFSET_, SQLiteParserON_, SQLiteParserOR_, SQLiteParserORDER_, SQLiteParserOUTER_, SQLiteParserPLAN_, SQLiteParserPRAGMA_, SQLiteParserPRIMARY_, SQLiteParserQUERY_, SQLiteParserRAISE_, SQLiteParserRECURSIVE_, SQLiteParserREFERENCES_, SQLiteParserREGEXP_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserRENAME_, SQLiteParserREPLACE_, SQLiteParserRESTRICT_, SQLiteParserRIGHT_, SQLiteParserROLLBACK_, SQLiteParserROW_, SQLiteParserROWS_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTABLE_, SQLiteParserTEMP_, SQLiteParserTEMPORARY_, SQLiteParserTEXT_, SQLiteParserTHEN_, SQLiteParserTO_, SQLiteParserTRANSACTION_, SQLiteParserTRIGGER_, SQLiteParserUNION_, SQLiteParserUNIQUE_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserVIEW_, SQLiteParserVIRTUAL_, SQLiteParserWHEN_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWITHOUT_, SQLiteParserFIRST_VALUE_, SQLiteParserOVER_, SQLiteParserPARTITION_, SQLiteParserRANGE_, SQLiteParserPRECEDING_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserFOLLOWING_, SQLiteParserCUME_DIST_, SQLiteParserDENSE_RANK_, SQLiteParserLAG_, SQLiteParserLAST_VALUE_, SQLiteParserLEAD_, SQLiteParserNTH_VALUE_, SQLiteParserNTILE_, SQLiteParserPERCENT_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_, SQLiteParserGENERATED_, SQLiteParserALWAYS_, SQLiteParserSTORED_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserWINDOW_, SQLiteParserNULLS_, SQLiteParserFIRST_, SQLiteParserLAST_, SQLiteParserFILTER_, SQLiteParserGROUPS_, SQLiteParserEXCLUDE_, SQLiteParserIDENTIFIER, SQLiteParserNUMERIC_LITERAL, SQLiteParserBIND_PARAMETER, SQLiteParserSTRING_LITERAL, SQLiteParserBLOB_LITERAL:
		{
			p.SetState(2098)
			p.expr(0)
		}
		p.SetState(2103)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == SQLiteParserCOMMA {
			{
				p.SetState(2099)
				p.Match(SQLiteParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(2100)
				p.expr(0)
			}

			p.SetState(2105)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case SQLiteParserSTAR:
		{
			p.SetState(2106)
			p.Match(SQLiteParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCLOSE_PAR:

	default:
	}
	{
		p.SetState(2109)
		p.Match(SQLiteParserCLOSE_PAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2111)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserFILTER_ {
		{
			p.SetState(2110)
			p.Filter_clause()
		}

	}
	{
		p.SetState(2113)
		p.Match(SQLiteParserOVER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2116)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 302, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2114)
			p.Window_defn()
		}

	case 2:
		{
			p.SetState(2115)
			p.Window_name()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICommon_table_stmtContext is an interface to support dynamic dispatch.
type ICommon_table_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WITH_() antlr.TerminalNode
	AllCommon_table_expression() []ICommon_table_expressionContext
	Common_table_expression(i int) ICommon_table_expressionContext
	RECURSIVE_() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsCommon_table_stmtContext differentiates from other interfaces.
	IsCommon_table_stmtContext()
}

type Common_table_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommon_table_stmtContext() *Common_table_stmtContext {
	var p = new(Common_table_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_stmt
	return p
}

func InitEmptyCommon_table_stmtContext(p *Common_table_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_common_table_stmt
}

func (*Common_table_stmtContext) IsCommon_table_stmtContext() {}

func NewCommon_table_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_stmtContext {
	var p = new(Common_table_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_common_table_stmt

	return p
}

func (s *Common_table_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_stmtContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *Common_table_stmtContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			len++
		}
	}

	tst := make([]ICommon_table_expressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICommon_table_expressionContext); ok {
			tst[i] = t.(ICommon_table_expressionContext)
			i++
		}
	}

	return tst
}

func (s *Common_table_stmtContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICommon_table_expressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *Common_table_stmtContext) RECURSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRECURSIVE_, 0)
}

func (s *Common_table_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Common_table_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Common_table_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCommon_table_stmt(s)
	}
}

func (s *Common_table_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCommon_table_stmt(s)
	}
}

func (s *Common_table_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCommon_table_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Common_table_stmt() (localctx ICommon_table_stmtContext) {
	localctx = NewCommon_table_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, SQLiteParserRULE_common_table_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2118)
		p.Match(SQLiteParserWITH_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2120)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 303, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2119)
			p.Match(SQLiteParserRECURSIVE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(2122)
		p.Common_table_expression()
	}
	p.SetState(2127)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(2123)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2124)
			p.Common_table_expression()
		}

		p.SetState(2129)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_stmtContext is an interface to support dynamic dispatch.
type IOrder_by_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllOrdering_term() []IOrdering_termContext
	Ordering_term(i int) IOrdering_termContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsOrder_by_stmtContext differentiates from other interfaces.
	IsOrder_by_stmtContext()
}

type Order_by_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_stmtContext() *Order_by_stmtContext {
	var p = new(Order_by_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_stmt
	return p
}

func InitEmptyOrder_by_stmtContext(p *Order_by_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_stmt
}

func (*Order_by_stmtContext) IsOrder_by_stmtContext() {}

func NewOrder_by_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_stmtContext {
	var p = new(Order_by_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_stmt

	return p
}

func (s *Order_by_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_stmtContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_stmtContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_stmtContext) AllOrdering_term() []IOrdering_termContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOrdering_termContext); ok {
			len++
		}
	}

	tst := make([]IOrdering_termContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOrdering_termContext); ok {
			tst[i] = t.(IOrdering_termContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_stmtContext) Ordering_term(i int) IOrdering_termContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrdering_termContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrdering_termContext)
}

func (s *Order_by_stmtContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Order_by_stmtContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Order_by_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_stmt(s)
	}
}

func (s *Order_by_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_stmt(s)
	}
}

func (s *Order_by_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_stmt() (localctx IOrder_by_stmtContext) {
	localctx = NewOrder_by_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, SQLiteParserRULE_order_by_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2130)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2131)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2132)
		p.Ordering_term()
	}
	p.SetState(2137)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(2133)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2134)
			p.Ordering_term()
		}

		p.SetState(2139)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILimit_stmtContext is an interface to support dynamic dispatch.
type ILimit_stmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LIMIT_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	OFFSET_() antlr.TerminalNode
	COMMA() antlr.TerminalNode

	// IsLimit_stmtContext differentiates from other interfaces.
	IsLimit_stmtContext()
}

type Limit_stmtContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_stmtContext() *Limit_stmtContext {
	var p = new(Limit_stmtContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_limit_stmt
	return p
}

func InitEmptyLimit_stmtContext(p *Limit_stmtContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_limit_stmt
}

func (*Limit_stmtContext) IsLimit_stmtContext() {}

func NewLimit_stmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_stmtContext {
	var p = new(Limit_stmtContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_limit_stmt

	return p
}

func (s *Limit_stmtContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_stmtContext) LIMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIMIT_, 0)
}

func (s *Limit_stmtContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Limit_stmtContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Limit_stmtContext) OFFSET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOFFSET_, 0)
}

func (s *Limit_stmtContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Limit_stmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_stmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_stmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterLimit_stmt(s)
	}
}

func (s *Limit_stmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitLimit_stmt(s)
	}
}

func (s *Limit_stmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitLimit_stmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Limit_stmt() (localctx ILimit_stmtContext) {
	localctx = NewLimit_stmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, SQLiteParserRULE_limit_stmt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2140)
		p.Match(SQLiteParserLIMIT_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2141)
		p.expr(0)
	}
	p.SetState(2144)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOMMA || _la == SQLiteParserOFFSET_ {
		{
			p.SetState(2142)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCOMMA || _la == SQLiteParserOFFSET_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2143)
			p.expr(0)
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrdering_termContext is an interface to support dynamic dispatch.
type IOrdering_termContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	COLLATE_() antlr.TerminalNode
	Collation_name() ICollation_nameContext
	Asc_desc() IAsc_descContext
	NULLS_() antlr.TerminalNode
	FIRST_() antlr.TerminalNode
	LAST_() antlr.TerminalNode

	// IsOrdering_termContext differentiates from other interfaces.
	IsOrdering_termContext()
}

type Ordering_termContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrdering_termContext() *Ordering_termContext {
	var p = new(Ordering_termContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
	return p
}

func InitEmptyOrdering_termContext(p *Ordering_termContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_ordering_term
}

func (*Ordering_termContext) IsOrdering_termContext() {}

func NewOrdering_termContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ordering_termContext {
	var p = new(Ordering_termContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_ordering_term

	return p
}

func (s *Ordering_termContext) GetParser() antlr.Parser { return s.parser }

func (s *Ordering_termContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Ordering_termContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *Ordering_termContext) Collation_name() ICollation_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICollation_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Ordering_termContext) Asc_desc() IAsc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Ordering_termContext) NULLS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULLS_, 0)
}

func (s *Ordering_termContext) FIRST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_, 0)
}

func (s *Ordering_termContext) LAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_, 0)
}

func (s *Ordering_termContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ordering_termContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ordering_termContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrdering_term(s)
	}
}

func (s *Ordering_termContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrdering_term(s)
	}
}

func (s *Ordering_termContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrdering_term(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Ordering_term() (localctx IOrdering_termContext) {
	localctx = NewOrdering_termContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, SQLiteParserRULE_ordering_term)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2146)
		p.expr(0)
	}
	p.SetState(2149)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserCOLLATE_ {
		{
			p.SetState(2147)
			p.Match(SQLiteParserCOLLATE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2148)
			p.Collation_name()
		}

	}
	p.SetState(2152)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(2151)
			p.Asc_desc()
		}

	}
	p.SetState(2156)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserNULLS_ {
		{
			p.SetState(2154)
			p.Match(SQLiteParserNULLS_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2155)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserFIRST_ || _la == SQLiteParserLAST_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsc_descContext is an interface to support dynamic dispatch.
type IAsc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASC_() antlr.TerminalNode
	DESC_() antlr.TerminalNode

	// IsAsc_descContext differentiates from other interfaces.
	IsAsc_descContext()
}

type Asc_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsc_descContext() *Asc_descContext {
	var p = new(Asc_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_asc_desc
	return p
}

func InitEmptyAsc_descContext(p *Asc_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_asc_desc
}

func (*Asc_descContext) IsAsc_descContext() {}

func NewAsc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asc_descContext {
	var p = new(Asc_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_asc_desc

	return p
}

func (s *Asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Asc_descContext) ASC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASC_, 0)
}

func (s *Asc_descContext) DESC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDESC_, 0)
}

func (s *Asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAsc_desc(s)
	}
}

func (s *Asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAsc_desc(s)
	}
}

func (s *Asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAsc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Asc_desc() (localctx IAsc_descContext) {
	localctx = NewAsc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, SQLiteParserRULE_asc_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2158)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserASC_ || _la == SQLiteParserDESC_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_leftContext is an interface to support dynamic dispatch.
type IFrame_leftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode

	// IsFrame_leftContext differentiates from other interfaces.
	IsFrame_leftContext()
}

type Frame_leftContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_leftContext() *Frame_leftContext {
	var p = new(Frame_leftContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_left
	return p
}

func InitEmptyFrame_leftContext(p *Frame_leftContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_left
}

func (*Frame_leftContext) IsFrame_leftContext() {}

func NewFrame_leftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_leftContext {
	var p = new(Frame_leftContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_left

	return p
}

func (s *Frame_leftContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_leftContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_leftContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_leftContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *Frame_leftContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_leftContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_leftContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_leftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_leftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_leftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_left(s)
	}
}

func (s *Frame_leftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_left(s)
	}
}

func (s *Frame_leftContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_left(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_left() (localctx IFrame_leftContext) {
	localctx = NewFrame_leftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, SQLiteParserRULE_frame_left)
	p.SetState(2170)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 310, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2160)
			p.expr(0)
		}
		{
			p.SetState(2161)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2163)
			p.expr(0)
		}
		{
			p.SetState(2164)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2166)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2167)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2168)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2169)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_rightContext is an interface to support dynamic dispatch.
type IFrame_rightContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode

	// IsFrame_rightContext differentiates from other interfaces.
	IsFrame_rightContext()
}

type Frame_rightContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_rightContext() *Frame_rightContext {
	var p = new(Frame_rightContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_right
	return p
}

func InitEmptyFrame_rightContext(p *Frame_rightContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_right
}

func (*Frame_rightContext) IsFrame_rightContext() {}

func NewFrame_rightContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_rightContext {
	var p = new(Frame_rightContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_right

	return p
}

func (s *Frame_rightContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_rightContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_rightContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_rightContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *Frame_rightContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_rightContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_rightContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_rightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_rightContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_rightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_right(s)
	}
}

func (s *Frame_rightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_right(s)
	}
}

func (s *Frame_rightContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_right(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_right() (localctx IFrame_rightContext) {
	localctx = NewFrame_rightContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, SQLiteParserRULE_frame_right)
	p.SetState(2182)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 311, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2172)
			p.expr(0)
		}
		{
			p.SetState(2173)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2175)
			p.expr(0)
		}
		{
			p.SetState(2176)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2178)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2179)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2180)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2181)
			p.Match(SQLiteParserFOLLOWING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFrame_singleContext is an interface to support dynamic dispatch.
type IFrame_singleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	PRECEDING_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	ROW_() antlr.TerminalNode

	// IsFrame_singleContext differentiates from other interfaces.
	IsFrame_singleContext()
}

type Frame_singleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrame_singleContext() *Frame_singleContext {
	var p = new(Frame_singleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_single
	return p
}

func InitEmptyFrame_singleContext(p *Frame_singleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_frame_single
}

func (*Frame_singleContext) IsFrame_singleContext() {}

func NewFrame_singleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Frame_singleContext {
	var p = new(Frame_singleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_frame_single

	return p
}

func (s *Frame_singleContext) GetParser() antlr.Parser { return s.parser }

func (s *Frame_singleContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Frame_singleContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *Frame_singleContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *Frame_singleContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *Frame_singleContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *Frame_singleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Frame_singleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Frame_singleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFrame_single(s)
	}
}

func (s *Frame_singleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFrame_single(s)
	}
}

func (s *Frame_singleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFrame_single(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Frame_single() (localctx IFrame_singleContext) {
	localctx = NewFrame_singleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, SQLiteParserRULE_frame_single)
	p.SetState(2191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 312, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2184)
			p.expr(0)
		}
		{
			p.SetState(2185)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2187)
			p.Match(SQLiteParserUNBOUNDED_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2188)
			p.Match(SQLiteParserPRECEDING_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2189)
			p.Match(SQLiteParserCURRENT_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2190)
			p.Match(SQLiteParserROW_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_functionContext is an interface to support dynamic dispatch.
type IWindow_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllOPEN_PAR() []antlr.TerminalNode
	OPEN_PAR(i int) antlr.TerminalNode
	Expr() IExprContext
	AllCLOSE_PAR() []antlr.TerminalNode
	CLOSE_PAR(i int) antlr.TerminalNode
	OVER_() antlr.TerminalNode
	Order_by_expr_asc_desc() IOrder_by_expr_asc_descContext
	FIRST_VALUE_() antlr.TerminalNode
	LAST_VALUE_() antlr.TerminalNode
	Partition_by() IPartition_byContext
	Frame_clause() IFrame_clauseContext
	CUME_DIST_() antlr.TerminalNode
	PERCENT_RANK_() antlr.TerminalNode
	Order_by_expr() IOrder_by_exprContext
	DENSE_RANK_() antlr.TerminalNode
	RANK_() antlr.TerminalNode
	ROW_NUMBER_() antlr.TerminalNode
	LAG_() antlr.TerminalNode
	LEAD_() antlr.TerminalNode
	Offset() IOffsetContext
	Default_value() IDefault_valueContext
	NTH_VALUE_() antlr.TerminalNode
	COMMA() antlr.TerminalNode
	Signed_number() ISigned_numberContext
	NTILE_() antlr.TerminalNode

	// IsWindow_functionContext differentiates from other interfaces.
	IsWindow_functionContext()
}

type Window_functionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_functionContext() *Window_functionContext {
	var p = new(Window_functionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_function
	return p
}

func InitEmptyWindow_functionContext(p *Window_functionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_function
}

func (*Window_functionContext) IsWindow_functionContext() {}

func NewWindow_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_functionContext {
	var p = new(Window_functionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_function

	return p
}

func (s *Window_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_functionContext) AllOPEN_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserOPEN_PAR)
}

func (s *Window_functionContext) OPEN_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, i)
}

func (s *Window_functionContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Window_functionContext) AllCLOSE_PAR() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCLOSE_PAR)
}

func (s *Window_functionContext) CLOSE_PAR(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, i)
}

func (s *Window_functionContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *Window_functionContext) Order_by_expr_asc_desc() IOrder_by_expr_asc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_expr_asc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expr_asc_descContext)
}

func (s *Window_functionContext) FIRST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_VALUE_, 0)
}

func (s *Window_functionContext) LAST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_VALUE_, 0)
}

func (s *Window_functionContext) Partition_by() IPartition_byContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPartition_byContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPartition_byContext)
}

func (s *Window_functionContext) Frame_clause() IFrame_clauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFrame_clauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFrame_clauseContext)
}

func (s *Window_functionContext) CUME_DIST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCUME_DIST_, 0)
}

func (s *Window_functionContext) PERCENT_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPERCENT_RANK_, 0)
}

func (s *Window_functionContext) Order_by_expr() IOrder_by_exprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOrder_by_exprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOrder_by_exprContext)
}

func (s *Window_functionContext) DENSE_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDENSE_RANK_, 0)
}

func (s *Window_functionContext) RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANK_, 0)
}

func (s *Window_functionContext) ROW_NUMBER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_NUMBER_, 0)
}

func (s *Window_functionContext) LAG_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAG_, 0)
}

func (s *Window_functionContext) LEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEAD_, 0)
}

func (s *Window_functionContext) Offset() IOffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOffsetContext)
}

func (s *Window_functionContext) Default_value() IDefault_valueContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDefault_valueContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Window_functionContext) NTH_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTH_VALUE_, 0)
}

func (s *Window_functionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Window_functionContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Window_functionContext) NTILE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTILE_, 0)
}

func (s *Window_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_function(s)
	}
}

func (s *Window_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_function(s)
	}
}

func (s *Window_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_function() (localctx IWindow_functionContext) {
	localctx = NewWindow_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, SQLiteParserRULE_window_function)
	var _la int

	p.SetState(2278)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserFIRST_VALUE_, SQLiteParserLAST_VALUE_:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2193)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserFIRST_VALUE_ || _la == SQLiteParserLAST_VALUE_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2194)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2195)
			p.expr(0)
		}
		{
			p.SetState(2196)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2197)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2198)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2200)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2199)
				p.Partition_by()
			}

		}
		{
			p.SetState(2202)
			p.Order_by_expr_asc_desc()
		}
		p.SetState(2204)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&9007199523176449) != 0 {
			{
				p.SetState(2203)
				p.Frame_clause()
			}

		}
		{
			p.SetState(2206)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserCUME_DIST_, SQLiteParserPERCENT_RANK_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2208)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserCUME_DIST_ || _la == SQLiteParserPERCENT_RANK_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2209)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2210)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2211)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2212)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2214)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2213)
				p.Partition_by()
			}

		}
		p.SetState(2217)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserORDER_ {
			{
				p.SetState(2216)
				p.Order_by_expr()
			}

		}
		{
			p.SetState(2219)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserDENSE_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2220)
			_la = p.GetTokenStream().LA(1)

			if !((int64((_la-166)) & ^0x3f) == 0 && ((int64(1)<<(_la-166))&385) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2221)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2222)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2223)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2224)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2226)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2225)
				p.Partition_by()
			}

		}
		{
			p.SetState(2228)
			p.Order_by_expr_asc_desc()
		}
		{
			p.SetState(2229)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserLAG_, SQLiteParserLEAD_:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2231)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLiteParserLAG_ || _la == SQLiteParserLEAD_) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(2232)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2233)
			p.expr(0)
		}
		p.SetState(2235)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 318, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2234)
				p.Offset()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(2238)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserCOMMA {
			{
				p.SetState(2237)
				p.Default_value()
			}

		}
		{
			p.SetState(2240)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2241)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2242)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2244)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2243)
				p.Partition_by()
			}

		}
		{
			p.SetState(2246)
			p.Order_by_expr_asc_desc()
		}
		{
			p.SetState(2247)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserNTH_VALUE_:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2249)
			p.Match(SQLiteParserNTH_VALUE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2250)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2251)
			p.expr(0)
		}
		{
			p.SetState(2252)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2253)
			p.Signed_number()
		}
		{
			p.SetState(2254)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2255)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2256)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2258)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2257)
				p.Partition_by()
			}

		}
		{
			p.SetState(2260)
			p.Order_by_expr_asc_desc()
		}
		p.SetState(2262)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if (int64((_la-132)) & ^0x3f) == 0 && ((int64(1)<<(_la-132))&9007199523176449) != 0 {
			{
				p.SetState(2261)
				p.Frame_clause()
			}

		}
		{
			p.SetState(2264)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserNTILE_:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2266)
			p.Match(SQLiteParserNTILE_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2267)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2268)
			p.expr(0)
		}
		{
			p.SetState(2269)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2270)
			p.Match(SQLiteParserOVER_)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2271)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(2273)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserPARTITION_ {
			{
				p.SetState(2272)
				p.Partition_by()
			}

		}
		{
			p.SetState(2275)
			p.Order_by_expr_asc_desc()
		}
		{
			p.SetState(2276)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOffsetContext is an interface to support dynamic dispatch.
type IOffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	Signed_number() ISigned_numberContext

	// IsOffsetContext differentiates from other interfaces.
	IsOffsetContext()
}

type OffsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOffsetContext() *OffsetContext {
	var p = new(OffsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_offset
	return p
}

func InitEmptyOffsetContext(p *OffsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_offset
}

func (*OffsetContext) IsOffsetContext() {}

func NewOffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OffsetContext {
	var p = new(OffsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_offset

	return p
}

func (s *OffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *OffsetContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *OffsetContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *OffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOffset(s)
	}
}

func (s *OffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOffset(s)
	}
}

func (s *OffsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOffset(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Offset() (localctx IOffsetContext) {
	localctx = NewOffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, SQLiteParserRULE_offset)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2280)
		p.Match(SQLiteParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2281)
		p.Signed_number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	COMMA() antlr.TerminalNode
	Signed_number() ISigned_numberContext

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_default_value
	return p
}

func InitEmptyDefault_valueContext(p *Default_valueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_default_value
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) COMMA() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, 0)
}

func (s *Default_valueContext) Signed_number() ISigned_numberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISigned_numberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISigned_numberContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (s *Default_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDefault_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, SQLiteParserRULE_default_value)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2283)
		p.Match(SQLiteParserCOMMA)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2284)
		p.Signed_number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPartition_byContext is an interface to support dynamic dispatch.
type IPartition_byContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	PARTITION_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsPartition_byContext differentiates from other interfaces.
	IsPartition_byContext()
}

type Partition_byContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_byContext() *Partition_byContext {
	var p = new(Partition_byContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_partition_by
	return p
}

func InitEmptyPartition_byContext(p *Partition_byContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_partition_by
}

func (*Partition_byContext) IsPartition_byContext() {}

func NewPartition_byContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_byContext {
	var p = new(Partition_byContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_partition_by

	return p
}

func (s *Partition_byContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_byContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *Partition_byContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Partition_byContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Partition_byContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Partition_byContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_byContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_byContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPartition_by(s)
	}
}

func (s *Partition_byContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPartition_by(s)
	}
}

func (s *Partition_byContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPartition_by(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Partition_by() (localctx IPartition_byContext) {
	localctx = NewPartition_byContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, SQLiteParserRULE_partition_by)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2286)
		p.Match(SQLiteParserPARTITION_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2287)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2289)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2288)
				p.expr(0)
			}

		default:
			p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			goto errorExit
		}

		p.SetState(2291)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 325, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_exprContext is an interface to support dynamic dispatch.
type IOrder_by_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext

	// IsOrder_by_exprContext differentiates from other interfaces.
	IsOrder_by_exprContext()
}

type Order_by_exprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_exprContext() *Order_by_exprContext {
	var p = new(Order_by_exprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr
	return p
}

func InitEmptyOrder_by_exprContext(p *Order_by_exprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr
}

func (*Order_by_exprContext) IsOrder_by_exprContext() {}

func NewOrder_by_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_exprContext {
	var p = new(Order_by_exprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_expr

	return p
}

func (s *Order_by_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_exprContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_exprContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_exprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Order_by_exprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Order_by_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_expr(s)
	}
}

func (s *Order_by_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_expr() (localctx IOrder_by_exprContext) {
	localctx = NewOrder_by_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, SQLiteParserRULE_order_by_expr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2293)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2294)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2296)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-20266335795673336) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-16385) != 0) || ((int64((_la-129)) & ^0x3f) == 0 && ((int64(1)<<(_la-129))&-4323455642275708929) != 0) || ((int64((_la-193)) & ^0x3f) == 0 && ((int64(1)<<(_la-193))&7) != 0) {
		{
			p.SetState(2295)
			p.expr(0)
		}

		p.SetState(2298)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IOrder_by_expr_asc_descContext is an interface to support dynamic dispatch.
type IOrder_by_expr_asc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ORDER_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	Expr_asc_desc() IExpr_asc_descContext

	// IsOrder_by_expr_asc_descContext differentiates from other interfaces.
	IsOrder_by_expr_asc_descContext()
}

type Order_by_expr_asc_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expr_asc_descContext() *Order_by_expr_asc_descContext {
	var p = new(Order_by_expr_asc_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc
	return p
}

func InitEmptyOrder_by_expr_asc_descContext(p *Order_by_expr_asc_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc
}

func (*Order_by_expr_asc_descContext) IsOrder_by_expr_asc_descContext() {}

func NewOrder_by_expr_asc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expr_asc_descContext {
	var p = new(Order_by_expr_asc_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_order_by_expr_asc_desc

	return p
}

func (s *Order_by_expr_asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expr_asc_descContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *Order_by_expr_asc_descContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *Order_by_expr_asc_descContext) Expr_asc_desc() IExpr_asc_descContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpr_asc_descContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpr_asc_descContext)
}

func (s *Order_by_expr_asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expr_asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expr_asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterOrder_by_expr_asc_desc(s)
	}
}

func (s *Order_by_expr_asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitOrder_by_expr_asc_desc(s)
	}
}

func (s *Order_by_expr_asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitOrder_by_expr_asc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Order_by_expr_asc_desc() (localctx IOrder_by_expr_asc_descContext) {
	localctx = NewOrder_by_expr_asc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, SQLiteParserRULE_order_by_expr_asc_desc)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2300)
		p.Match(SQLiteParserORDER_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2301)
		p.Match(SQLiteParserBY_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2302)
		p.Expr_asc_desc()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExpr_asc_descContext is an interface to support dynamic dispatch.
type IExpr_asc_descContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllAsc_desc() []IAsc_descContext
	Asc_desc(i int) IAsc_descContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsExpr_asc_descContext differentiates from other interfaces.
	IsExpr_asc_descContext()
}

type Expr_asc_descContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpr_asc_descContext() *Expr_asc_descContext {
	var p = new(Expr_asc_descContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr_asc_desc
	return p
}

func InitEmptyExpr_asc_descContext(p *Expr_asc_descContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_expr_asc_desc
}

func (*Expr_asc_descContext) IsExpr_asc_descContext() {}

func NewExpr_asc_descContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expr_asc_descContext {
	var p = new(Expr_asc_descContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_expr_asc_desc

	return p
}

func (s *Expr_asc_descContext) GetParser() antlr.Parser { return s.parser }

func (s *Expr_asc_descContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *Expr_asc_descContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Expr_asc_descContext) AllAsc_desc() []IAsc_descContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAsc_descContext); ok {
			len++
		}
	}

	tst := make([]IAsc_descContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAsc_descContext); ok {
			tst[i] = t.(IAsc_descContext)
			i++
		}
	}

	return tst
}

func (s *Expr_asc_descContext) Asc_desc(i int) IAsc_descContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsc_descContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsc_descContext)
}

func (s *Expr_asc_descContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(SQLiteParserCOMMA)
}

func (s *Expr_asc_descContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMA, i)
}

func (s *Expr_asc_descContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expr_asc_descContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expr_asc_descContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterExpr_asc_desc(s)
	}
}

func (s *Expr_asc_descContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitExpr_asc_desc(s)
	}
}

func (s *Expr_asc_descContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitExpr_asc_desc(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Expr_asc_desc() (localctx IExpr_asc_descContext) {
	localctx = NewExpr_asc_descContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, SQLiteParserRULE_expr_asc_desc)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2304)
		p.expr(0)
	}
	p.SetState(2306)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
		{
			p.SetState(2305)
			p.Asc_desc()
		}

	}
	p.SetState(2315)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == SQLiteParserCOMMA {
		{
			p.SetState(2308)
			p.Match(SQLiteParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2309)
			p.expr(0)
		}
		p.SetState(2311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == SQLiteParserASC_ || _la == SQLiteParserDESC_ {
			{
				p.SetState(2310)
				p.Asc_desc()
			}

		}

		p.SetState(2317)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInitial_selectContext is an interface to support dynamic dispatch.
type IInitial_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_stmt() ISelect_stmtContext

	// IsInitial_selectContext differentiates from other interfaces.
	IsInitial_selectContext()
}

type Initial_selectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitial_selectContext() *Initial_selectContext {
	var p = new(Initial_selectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_initial_select
	return p
}

func InitEmptyInitial_selectContext(p *Initial_selectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_initial_select
}

func (*Initial_selectContext) IsInitial_selectContext() {}

func NewInitial_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Initial_selectContext {
	var p = new(Initial_selectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_initial_select

	return p
}

func (s *Initial_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Initial_selectContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Initial_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Initial_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Initial_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterInitial_select(s)
	}
}

func (s *Initial_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitInitial_select(s)
	}
}

func (s *Initial_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitInitial_select(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Initial_select() (localctx IInitial_selectContext) {
	localctx = NewInitial_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, SQLiteParserRULE_initial_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2318)
		p.Select_stmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRecursive_selectContext is an interface to support dynamic dispatch.
type IRecursive_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Select_stmt() ISelect_stmtContext

	// IsRecursive_selectContext differentiates from other interfaces.
	IsRecursive_selectContext()
}

type Recursive_selectContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecursive_selectContext() *Recursive_selectContext {
	var p = new(Recursive_selectContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_recursive_select
	return p
}

func InitEmptyRecursive_selectContext(p *Recursive_selectContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_recursive_select
}

func (*Recursive_selectContext) IsRecursive_selectContext() {}

func NewRecursive_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recursive_selectContext {
	var p = new(Recursive_selectContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_recursive_select

	return p
}

func (s *Recursive_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Recursive_selectContext) Select_stmt() ISelect_stmtContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISelect_stmtContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISelect_stmtContext)
}

func (s *Recursive_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recursive_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recursive_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterRecursive_select(s)
	}
}

func (s *Recursive_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitRecursive_select(s)
	}
}

func (s *Recursive_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitRecursive_select(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Recursive_select() (localctx IRecursive_selectContext) {
	localctx = NewRecursive_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, SQLiteParserRULE_recursive_select)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2320)
		p.Select_stmt()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MINUS() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	TILDE() antlr.TerminalNode
	NOT_() antlr.TerminalNode

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
	return p
}

func InitEmptyUnary_operatorContext(p *Unary_operatorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_unary_operator
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMINUS, 0)
}

func (s *Unary_operatorContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLUS, 0)
}

func (s *Unary_operatorContext) TILDE() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTILDE, 0)
}

func (s *Unary_operatorContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, SQLiteParserRULE_unary_operator)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2322)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1792) != 0) || _la == SQLiteParserNOT_) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IError_messageContext is an interface to support dynamic dispatch.
type IError_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRING_LITERAL() antlr.TerminalNode

	// IsError_messageContext differentiates from other interfaces.
	IsError_messageContext()
}

type Error_messageContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyError_messageContext() *Error_messageContext {
	var p = new(Error_messageContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
	return p
}

func InitEmptyError_messageContext(p *Error_messageContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_error_message
}

func (*Error_messageContext) IsError_messageContext() {}

func NewError_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Error_messageContext {
	var p = new(Error_messageContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_error_message

	return p
}

func (s *Error_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Error_messageContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Error_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Error_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Error_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterError_message(s)
	}
}

func (s *Error_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitError_message(s)
	}
}

func (s *Error_messageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitError_message(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Error_message() (localctx IError_messageContext) {
	localctx = NewError_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, SQLiteParserRULE_error_message)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2324)
		p.Match(SQLiteParserSTRING_LITERAL)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModule_argumentContext is an interface to support dynamic dispatch.
type IModule_argumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	Column_def() IColumn_defContext

	// IsModule_argumentContext differentiates from other interfaces.
	IsModule_argumentContext()
}

type Module_argumentContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_argumentContext() *Module_argumentContext {
	var p = new(Module_argumentContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
	return p
}

func InitEmptyModule_argumentContext(p *Module_argumentContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_argument
}

func (*Module_argumentContext) IsModule_argumentContext() {}

func NewModule_argumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_argumentContext {
	var p = new(Module_argumentContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_argument

	return p
}

func (s *Module_argumentContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_argumentContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *Module_argumentContext) Column_def() IColumn_defContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IColumn_defContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IColumn_defContext)
}

func (s *Module_argumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_argumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_argumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterModule_argument(s)
	}
}

func (s *Module_argumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitModule_argument(s)
	}
}

func (s *Module_argumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitModule_argument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_argument() (localctx IModule_argumentContext) {
	localctx = NewModule_argumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, SQLiteParserRULE_module_argument)
	p.SetState(2328)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 330, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2326)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2327)
			p.Column_def()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	STRING_LITERAL() antlr.TerminalNode

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_alias
	return p
}

func InitEmptyColumn_aliasContext(p *Column_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_alias
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Column_aliasContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (s *Column_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, SQLiteParserRULE_column_alias)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2330)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLiteParserIDENTIFIER || _la == SQLiteParserSTRING_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeywordContext is an interface to support dynamic dispatch.
type IKeywordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ABORT_() antlr.TerminalNode
	ACTION_() antlr.TerminalNode
	ADD_() antlr.TerminalNode
	AFTER_() antlr.TerminalNode
	ALL_() antlr.TerminalNode
	ALTER_() antlr.TerminalNode
	ANALYZE_() antlr.TerminalNode
	AND_() antlr.TerminalNode
	AS_() antlr.TerminalNode
	ASC_() antlr.TerminalNode
	ATTACH_() antlr.TerminalNode
	AUTOINCREMENT_() antlr.TerminalNode
	BEFORE_() antlr.TerminalNode
	BEGIN_() antlr.TerminalNode
	BETWEEN_() antlr.TerminalNode
	BY_() antlr.TerminalNode
	CASCADE_() antlr.TerminalNode
	CASE_() antlr.TerminalNode
	CAST_() antlr.TerminalNode
	CHECK_() antlr.TerminalNode
	COLLATE_() antlr.TerminalNode
	COLUMN_() antlr.TerminalNode
	COMMIT_() antlr.TerminalNode
	CONFLICT_() antlr.TerminalNode
	CONSTRAINT_() antlr.TerminalNode
	CREATE_() antlr.TerminalNode
	CROSS_() antlr.TerminalNode
	CURRENT_DATE_() antlr.TerminalNode
	CURRENT_TIME_() antlr.TerminalNode
	CURRENT_TIMESTAMP_() antlr.TerminalNode
	DATABASE_() antlr.TerminalNode
	DEFAULT_() antlr.TerminalNode
	DEFERRABLE_() antlr.TerminalNode
	DEFERRED_() antlr.TerminalNode
	DELETE_() antlr.TerminalNode
	DESC_() antlr.TerminalNode
	DETACH_() antlr.TerminalNode
	DISTINCT_() antlr.TerminalNode
	DROP_() antlr.TerminalNode
	EACH_() antlr.TerminalNode
	ELSE_() antlr.TerminalNode
	END_() antlr.TerminalNode
	ESCAPE_() antlr.TerminalNode
	EXCEPT_() antlr.TerminalNode
	EXCLUSIVE_() antlr.TerminalNode
	EXISTS_() antlr.TerminalNode
	EXPLAIN_() antlr.TerminalNode
	FAIL_() antlr.TerminalNode
	FOR_() antlr.TerminalNode
	FOREIGN_() antlr.TerminalNode
	FROM_() antlr.TerminalNode
	FULL_() antlr.TerminalNode
	GLOB_() antlr.TerminalNode
	GROUP_() antlr.TerminalNode
	HAVING_() antlr.TerminalNode
	IF_() antlr.TerminalNode
	IGNORE_() antlr.TerminalNode
	IMMEDIATE_() antlr.TerminalNode
	IN_() antlr.TerminalNode
	INDEX_() antlr.TerminalNode
	INDEXED_() antlr.TerminalNode
	INITIALLY_() antlr.TerminalNode
	INNER_() antlr.TerminalNode
	INSERT_() antlr.TerminalNode
	INSTEAD_() antlr.TerminalNode
	INTERSECT_() antlr.TerminalNode
	INTO_() antlr.TerminalNode
	IS_() antlr.TerminalNode
	ISNULL_() antlr.TerminalNode
	JOIN_() antlr.TerminalNode
	KEY_() antlr.TerminalNode
	LEFT_() antlr.TerminalNode
	LIKE_() antlr.TerminalNode
	LIMIT_() antlr.TerminalNode
	MATCH_() antlr.TerminalNode
	NATURAL_() antlr.TerminalNode
	NO_() antlr.TerminalNode
	NOT_() antlr.TerminalNode
	NOTNULL_() antlr.TerminalNode
	NULL_() antlr.TerminalNode
	OF_() antlr.TerminalNode
	OFFSET_() antlr.TerminalNode
	ON_() antlr.TerminalNode
	OR_() antlr.TerminalNode
	ORDER_() antlr.TerminalNode
	OUTER_() antlr.TerminalNode
	PLAN_() antlr.TerminalNode
	PRAGMA_() antlr.TerminalNode
	PRIMARY_() antlr.TerminalNode
	QUERY_() antlr.TerminalNode
	RAISE_() antlr.TerminalNode
	RECURSIVE_() antlr.TerminalNode
	REFERENCES_() antlr.TerminalNode
	REGEXP_() antlr.TerminalNode
	REINDEX_() antlr.TerminalNode
	RELEASE_() antlr.TerminalNode
	RENAME_() antlr.TerminalNode
	REPLACE_() antlr.TerminalNode
	RESTRICT_() antlr.TerminalNode
	RIGHT_() antlr.TerminalNode
	ROLLBACK_() antlr.TerminalNode
	ROW_() antlr.TerminalNode
	ROWS_() antlr.TerminalNode
	SAVEPOINT_() antlr.TerminalNode
	SELECT_() antlr.TerminalNode
	SET_() antlr.TerminalNode
	TABLE_() antlr.TerminalNode
	TEXT_() antlr.TerminalNode
	TEMP_() antlr.TerminalNode
	TEMPORARY_() antlr.TerminalNode
	THEN_() antlr.TerminalNode
	TO_() antlr.TerminalNode
	TRANSACTION_() antlr.TerminalNode
	TRIGGER_() antlr.TerminalNode
	UNION_() antlr.TerminalNode
	UNIQUE_() antlr.TerminalNode
	UPDATE_() antlr.TerminalNode
	USING_() antlr.TerminalNode
	VACUUM_() antlr.TerminalNode
	VALUES_() antlr.TerminalNode
	VIEW_() antlr.TerminalNode
	VIRTUAL_() antlr.TerminalNode
	WHEN_() antlr.TerminalNode
	WHERE_() antlr.TerminalNode
	WITH_() antlr.TerminalNode
	WITHOUT_() antlr.TerminalNode
	FIRST_VALUE_() antlr.TerminalNode
	OVER_() antlr.TerminalNode
	PARTITION_() antlr.TerminalNode
	RANGE_() antlr.TerminalNode
	PRECEDING_() antlr.TerminalNode
	UNBOUNDED_() antlr.TerminalNode
	CURRENT_() antlr.TerminalNode
	FOLLOWING_() antlr.TerminalNode
	CUME_DIST_() antlr.TerminalNode
	DENSE_RANK_() antlr.TerminalNode
	LAG_() antlr.TerminalNode
	LAST_VALUE_() antlr.TerminalNode
	LEAD_() antlr.TerminalNode
	NTH_VALUE_() antlr.TerminalNode
	NTILE_() antlr.TerminalNode
	PERCENT_RANK_() antlr.TerminalNode
	RANK_() antlr.TerminalNode
	ROW_NUMBER_() antlr.TerminalNode
	GENERATED_() antlr.TerminalNode
	ALWAYS_() antlr.TerminalNode
	STORED_() antlr.TerminalNode
	TRUE_() antlr.TerminalNode
	FALSE_() antlr.TerminalNode
	WINDOW_() antlr.TerminalNode
	NULLS_() antlr.TerminalNode
	FIRST_() antlr.TerminalNode
	LAST_() antlr.TerminalNode
	FILTER_() antlr.TerminalNode
	GROUPS_() antlr.TerminalNode
	EXCLUDE_() antlr.TerminalNode

	// IsKeywordContext differentiates from other interfaces.
	IsKeywordContext()
}

type KeywordContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordContext() *KeywordContext {
	var p = new(KeywordContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
	return p
}

func InitEmptyKeywordContext(p *KeywordContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_keyword
}

func (*KeywordContext) IsKeywordContext() {}

func NewKeywordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordContext {
	var p = new(KeywordContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_keyword

	return p
}

func (s *KeywordContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordContext) ABORT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserABORT_, 0)
}

func (s *KeywordContext) ACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserACTION_, 0)
}

func (s *KeywordContext) ADD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserADD_, 0)
}

func (s *KeywordContext) AFTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAFTER_, 0)
}

func (s *KeywordContext) ALL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALL_, 0)
}

func (s *KeywordContext) ALTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALTER_, 0)
}

func (s *KeywordContext) ANALYZE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserANALYZE_, 0)
}

func (s *KeywordContext) AND_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAND_, 0)
}

func (s *KeywordContext) AS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAS_, 0)
}

func (s *KeywordContext) ASC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserASC_, 0)
}

func (s *KeywordContext) ATTACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserATTACH_, 0)
}

func (s *KeywordContext) AUTOINCREMENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserAUTOINCREMENT_, 0)
}

func (s *KeywordContext) BEFORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEFORE_, 0)
}

func (s *KeywordContext) BEGIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBEGIN_, 0)
}

func (s *KeywordContext) BETWEEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBETWEEN_, 0)
}

func (s *KeywordContext) BY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserBY_, 0)
}

func (s *KeywordContext) CASCADE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASCADE_, 0)
}

func (s *KeywordContext) CASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCASE_, 0)
}

func (s *KeywordContext) CAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCAST_, 0)
}

func (s *KeywordContext) CHECK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCHECK_, 0)
}

func (s *KeywordContext) COLLATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLLATE_, 0)
}

func (s *KeywordContext) COLUMN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOLUMN_, 0)
}

func (s *KeywordContext) COMMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCOMMIT_, 0)
}

func (s *KeywordContext) CONFLICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONFLICT_, 0)
}

func (s *KeywordContext) CONSTRAINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCONSTRAINT_, 0)
}

func (s *KeywordContext) CREATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCREATE_, 0)
}

func (s *KeywordContext) CROSS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCROSS_, 0)
}

func (s *KeywordContext) CURRENT_DATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_DATE_, 0)
}

func (s *KeywordContext) CURRENT_TIME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIME_, 0)
}

func (s *KeywordContext) CURRENT_TIMESTAMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_TIMESTAMP_, 0)
}

func (s *KeywordContext) DATABASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDATABASE_, 0)
}

func (s *KeywordContext) DEFAULT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFAULT_, 0)
}

func (s *KeywordContext) DEFERRABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRABLE_, 0)
}

func (s *KeywordContext) DEFERRED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDEFERRED_, 0)
}

func (s *KeywordContext) DELETE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDELETE_, 0)
}

func (s *KeywordContext) DESC_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDESC_, 0)
}

func (s *KeywordContext) DETACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDETACH_, 0)
}

func (s *KeywordContext) DISTINCT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDISTINCT_, 0)
}

func (s *KeywordContext) DROP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDROP_, 0)
}

func (s *KeywordContext) EACH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEACH_, 0)
}

func (s *KeywordContext) ELSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserELSE_, 0)
}

func (s *KeywordContext) END_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEND_, 0)
}

func (s *KeywordContext) ESCAPE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserESCAPE_, 0)
}

func (s *KeywordContext) EXCEPT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCEPT_, 0)
}

func (s *KeywordContext) EXCLUSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUSIVE_, 0)
}

func (s *KeywordContext) EXISTS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXISTS_, 0)
}

func (s *KeywordContext) EXPLAIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXPLAIN_, 0)
}

func (s *KeywordContext) FAIL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFAIL_, 0)
}

func (s *KeywordContext) FOR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOR_, 0)
}

func (s *KeywordContext) FOREIGN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOREIGN_, 0)
}

func (s *KeywordContext) FROM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFROM_, 0)
}

func (s *KeywordContext) FULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFULL_, 0)
}

func (s *KeywordContext) GLOB_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGLOB_, 0)
}

func (s *KeywordContext) GROUP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUP_, 0)
}

func (s *KeywordContext) HAVING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserHAVING_, 0)
}

func (s *KeywordContext) IF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIF_, 0)
}

func (s *KeywordContext) IGNORE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIGNORE_, 0)
}

func (s *KeywordContext) IMMEDIATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIMMEDIATE_, 0)
}

func (s *KeywordContext) IN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIN_, 0)
}

func (s *KeywordContext) INDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEX_, 0)
}

func (s *KeywordContext) INDEXED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINDEXED_, 0)
}

func (s *KeywordContext) INITIALLY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINITIALLY_, 0)
}

func (s *KeywordContext) INNER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINNER_, 0)
}

func (s *KeywordContext) INSERT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSERT_, 0)
}

func (s *KeywordContext) INSTEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINSTEAD_, 0)
}

func (s *KeywordContext) INTERSECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTERSECT_, 0)
}

func (s *KeywordContext) INTO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserINTO_, 0)
}

func (s *KeywordContext) IS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIS_, 0)
}

func (s *KeywordContext) ISNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserISNULL_, 0)
}

func (s *KeywordContext) JOIN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserJOIN_, 0)
}

func (s *KeywordContext) KEY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserKEY_, 0)
}

func (s *KeywordContext) LEFT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEFT_, 0)
}

func (s *KeywordContext) LIKE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIKE_, 0)
}

func (s *KeywordContext) LIMIT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLIMIT_, 0)
}

func (s *KeywordContext) MATCH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserMATCH_, 0)
}

func (s *KeywordContext) NATURAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNATURAL_, 0)
}

func (s *KeywordContext) NO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNO_, 0)
}

func (s *KeywordContext) NOT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOT_, 0)
}

func (s *KeywordContext) NOTNULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNOTNULL_, 0)
}

func (s *KeywordContext) NULL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULL_, 0)
}

func (s *KeywordContext) OF_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOF_, 0)
}

func (s *KeywordContext) OFFSET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOFFSET_, 0)
}

func (s *KeywordContext) ON_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserON_, 0)
}

func (s *KeywordContext) OR_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOR_, 0)
}

func (s *KeywordContext) ORDER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserORDER_, 0)
}

func (s *KeywordContext) OUTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOUTER_, 0)
}

func (s *KeywordContext) PLAN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPLAN_, 0)
}

func (s *KeywordContext) PRAGMA_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRAGMA_, 0)
}

func (s *KeywordContext) PRIMARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRIMARY_, 0)
}

func (s *KeywordContext) QUERY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserQUERY_, 0)
}

func (s *KeywordContext) RAISE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRAISE_, 0)
}

func (s *KeywordContext) RECURSIVE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRECURSIVE_, 0)
}

func (s *KeywordContext) REFERENCES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREFERENCES_, 0)
}

func (s *KeywordContext) REGEXP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREGEXP_, 0)
}

func (s *KeywordContext) REINDEX_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREINDEX_, 0)
}

func (s *KeywordContext) RELEASE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRELEASE_, 0)
}

func (s *KeywordContext) RENAME_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRENAME_, 0)
}

func (s *KeywordContext) REPLACE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserREPLACE_, 0)
}

func (s *KeywordContext) RESTRICT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRESTRICT_, 0)
}

func (s *KeywordContext) RIGHT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRIGHT_, 0)
}

func (s *KeywordContext) ROLLBACK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROLLBACK_, 0)
}

func (s *KeywordContext) ROW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_, 0)
}

func (s *KeywordContext) ROWS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROWS_, 0)
}

func (s *KeywordContext) SAVEPOINT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSAVEPOINT_, 0)
}

func (s *KeywordContext) SELECT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSELECT_, 0)
}

func (s *KeywordContext) SET_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSET_, 0)
}

func (s *KeywordContext) TABLE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTABLE_, 0)
}

func (s *KeywordContext) TEXT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEXT_, 0)
}

func (s *KeywordContext) TEMP_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMP_, 0)
}

func (s *KeywordContext) TEMPORARY_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTEMPORARY_, 0)
}

func (s *KeywordContext) THEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTHEN_, 0)
}

func (s *KeywordContext) TO_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTO_, 0)
}

func (s *KeywordContext) TRANSACTION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRANSACTION_, 0)
}

func (s *KeywordContext) TRIGGER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRIGGER_, 0)
}

func (s *KeywordContext) UNION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNION_, 0)
}

func (s *KeywordContext) UNIQUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNIQUE_, 0)
}

func (s *KeywordContext) UPDATE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUPDATE_, 0)
}

func (s *KeywordContext) USING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUSING_, 0)
}

func (s *KeywordContext) VACUUM_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVACUUM_, 0)
}

func (s *KeywordContext) VALUES_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVALUES_, 0)
}

func (s *KeywordContext) VIEW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIEW_, 0)
}

func (s *KeywordContext) VIRTUAL_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserVIRTUAL_, 0)
}

func (s *KeywordContext) WHEN_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHEN_, 0)
}

func (s *KeywordContext) WHERE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWHERE_, 0)
}

func (s *KeywordContext) WITH_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITH_, 0)
}

func (s *KeywordContext) WITHOUT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWITHOUT_, 0)
}

func (s *KeywordContext) FIRST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_VALUE_, 0)
}

func (s *KeywordContext) OVER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOVER_, 0)
}

func (s *KeywordContext) PARTITION_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPARTITION_, 0)
}

func (s *KeywordContext) RANGE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANGE_, 0)
}

func (s *KeywordContext) PRECEDING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPRECEDING_, 0)
}

func (s *KeywordContext) UNBOUNDED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserUNBOUNDED_, 0)
}

func (s *KeywordContext) CURRENT_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCURRENT_, 0)
}

func (s *KeywordContext) FOLLOWING_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFOLLOWING_, 0)
}

func (s *KeywordContext) CUME_DIST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCUME_DIST_, 0)
}

func (s *KeywordContext) DENSE_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserDENSE_RANK_, 0)
}

func (s *KeywordContext) LAG_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAG_, 0)
}

func (s *KeywordContext) LAST_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_VALUE_, 0)
}

func (s *KeywordContext) LEAD_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLEAD_, 0)
}

func (s *KeywordContext) NTH_VALUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTH_VALUE_, 0)
}

func (s *KeywordContext) NTILE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNTILE_, 0)
}

func (s *KeywordContext) PERCENT_RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserPERCENT_RANK_, 0)
}

func (s *KeywordContext) RANK_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserRANK_, 0)
}

func (s *KeywordContext) ROW_NUMBER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserROW_NUMBER_, 0)
}

func (s *KeywordContext) GENERATED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGENERATED_, 0)
}

func (s *KeywordContext) ALWAYS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserALWAYS_, 0)
}

func (s *KeywordContext) STORED_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTORED_, 0)
}

func (s *KeywordContext) TRUE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserTRUE_, 0)
}

func (s *KeywordContext) FALSE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFALSE_, 0)
}

func (s *KeywordContext) WINDOW_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserWINDOW_, 0)
}

func (s *KeywordContext) NULLS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserNULLS_, 0)
}

func (s *KeywordContext) FIRST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFIRST_, 0)
}

func (s *KeywordContext) LAST_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserLAST_, 0)
}

func (s *KeywordContext) FILTER_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserFILTER_, 0)
}

func (s *KeywordContext) GROUPS_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserGROUPS_, 0)
}

func (s *KeywordContext) EXCLUDE_() antlr.TerminalNode {
	return s.GetToken(SQLiteParserEXCLUDE_, 0)
}

func (s *KeywordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterKeyword(s)
	}
}

func (s *KeywordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitKeyword(s)
	}
}

func (s *KeywordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitKeyword(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Keyword() (localctx IKeywordContext) {
	localctx = NewKeywordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, SQLiteParserRULE_keyword)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2332)
		_la = p.GetTokenStream().LA(1)

		if !(((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-20266335795675136) != 0) || ((int64((_la-64)) & ^0x3f) == 0 && ((int64(1)<<(_la-64))&-16385) != 0) || ((int64((_la-129)) & ^0x3f) == 0 && ((int64(1)<<(_la-129))&288230376151678975) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
	return p
}

func InitEmptyNameContext(p *NameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_name
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, SQLiteParserRULE_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2334)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDatabase_nameContext is an interface to support dynamic dispatch.
type IDatabase_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsDatabase_nameContext differentiates from other interfaces.
	IsDatabase_nameContext()
}

type Database_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_nameContext() *Database_nameContext {
	var p = new(Database_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_database_name
	return p
}

func InitEmptyDatabase_nameContext(p *Database_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_database_name
}

func (*Database_nameContext) IsDatabase_nameContext() {}

func NewDatabase_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_nameContext {
	var p = new(Database_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_database_name

	return p
}

func (s *Database_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Database_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterDatabase_name(s)
	}
}

func (s *Database_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitDatabase_name(s)
	}
}

func (s *Database_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitDatabase_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Database_name() (localctx IDatabase_nameContext) {
	localctx = NewDatabase_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, SQLiteParserRULE_database_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2336)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunction_nameContext is an interface to support dynamic dispatch.
type IFunction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsFunction_nameContext differentiates from other interfaces.
	IsFunction_nameContext()
}

type Function_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_nameContext() *Function_nameContext {
	var p = new(Function_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
	return p
}

func InitEmptyFunction_nameContext(p *Function_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_function_name
}

func (*Function_nameContext) IsFunction_nameContext() {}

func NewFunction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_nameContext {
	var p = new(Function_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_function_name

	return p
}

func (s *Function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFunction_name(s)
	}
}

func (s *Function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFunction_name(s)
	}
}

func (s *Function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFunction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Function_name() (localctx IFunction_nameContext) {
	localctx = NewFunction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, SQLiteParserRULE_function_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2338)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISchema_nameContext is an interface to support dynamic dispatch.
type ISchema_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsSchema_nameContext differentiates from other interfaces.
	IsSchema_nameContext()
}

type Schema_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_nameContext() *Schema_nameContext {
	var p = new(Schema_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_schema_name
	return p
}

func InitEmptySchema_nameContext(p *Schema_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_schema_name
}

func (*Schema_nameContext) IsSchema_nameContext() {}

func NewSchema_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_nameContext {
	var p = new(Schema_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_schema_name

	return p
}

func (s *Schema_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Schema_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSchema_name(s)
	}
}

func (s *Schema_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSchema_name(s)
	}
}

func (s *Schema_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSchema_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Schema_name() (localctx ISchema_nameContext) {
	localctx = NewSchema_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, SQLiteParserRULE_schema_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2340)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
	return p
}

func InitEmptyTable_nameContext(p *Table_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_name
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, SQLiteParserRULE_table_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2342)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_or_index_nameContext is an interface to support dynamic dispatch.
type ITable_or_index_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTable_or_index_nameContext differentiates from other interfaces.
	IsTable_or_index_nameContext()
}

type Table_or_index_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_or_index_nameContext() *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
	return p
}

func InitEmptyTable_or_index_nameContext(p *Table_or_index_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_or_index_name
}

func (*Table_or_index_nameContext) IsTable_or_index_nameContext() {}

func NewTable_or_index_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_or_index_nameContext {
	var p = new(Table_or_index_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_or_index_name

	return p
}

func (s *Table_or_index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_or_index_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_or_index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_or_index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_or_index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_or_index_name(s)
	}
}

func (s *Table_or_index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_or_index_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_or_index_name() (localctx ITable_or_index_nameContext) {
	localctx = NewTable_or_index_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, SQLiteParserRULE_table_or_index_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2344)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IColumn_nameContext is an interface to support dynamic dispatch.
type IColumn_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsColumn_nameContext differentiates from other interfaces.
	IsColumn_nameContext()
}

type Column_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_nameContext() *Column_nameContext {
	var p = new(Column_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
	return p
}

func InitEmptyColumn_nameContext(p *Column_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_column_name
}

func (*Column_nameContext) IsColumn_nameContext() {}

func NewColumn_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_nameContext {
	var p = new(Column_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_column_name

	return p
}

func (s *Column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterColumn_name(s)
	}
}

func (s *Column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitColumn_name(s)
	}
}

func (s *Column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitColumn_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Column_name() (localctx IColumn_nameContext) {
	localctx = NewColumn_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, SQLiteParserRULE_column_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2346)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
	return p
}

func InitEmptyCollation_nameContext(p *Collation_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_collation_name
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitCollation_name(s)
	}
}

func (s *Collation_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitCollation_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Collation_name() (localctx ICollation_nameContext) {
	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, SQLiteParserRULE_collation_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2348)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForeign_tableContext is an interface to support dynamic dispatch.
type IForeign_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsForeign_tableContext differentiates from other interfaces.
	IsForeign_tableContext()
}

type Foreign_tableContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForeign_tableContext() *Foreign_tableContext {
	var p = new(Foreign_tableContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
	return p
}

func InitEmptyForeign_tableContext(p *Foreign_tableContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_foreign_table
}

func (*Foreign_tableContext) IsForeign_tableContext() {}

func NewForeign_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Foreign_tableContext {
	var p = new(Foreign_tableContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_foreign_table

	return p
}

func (s *Foreign_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Foreign_tableContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Foreign_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Foreign_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Foreign_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterForeign_table(s)
	}
}

func (s *Foreign_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitForeign_table(s)
	}
}

func (s *Foreign_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitForeign_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Foreign_table() (localctx IForeign_tableContext) {
	localctx = NewForeign_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, SQLiteParserRULE_foreign_table)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2350)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIndex_nameContext is an interface to support dynamic dispatch.
type IIndex_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsIndex_nameContext differentiates from other interfaces.
	IsIndex_nameContext()
}

type Index_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_nameContext() *Index_nameContext {
	var p = new(Index_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
	return p
}

func InitEmptyIndex_nameContext(p *Index_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_index_name
}

func (*Index_nameContext) IsIndex_nameContext() {}

func NewIndex_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_nameContext {
	var p = new(Index_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_index_name

	return p
}

func (s *Index_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Index_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterIndex_name(s)
	}
}

func (s *Index_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitIndex_name(s)
	}
}

func (s *Index_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitIndex_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Index_name() (localctx IIndex_nameContext) {
	localctx = NewIndex_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, SQLiteParserRULE_index_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2352)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITrigger_nameContext is an interface to support dynamic dispatch.
type ITrigger_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTrigger_nameContext differentiates from other interfaces.
	IsTrigger_nameContext()
}

type Trigger_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrigger_nameContext() *Trigger_nameContext {
	var p = new(Trigger_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
	return p
}

func InitEmptyTrigger_nameContext(p *Trigger_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_trigger_name
}

func (*Trigger_nameContext) IsTrigger_nameContext() {}

func NewTrigger_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trigger_nameContext {
	var p = new(Trigger_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_trigger_name

	return p
}

func (s *Trigger_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Trigger_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Trigger_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trigger_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trigger_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTrigger_name(s)
	}
}

func (s *Trigger_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTrigger_name(s)
	}
}

func (s *Trigger_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTrigger_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Trigger_name() (localctx ITrigger_nameContext) {
	localctx = NewTrigger_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, SQLiteParserRULE_trigger_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2354)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IView_nameContext is an interface to support dynamic dispatch.
type IView_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsView_nameContext differentiates from other interfaces.
	IsView_nameContext()
}

type View_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_nameContext() *View_nameContext {
	var p = new(View_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
	return p
}

func InitEmptyView_nameContext(p *View_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_view_name
}

func (*View_nameContext) IsView_nameContext() {}

func NewView_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_nameContext {
	var p = new(View_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_view_name

	return p
}

func (s *View_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *View_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *View_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterView_name(s)
	}
}

func (s *View_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitView_name(s)
	}
}

func (s *View_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitView_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) View_name() (localctx IView_nameContext) {
	localctx = NewView_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, SQLiteParserRULE_view_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2356)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModule_nameContext is an interface to support dynamic dispatch.
type IModule_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsModule_nameContext differentiates from other interfaces.
	IsModule_nameContext()
}

type Module_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModule_nameContext() *Module_nameContext {
	var p = new(Module_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
	return p
}

func InitEmptyModule_nameContext(p *Module_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_module_name
}

func (*Module_nameContext) IsModule_nameContext() {}

func NewModule_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Module_nameContext {
	var p = new(Module_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_module_name

	return p
}

func (s *Module_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Module_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Module_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Module_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Module_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterModule_name(s)
	}
}

func (s *Module_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitModule_name(s)
	}
}

func (s *Module_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitModule_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Module_name() (localctx IModule_nameContext) {
	localctx = NewModule_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, SQLiteParserRULE_module_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2358)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPragma_nameContext is an interface to support dynamic dispatch.
type IPragma_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsPragma_nameContext differentiates from other interfaces.
	IsPragma_nameContext()
}

type Pragma_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragma_nameContext() *Pragma_nameContext {
	var p = new(Pragma_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
	return p
}

func InitEmptyPragma_nameContext(p *Pragma_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_pragma_name
}

func (*Pragma_nameContext) IsPragma_nameContext() {}

func NewPragma_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pragma_nameContext {
	var p = new(Pragma_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_pragma_name

	return p
}

func (s *Pragma_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Pragma_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Pragma_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pragma_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pragma_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterPragma_name(s)
	}
}

func (s *Pragma_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitPragma_name(s)
	}
}

func (s *Pragma_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitPragma_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Pragma_name() (localctx IPragma_nameContext) {
	localctx = NewPragma_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, SQLiteParserRULE_pragma_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2360)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISavepoint_nameContext is an interface to support dynamic dispatch.
type ISavepoint_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsSavepoint_nameContext differentiates from other interfaces.
	IsSavepoint_nameContext()
}

type Savepoint_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_nameContext() *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
	return p
}

func InitEmptySavepoint_nameContext(p *Savepoint_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_savepoint_name
}

func (*Savepoint_nameContext) IsSavepoint_nameContext() {}

func NewSavepoint_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_nameContext {
	var p = new(Savepoint_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_savepoint_name

	return p
}

func (s *Savepoint_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Savepoint_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSavepoint_name(s)
	}
}

func (s *Savepoint_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSavepoint_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Savepoint_name() (localctx ISavepoint_nameContext) {
	localctx = NewSavepoint_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, SQLiteParserRULE_savepoint_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2362)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
	return p
}

func InitEmptyTable_aliasContext(p *Table_aliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_alias
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (s *Table_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, SQLiteParserRULE_table_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2364)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITransaction_nameContext is an interface to support dynamic dispatch.
type ITransaction_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTransaction_nameContext differentiates from other interfaces.
	IsTransaction_nameContext()
}

type Transaction_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_nameContext() *Transaction_nameContext {
	var p = new(Transaction_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
	return p
}

func InitEmptyTransaction_nameContext(p *Transaction_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_transaction_name
}

func (*Transaction_nameContext) IsTransaction_nameContext() {}

func NewTransaction_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_nameContext {
	var p = new(Transaction_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_transaction_name

	return p
}

func (s *Transaction_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Transaction_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTransaction_name(s)
	}
}

func (s *Transaction_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTransaction_name(s)
	}
}

func (s *Transaction_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTransaction_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Transaction_name() (localctx ITransaction_nameContext) {
	localctx = NewTransaction_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, SQLiteParserRULE_transaction_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2366)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWindow_nameContext is an interface to support dynamic dispatch.
type IWindow_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsWindow_nameContext differentiates from other interfaces.
	IsWindow_nameContext()
}

type Window_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_nameContext() *Window_nameContext {
	var p = new(Window_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_name
	return p
}

func InitEmptyWindow_nameContext(p *Window_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_window_name
}

func (*Window_nameContext) IsWindow_nameContext() {}

func NewWindow_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_nameContext {
	var p = new(Window_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_window_name

	return p
}

func (s *Window_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Window_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterWindow_name(s)
	}
}

func (s *Window_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitWindow_name(s)
	}
}

func (s *Window_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitWindow_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Window_name() (localctx IWindow_nameContext) {
	localctx = NewWindow_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, SQLiteParserRULE_window_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2368)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alias
	return p
}

func InitEmptyAliasContext(p *AliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_alias
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, SQLiteParserRULE_alias)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2370)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFilenameContext is an interface to support dynamic dispatch.
type IFilenameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsFilenameContext differentiates from other interfaces.
	IsFilenameContext()
}

type FilenameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilenameContext() *FilenameContext {
	var p = new(FilenameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filename
	return p
}

func InitEmptyFilenameContext(p *FilenameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_filename
}

func (*FilenameContext) IsFilenameContext() {}

func NewFilenameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilenameContext {
	var p = new(FilenameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_filename

	return p
}

func (s *FilenameContext) GetParser() antlr.Parser { return s.parser }

func (s *FilenameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *FilenameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilenameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilenameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterFilename(s)
	}
}

func (s *FilenameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitFilename(s)
	}
}

func (s *FilenameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitFilename(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Filename() (localctx IFilenameContext) {
	localctx = NewFilenameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, SQLiteParserRULE_filename)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2372)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBase_window_nameContext is an interface to support dynamic dispatch.
type IBase_window_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsBase_window_nameContext differentiates from other interfaces.
	IsBase_window_nameContext()
}

type Base_window_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBase_window_nameContext() *Base_window_nameContext {
	var p = new(Base_window_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_base_window_name
	return p
}

func InitEmptyBase_window_nameContext(p *Base_window_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_base_window_name
}

func (*Base_window_nameContext) IsBase_window_nameContext() {}

func NewBase_window_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Base_window_nameContext {
	var p = new(Base_window_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_base_window_name

	return p
}

func (s *Base_window_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Base_window_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Base_window_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Base_window_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Base_window_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterBase_window_name(s)
	}
}

func (s *Base_window_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitBase_window_name(s)
	}
}

func (s *Base_window_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitBase_window_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Base_window_name() (localctx IBase_window_nameContext) {
	localctx = NewBase_window_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, SQLiteParserRULE_base_window_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2374)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISimple_funcContext is an interface to support dynamic dispatch.
type ISimple_funcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsSimple_funcContext differentiates from other interfaces.
	IsSimple_funcContext()
}

type Simple_funcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_funcContext() *Simple_funcContext {
	var p = new(Simple_funcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_func
	return p
}

func InitEmptySimple_funcContext(p *Simple_funcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_simple_func
}

func (*Simple_funcContext) IsSimple_funcContext() {}

func NewSimple_funcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_funcContext {
	var p = new(Simple_funcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_simple_func

	return p
}

func (s *Simple_funcContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_funcContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Simple_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_funcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterSimple_func(s)
	}
}

func (s *Simple_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitSimple_func(s)
	}
}

func (s *Simple_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitSimple_func(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Simple_func() (localctx ISimple_funcContext) {
	localctx = NewSimple_funcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, SQLiteParserRULE_simple_func)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2376)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAggregate_funcContext is an interface to support dynamic dispatch.
type IAggregate_funcContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsAggregate_funcContext differentiates from other interfaces.
	IsAggregate_funcContext()
}

type Aggregate_funcContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_funcContext() *Aggregate_funcContext {
	var p = new(Aggregate_funcContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_func
	return p
}

func InitEmptyAggregate_funcContext(p *Aggregate_funcContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_aggregate_func
}

func (*Aggregate_funcContext) IsAggregate_funcContext() {}

func NewAggregate_funcContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_funcContext {
	var p = new(Aggregate_funcContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_aggregate_func

	return p
}

func (s *Aggregate_funcContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_funcContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Aggregate_funcContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_funcContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_funcContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAggregate_func(s)
	}
}

func (s *Aggregate_funcContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAggregate_func(s)
	}
}

func (s *Aggregate_funcContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAggregate_func(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Aggregate_func() (localctx IAggregate_funcContext) {
	localctx = NewAggregate_funcContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, SQLiteParserRULE_aggregate_func)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2378)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITable_function_nameContext is an interface to support dynamic dispatch.
type ITable_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Any_name() IAny_nameContext

	// IsTable_function_nameContext differentiates from other interfaces.
	IsTable_function_nameContext()
}

type Table_function_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_function_nameContext() *Table_function_nameContext {
	var p = new(Table_function_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_function_name
	return p
}

func InitEmptyTable_function_nameContext(p *Table_function_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_table_function_name
}

func (*Table_function_nameContext) IsTable_function_nameContext() {}

func NewTable_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_function_nameContext {
	var p = new(Table_function_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_table_function_name

	return p
}

func (s *Table_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_function_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Table_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterTable_function_name(s)
	}
}

func (s *Table_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitTable_function_name(s)
	}
}

func (s *Table_function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitTable_function_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Table_function_name() (localctx ITable_function_nameContext) {
	localctx = NewTable_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, SQLiteParserRULE_table_function_name)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Any_name()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAny_nameContext is an interface to support dynamic dispatch.
type IAny_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IDENTIFIER() antlr.TerminalNode
	Keyword() IKeywordContext
	STRING_LITERAL() antlr.TerminalNode
	OPEN_PAR() antlr.TerminalNode
	Any_name() IAny_nameContext
	CLOSE_PAR() antlr.TerminalNode

	// IsAny_nameContext differentiates from other interfaces.
	IsAny_nameContext()
}

type Any_nameContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAny_nameContext() *Any_nameContext {
	var p = new(Any_nameContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_any_name
	return p
}

func InitEmptyAny_nameContext(p *Any_nameContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = SQLiteParserRULE_any_name
}

func (*Any_nameContext) IsAny_nameContext() {}

func NewAny_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Any_nameContext {
	var p = new(Any_nameContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLiteParserRULE_any_name

	return p
}

func (s *Any_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Any_nameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLiteParserIDENTIFIER, 0)
}

func (s *Any_nameContext) Keyword() IKeywordContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordContext)
}

func (s *Any_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLiteParserSTRING_LITERAL, 0)
}

func (s *Any_nameContext) OPEN_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserOPEN_PAR, 0)
}

func (s *Any_nameContext) Any_name() IAny_nameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAny_nameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAny_nameContext)
}

func (s *Any_nameContext) CLOSE_PAR() antlr.TerminalNode {
	return s.GetToken(SQLiteParserCLOSE_PAR, 0)
}

func (s *Any_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Any_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Any_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.EnterAny_name(s)
	}
}

func (s *Any_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLiteParserListener); ok {
		listenerT.ExitAny_name(s)
	}
}

func (s *Any_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SQLiteParserVisitor:
		return t.VisitAny_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SQLiteParser) Any_name() (localctx IAny_nameContext) {
	localctx = NewAny_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, SQLiteParserRULE_any_name)
	p.SetState(2389)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case SQLiteParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2382)
			p.Match(SQLiteParserIDENTIFIER)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserABORT_, SQLiteParserACTION_, SQLiteParserADD_, SQLiteParserAFTER_, SQLiteParserALL_, SQLiteParserALTER_, SQLiteParserANALYZE_, SQLiteParserAND_, SQLiteParserAS_, SQLiteParserASC_, SQLiteParserATTACH_, SQLiteParserAUTOINCREMENT_, SQLiteParserBEFORE_, SQLiteParserBEGIN_, SQLiteParserBETWEEN_, SQLiteParserBY_, SQLiteParserCASCADE_, SQLiteParserCASE_, SQLiteParserCAST_, SQLiteParserCHECK_, SQLiteParserCOLLATE_, SQLiteParserCOLUMN_, SQLiteParserCOMMIT_, SQLiteParserCONFLICT_, SQLiteParserCONSTRAINT_, SQLiteParserCREATE_, SQLiteParserCROSS_, SQLiteParserCURRENT_DATE_, SQLiteParserCURRENT_TIME_, SQLiteParserCURRENT_TIMESTAMP_, SQLiteParserDATABASE_, SQLiteParserDEFAULT_, SQLiteParserDEFERRABLE_, SQLiteParserDEFERRED_, SQLiteParserDELETE_, SQLiteParserDESC_, SQLiteParserDETACH_, SQLiteParserDISTINCT_, SQLiteParserDROP_, SQLiteParserEACH_, SQLiteParserELSE_, SQLiteParserEND_, SQLiteParserESCAPE_, SQLiteParserEXCEPT_, SQLiteParserEXCLUSIVE_, SQLiteParserEXISTS_, SQLiteParserEXPLAIN_, SQLiteParserFAIL_, SQLiteParserFOR_, SQLiteParserFOREIGN_, SQLiteParserFROM_, SQLiteParserFULL_, SQLiteParserGLOB_, SQLiteParserGROUP_, SQLiteParserHAVING_, SQLiteParserIF_, SQLiteParserIGNORE_, SQLiteParserIMMEDIATE_, SQLiteParserIN_, SQLiteParserINDEX_, SQLiteParserINDEXED_, SQLiteParserINITIALLY_, SQLiteParserINNER_, SQLiteParserINSERT_, SQLiteParserINSTEAD_, SQLiteParserINTERSECT_, SQLiteParserINTO_, SQLiteParserIS_, SQLiteParserISNULL_, SQLiteParserJOIN_, SQLiteParserKEY_, SQLiteParserLEFT_, SQLiteParserLIKE_, SQLiteParserLIMIT_, SQLiteParserMATCH_, SQLiteParserNATURAL_, SQLiteParserNO_, SQLiteParserNOT_, SQLiteParserNOTNULL_, SQLiteParserNULL_, SQLiteParserOF_, SQLiteParserOFFSET_, SQLiteParserON_, SQLiteParserOR_, SQLiteParserORDER_, SQLiteParserOUTER_, SQLiteParserPLAN_, SQLiteParserPRAGMA_, SQLiteParserPRIMARY_, SQLiteParserQUERY_, SQLiteParserRAISE_, SQLiteParserRECURSIVE_, SQLiteParserREFERENCES_, SQLiteParserREGEXP_, SQLiteParserREINDEX_, SQLiteParserRELEASE_, SQLiteParserRENAME_, SQLiteParserREPLACE_, SQLiteParserRESTRICT_, SQLiteParserRIGHT_, SQLiteParserROLLBACK_, SQLiteParserROW_, SQLiteParserROWS_, SQLiteParserSAVEPOINT_, SQLiteParserSELECT_, SQLiteParserSET_, SQLiteParserTABLE_, SQLiteParserTEMP_, SQLiteParserTEMPORARY_, SQLiteParserTEXT_, SQLiteParserTHEN_, SQLiteParserTO_, SQLiteParserTRANSACTION_, SQLiteParserTRIGGER_, SQLiteParserUNION_, SQLiteParserUNIQUE_, SQLiteParserUPDATE_, SQLiteParserUSING_, SQLiteParserVACUUM_, SQLiteParserVALUES_, SQLiteParserVIEW_, SQLiteParserVIRTUAL_, SQLiteParserWHEN_, SQLiteParserWHERE_, SQLiteParserWITH_, SQLiteParserWITHOUT_, SQLiteParserFIRST_VALUE_, SQLiteParserOVER_, SQLiteParserPARTITION_, SQLiteParserRANGE_, SQLiteParserPRECEDING_, SQLiteParserUNBOUNDED_, SQLiteParserCURRENT_, SQLiteParserFOLLOWING_, SQLiteParserCUME_DIST_, SQLiteParserDENSE_RANK_, SQLiteParserLAG_, SQLiteParserLAST_VALUE_, SQLiteParserLEAD_, SQLiteParserNTH_VALUE_, SQLiteParserNTILE_, SQLiteParserPERCENT_RANK_, SQLiteParserRANK_, SQLiteParserROW_NUMBER_, SQLiteParserGENERATED_, SQLiteParserALWAYS_, SQLiteParserSTORED_, SQLiteParserTRUE_, SQLiteParserFALSE_, SQLiteParserWINDOW_, SQLiteParserNULLS_, SQLiteParserFIRST_, SQLiteParserLAST_, SQLiteParserFILTER_, SQLiteParserGROUPS_, SQLiteParserEXCLUDE_:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2383)
			p.Keyword()
		}

	case SQLiteParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2384)
			p.Match(SQLiteParserSTRING_LITERAL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case SQLiteParserOPEN_PAR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2385)
			p.Match(SQLiteParserOPEN_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(2386)
			p.Any_name()
		}
		{
			p.SetState(2387)
			p.Match(SQLiteParserCLOSE_PAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *SQLiteParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 56:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLiteParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 18)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
